[
  {
    "objectID": "weekly-notes/week-05-notes.html",
    "href": "weekly-notes/week-05-notes.html",
    "title": "MUSA 5080 Notes #5",
    "section": "",
    "text": "Note\n\n\n\nWeek 5: Predictive Modeling & Cross-Validation\nDate: 10/06/2025"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#key-learning-objectives",
    "href": "weekly-notes/week-05-notes.html#key-learning-objectives",
    "title": "MUSA 5080 Notes #5",
    "section": "Key Learning Objectives",
    "text": "Key Learning Objectives\n\nUnderstand predictive modeling workflow\nLearn 10-fold cross-validation for model selection\nMaster model diagnostics and validation techniques\nHandle multicollinearity and outliers\nCompare models using appropriate metrics\nApply feature engineering and transformations"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#what-is-predictive-modeling",
    "href": "weekly-notes/week-05-notes.html#what-is-predictive-modeling",
    "title": "MUSA 5080 Notes #5",
    "section": "What is Predictive Modeling?",
    "text": "What is Predictive Modeling?\nGoal: Build a model that can accurately predict outcomes for new, unseen data\nKey Principles: - Generalization: Model should work on new data, not just training data - Validation: Test model performance on held-out data - Comparison: Use consistent metrics to compare different models - Diagnostics: Check model assumptions and identify problems"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#the-modeling-workflow",
    "href": "weekly-notes/week-05-notes.html#the-modeling-workflow",
    "title": "MUSA 5080 Notes #5",
    "section": "The Modeling Workflow",
    "text": "The Modeling Workflow\n\nData Collection → Gather relevant predictors and target variable\nExploratory Data Analysis → Understand relationships and distributions\nFeature Engineering → Transform variables for better model performance\nModel Building → Fit multiple models with different predictors\nModel Validation → Use cross-validation to assess performance\nModel Selection → Choose best model based on validation metrics\nDiagnostics → Check assumptions and identify issues\nFinal Model → Deploy best-performing model"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#pennsylvania-county-home-value-challenge",
    "href": "weekly-notes/week-05-notes.html#pennsylvania-county-home-value-challenge",
    "title": "MUSA 5080 Notes #5",
    "section": "Pennsylvania County Home Value Challenge",
    "text": "Pennsylvania County Home Value Challenge\nTarget Variable: Median home value (B25077_001) Predictors: - Total population (B01003_001) - Median household income (B19013_001) - Median age (B01002_001) - Percent with bachelor’s degree (B15003_022) - Median rent (B25058_001) - Poverty rate (B17001_002)\n# Data collection using tidycensus\nlibrary(tidycensus)\nlibrary(tidyverse)\n\nchallenge_data &lt;- get_acs(\n  geography = \"county\",\n  state = \"PA\",\n  variables = c(\n    home_value = \"B25077_001\",      # TARGET: Median home value\n    total_pop = \"B01003_001\",       # Total population\n    median_income = \"B19013_001\",   # Median household income\n    median_age = \"B01002_001\",      # Median age\n    percent_college = \"B15003_022\", # Bachelor's degree or higher\n    median_rent = \"B25058_001\",     # Median rent\n    poverty_rate = \"B17001_002\"     # Population in poverty\n  ),\n  year = 2022,\n  output = \"wide\"\n)"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#exploratory-data-analysis",
    "href": "weekly-notes/week-05-notes.html#exploratory-data-analysis",
    "title": "MUSA 5080 Notes #5",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\nKey EDA Steps: 1. Descriptive Statistics → Understand data distributions 2. Correlation Analysis → Identify relationships between variables 3. Visualization → Plot relationships between predictors and target 4. Distribution Checks → Identify need for transformations\n# Correlation analysis\nlibrary(corrplot)\n\ncor_data &lt;- challenge_data %&gt;% \n  select(home_valueE, total_popE, median_incomeE, median_ageE, \n         percent_collegeE, median_rentE, poverty_rateE)\n\ncor_matrix &lt;- cor(cor_data, use = \"complete.obs\")\ncorrplot(cor_matrix, method = \"color\", type = \"upper\", \n         tl.col = \"black\", tl.srt = 45, addCoef.col = \"black\")\nKey Findings from EDA: - Strong positive correlation between income and home values - High correlation between income and rent (potential multicollinearity) - Right-skewed distributions suggest need for log transformation - Some counties may be outliers"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#why-transform-variables",
    "href": "weekly-notes/week-05-notes.html#why-transform-variables",
    "title": "MUSA 5080 Notes #5",
    "section": "Why Transform Variables?",
    "text": "Why Transform Variables?\nCommon Issues: - Right-skewed distributions → Violate normality assumptions - Non-linear relationships → Linear models may miss patterns - Scale differences → Variables with different scales can dominate"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#log-transformation-strategy",
    "href": "weekly-notes/week-05-notes.html#log-transformation-strategy",
    "title": "MUSA 5080 Notes #5",
    "section": "Log Transformation Strategy",
    "text": "Log Transformation Strategy\n# Create log-transformed dataset\ndata_log &lt;- challenge_data %&gt;%\n  mutate(\n    log_home_value = log(home_valueE + 1),\n    log_total_pop = log(total_popE + 1),\n    log_median_income = log(median_incomeE + 1),\n    log_median_rent = log(median_rentE + 1),\n    log_median_age = log(median_ageE + 1),\n    log_percent_college = log(percent_collegeE + 1),\n    log_poverty_rate = log(poverty_rateE + 1)\n  )\nBenefits of Log Transformation: - Makes distributions more symmetric - Reduces impact of extreme values - Often improves linear relationships - Makes coefficients interpretable as percentage changes\nNote: Adding 1 before log transformation handles zero values"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#why-cross-validation",
    "href": "weekly-notes/week-05-notes.html#why-cross-validation",
    "title": "MUSA 5080 Notes #5",
    "section": "Why Cross-Validation?",
    "text": "Why Cross-Validation?\nProblem with Single Train/Test Split: - Results depend on random split - May not be representative of full dataset - Limited data for training\nSolution: k-Fold Cross-Validation - Split data into k folds (typically 5 or 10) - Train on k-1 folds, test on remaining fold - Repeat k times, average results - More robust estimate of model performance"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#fold-cross-validation-setup",
    "href": "weekly-notes/week-05-notes.html#fold-cross-validation-setup",
    "title": "MUSA 5080 Notes #5",
    "section": "10-Fold Cross-Validation Setup",
    "text": "10-Fold Cross-Validation Setup\nlibrary(caret)\n\n# Set up 10-fold cross-validation\nset.seed(123)\ntrain_control &lt;- trainControl(method = \"cv\", number = 10)\n\n# Fit model with cross-validation\nmodel &lt;- train(\n  log_home_value ~ log_median_income,\n  data = data_log,\n  method = \"lm\",\n  trControl = train_control\n)\nKey Parameters: - method = \"cv\" → Use cross-validation - number = 10 → 10 folds - set.seed(123) → Reproducible results"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#progressive-model-building",
    "href": "weekly-notes/week-05-notes.html#progressive-model-building",
    "title": "MUSA 5080 Notes #5",
    "section": "Progressive Model Building",
    "text": "Progressive Model Building\nStrategy: Start simple, add complexity gradually\n# Model 1: Income only\nmodel1 &lt;- train(\n  log_home_value ~ log_median_income,\n  data = data_log,\n  method = \"lm\",\n  trControl = train_control\n)\n\n# Model 2: + Education\nmodel2 &lt;- train(\n  log_home_value ~ log_median_income + log_percent_college,\n  data = data_log,\n  method = \"lm\",\n  trControl = train_control\n)\n\n# Model 3: + Poverty\nmodel3 &lt;- train(\n  log_home_value ~ log_median_income + log_percent_college + log_poverty_rate,\n  data = data_log,\n  method = \"lm\",\n  trControl = train_control\n)\n\n# Continue adding variables...\nBenefits of Progressive Building: - Understand contribution of each variable - Identify when adding variables stops helping - Detect multicollinearity issues - Maintain interpretability"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#model-comparison-metrics",
    "href": "weekly-notes/week-05-notes.html#model-comparison-metrics",
    "title": "MUSA 5080 Notes #5",
    "section": "Model Comparison Metrics",
    "text": "Model Comparison Metrics\nKey Metrics: - RMSE (Root Mean Square Error) → Lower is better - R² (R-squared) → Higher is better (0-1 scale) - MAE (Mean Absolute Error) → Lower is better\n# Calculate RMSE on original scale\ncalc_original_rmse &lt;- function(model, data) {\n  pred_log &lt;- predict(model, data)\n  pred_original &lt;- exp(pred_log) - 1\n  actual_original &lt;- data$home_valueE\n  sqrt(mean((pred_original - actual_original)^2, na.rm = TRUE))\n}\nImportant: Convert predictions back to original scale for meaningful interpretation"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#why-model-diagnostics",
    "href": "weekly-notes/week-05-notes.html#why-model-diagnostics",
    "title": "MUSA 5080 Notes #5",
    "section": "Why Model Diagnostics?",
    "text": "Why Model Diagnostics?\nLinear Regression Assumptions: 1. Linearity → Relationship between predictors and outcome is linear 2. Independence → Observations are independent 3. Homoscedasticity → Constant variance of residuals 4. Normality → Residuals are normally distributed 5. No multicollinearity → Predictors are not highly correlated"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#diagnostic-tools",
    "href": "weekly-notes/week-05-notes.html#diagnostic-tools",
    "title": "MUSA 5080 Notes #5",
    "section": "Diagnostic Tools",
    "text": "Diagnostic Tools\n\n1. Residual Plots\n# Standard residual plots\npar(mfrow = c(2, 2))\nplot(final_lm)\npar(mfrow = c(1, 1))\nWhat to Look For: - Residuals vs Fitted: Random scatter around zero - Normal Q-Q: Points follow diagonal line - Scale-Location: Horizontal line with random scatter - Residuals vs Leverage: No extreme outliers\n\n\n2. Cook’s Distance\n# Identify influential observations\ncooks_d &lt;- cooks.distance(final_lm)\ninfluential &lt;- which(cooks_d &gt; 4/nrow(data_log))\n\nif(length(influential) &gt; 0) {\n  cat(\"Influential observations:\", length(influential), \"\\n\")\n  print(challenge_data[influential, c(\"NAME\", \"home_valueE\")])\n}\nRule of Thumb: Cook’s Distance &gt; 4/n indicates influential observations\n\n\n3. Variance Inflation Factor (VIF)\nlibrary(car)\n\n# Check for multicollinearity\nif(ncol(model.matrix(final_lm)) &gt; 2) {\n  print(round(vif(final_lm), 2))\n}\nInterpretation: - VIF &lt; 5: No multicollinearity concern - VIF 5-10: Moderate multicollinearity - VIF &gt; 10: High multicollinearity (consider removing variables)\n\n\n4. Breusch-Pagan Test\nlibrary(lmtest)\n\n# Test for heteroscedasticity\nprint(bptest(final_lm))\nInterpretation: - p-value &gt; 0.05: No heteroscedasticity (good) - p-value &lt; 0.05: Heteroscedasticity present (may need transformation)"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#handling-outliers",
    "href": "weekly-notes/week-05-notes.html#handling-outliers",
    "title": "MUSA 5080 Notes #5",
    "section": "Handling Outliers",
    "text": "Handling Outliers\nWhen to Remove Outliers: - High Cook’s Distance (&gt; 4/n) - Clear data entry errors - Extreme values that don’t represent population\nProcess: 1. Identify influential observations 2. Remove from dataset 3. Refit model 4. Compare performance\nif(length(influential) &gt; 0) {\n  data_no_outliers &lt;- data_log[-influential, ]\n  \n  # Retrain best model\n  model_no_outliers &lt;- train(\n    formula(best_model),\n    data = data_no_outliers,\n    method = \"lm\",\n    trControl = train_control\n  )\n  \n  # Compare performance\n  rmse_after &lt;- calc_original_rmse(model_no_outliers, data_no_outliers)\n  cat(\"RMSE after removal:\", scales::dollar(round(rmse_after, 0)), \"\\n\")\n}"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#model-selection-criteria",
    "href": "weekly-notes/week-05-notes.html#model-selection-criteria",
    "title": "MUSA 5080 Notes #5",
    "section": "Model Selection Criteria",
    "text": "Model Selection Criteria\nPrimary Criterion: Lowest RMSE on original scale Secondary Criteria: - Higher R² - Simpler model (fewer variables) - Better diagnostics - More interpretable"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#data-preparation",
    "href": "weekly-notes/week-05-notes.html#data-preparation",
    "title": "MUSA 5080 Notes #5",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nHandle Missing Values → Use complete cases or imputation\nCheck Data Quality → Look for obvious errors\nTransform Variables → Log transform skewed variables\nStandardize if Needed → For some algorithms"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#model-building",
    "href": "weekly-notes/week-05-notes.html#model-building",
    "title": "MUSA 5080 Notes #5",
    "section": "Model Building",
    "text": "Model Building\n\nStart Simple → Begin with most important predictors\nUse Cross-Validation → Always validate model performance\nCompare Models → Use consistent metrics\nCheck Assumptions → Run diagnostics"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#validation",
    "href": "weekly-notes/week-05-notes.html#validation",
    "title": "MUSA 5080 Notes #5",
    "section": "Validation",
    "text": "Validation\n\nUse Appropriate Metrics → RMSE for regression, accuracy for classification\nConvert to Original Scale → For interpretable results\nReport Confidence Intervals → Show uncertainty\nTest on New Data → Final validation"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#interpretation",
    "href": "weekly-notes/week-05-notes.html#interpretation",
    "title": "MUSA 5080 Notes #5",
    "section": "Interpretation",
    "text": "Interpretation\n\nCoefficient Interpretation → Log-transformed variables show percentage changes\nModel Limitations → Acknowledge assumptions and limitations\nPractical Significance → Consider if improvements are meaningful\nGeneralizability → Discuss how well model applies to new data"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#predictive-modeling-skills",
    "href": "weekly-notes/week-05-notes.html#predictive-modeling-skills",
    "title": "MUSA 5080 Notes #5",
    "section": "Predictive Modeling Skills",
    "text": "Predictive Modeling Skills\n\nData Preparation: Clean, transform, and explore data thoroughly\nCross-Validation: Always use proper validation techniques\nModel Comparison: Use consistent metrics and systematic approach\nDiagnostics: Check assumptions and identify problems\nFeature Engineering: Transform variables for better model performance"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#common-pitfalls",
    "href": "weekly-notes/week-05-notes.html#common-pitfalls",
    "title": "MUSA 5080 Notes #5",
    "section": "Common Pitfalls",
    "text": "Common Pitfalls\n\nOverfitting: Model performs well on training data but poorly on new data\nData Leakage: Using future information to predict past outcomes\nIgnoring Assumptions: Not checking linear regression assumptions\nInappropriate Metrics: Using wrong metrics for model comparison\nIgnoring Outliers: Not identifying and handling influential observations"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#model-performance",
    "href": "weekly-notes/week-05-notes.html#model-performance",
    "title": "MUSA 5080 Notes #5",
    "section": "Model Performance",
    "text": "Model Performance\n\nRMSE: Primary metric for regression problems\nR²: Proportion of variance explained\nCross-Validation: Essential for unbiased performance estimates\nOriginal Scale: Always report results in interpretable units"
  },
  {
    "objectID": "weekly-notes/week-05-notes.html#next-steps",
    "href": "weekly-notes/week-05-notes.html#next-steps",
    "title": "MUSA 5080 Notes #5",
    "section": "Next Steps",
    "text": "Next Steps\n\nLearn about regularization techniques (Ridge, Lasso)\nExplore non-linear models (polynomial, splines)\nUnderstand ensemble methods\nPractice with different types of data and problems"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html",
    "href": "weekly-notes/week-03-notes.html",
    "title": "MUSA 5080 Notes #3",
    "section": "",
    "text": "Note\n\n\n\nWeek 3: Data Visualization & Exploratory Analysis\nDate: 09/22/2025"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-1-why-visualization-matters",
    "href": "weekly-notes/week-03-notes.html#part-1-why-visualization-matters",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 1: Why Visualization Matters",
    "text": "Part 1: Why Visualization Matters\n\nThe Power of Visual Communication\nThis week I learned about the critical importance of data visualization, especially in policy contexts. When I think about Assignment 1, I created tables showing income reliability patterns across counties, but I realized that visual presentation could dramatically change the impact of my analysis when presenting to:\n\nThe state legislature (2-minute briefing)\nCommunity advocacy groups\n\nLocal news reporters\n\n\n\nAnscombe’s Quartet: The Famous Lesson\nFour datasets with identical summary statistics: - Same means (x̄ = 9, ȳ = 7.5) - Same variances - Same correlation (r = 0.816) - Same regression line\n\n\n\n\n\n\nImportant\n\n\n\nBut completely different patterns when visualized\n\n\n\n\nPolicy Implications I Need to Remember\nWhy this matters for my work: - Summary statistics can hide critical patterns - Outliers may represent important communities - Relationships aren’t always linear - Visual inspection reveals data quality issues\nExample: A county with “average” income might have extreme inequality that algorithms would miss without visualization.\n\n\nEthical Data Communication\nFrom last week’s algorithmic bias discussion:\nResearch finding: Only 27% of planners warn users about unreliable ACS data - Most planners don’t report margins of error - Many lack training on statistical uncertainty - This violates AICP Code of Ethics\nMy responsibility: - Create honest, transparent visualizations - Always assess and communicate data quality - Consider who might be harmed by uncertain data\n\n\nReal Consequences of Bad Visualizations\nCommon problems in government data presentation: - Misleading scales or axes - Cherry-picked time periods - Hidden or ignored uncertainty - Missing context about data reliability\n\n\n\n\n\n\nWarning\n\n\n\nReal impact: The Jurjevich et al. study found that 72% of Portland census tracts had unreliable child poverty estimates, yet planners rarely communicated this uncertainty.\nResult: Poor policy decisions based on misunderstood data"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-2-grammar-of-graphics",
    "href": "weekly-notes/week-03-notes.html#part-2-grammar-of-graphics",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 2: Grammar of Graphics",
    "text": "Part 2: Grammar of Graphics\n\nThe ggplot2 Philosophy\nGrammar of Graphics principles:\nData → Aesthetics → Geometries → Visual\n\nData: My dataset (census data, survey responses, etc.)\nAesthetics: What variables map to visual properties (x, y, color, size)\nGeometries: How to display the data (points, bars, lines)\nAdditional layers: Scales, themes, facets, annotations\n\n\n\nBasic ggplot2 Structure\nEvery ggplot I create has this pattern:\nggplot(data = my_data) +\n  aes(x = variable1, y = variable2) +\n  geom_something() +\n  additional_layers()\n\n\n\n\n\n\nTip\n\n\n\nI build plots by adding layers with +\n\n\n\n\nAesthetic Mappings: The Key to ggplot2\nAesthetics map data to visual properties: - x, y - position - color - point/line color - fill - area fill color - size - point/line size - shape - point shape - alpha - transparency\n\n\n\n\n\n\nImportant\n\n\n\nImportant: Aesthetics go inside aes(), constants go outside\n\n\n\n\nExample: Basic Scatter Plot\nlibrary(tidyverse)\n\n# Basic scatter plot\nggplot(county_data) +\n  aes(x = median_income, y = total_population) +\n  geom_point() +\n  labs(\n    title = \"Income vs Population in PA Counties\",\n    x = \"Median Household Income ($)\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-3-exploratory-data-analysis",
    "href": "weekly-notes/week-03-notes.html#part-3-exploratory-data-analysis",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 3: Exploratory Data Analysis",
    "text": "Part 3: Exploratory Data Analysis\n\nThe EDA Mindset\nExploratory Data Analysis is detective work I need to master:\n\nWhat does the data look like? (distributions, missing values)\nWhat patterns exist? (relationships, clusters, trends)\nWhat’s unusual? (outliers, anomalies, data quality issues)\nWhat questions does this raise? (hypotheses for further investigation)\nHow reliable is this data?\n\nGoal: Understand my data before making decisions or building models\n\n\nEnhanced EDA Workflow for Policy Analysis\nMy enhanced process:\n\nLoad and inspect - dimensions, variable types, missing data\nAssess reliability - examine margins of error, calculate coefficients of variation\nVisualize distributions - histograms, boxplots for each variable\nExplore relationships - scatter plots, correlations\nIdentify patterns - grouping, clustering, geographical patterns\nQuestion anomalies - investigate outliers and unusual patterns\nDocument limitations - prepare honest communication about data quality\n\n\n\nUnderstanding Distributions\nWhy distribution shape matters:\n# Exploring income distribution\nggplot(county_data) +\n  aes(x = median_income) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Median Income Across PA Counties\",\n    x = \"Median Household Income ($)\",\n    y = \"Number of Counties\"\n  )\nWhat I should look for: Skewness, outliers, multiple peaks, gaps\n\n\nBoxplots for Quick Summaries\n# Boxplot to understand income distribution\nggplot(county_data) +\n  aes(y = median_income) +\n  geom_boxplot(fill = \"lightblue\") +\n  labs(\n    title = \"Income Distribution Summary\",\n    y = \"Median Household Income ($)\"\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#critical-data-quality-through-visualization",
    "href": "weekly-notes/week-03-notes.html#critical-data-quality-through-visualization",
    "title": "MUSA 5080 Notes #3",
    "section": "Critical: Data Quality Through Visualization",
    "text": "Critical: Data Quality Through Visualization\n\nResearch-Based Best Practices\nJurjevich et al. (2018): 5 Essential Guidelines I Must Follow:\n\nReport the corresponding MOEs of ACS estimates\n\nAlways include margin of error values\n\nInclude a footnote when not reporting MOEs\n\nExplicitly acknowledge omission\n\nProvide context for (un)reliability\n\nUse coefficient of variation (CV):\n\nCV &lt; 12% = reliable (green coding)\nCV 12-40% = somewhat reliable (yellow)\nCV &gt; 40% = unreliable (red coding)\n\n\nReduce statistical uncertainty\n\nCollapse data detail, aggregate geographies, use multi-year estimates\n\nAlways conduct statistical significance tests\n\nWhen comparing ACS estimates over time\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey insight: These practices are not just technical best practices—they are ethical requirements under the AICP Code of Ethics\n\n\n\n\nVisualizing Data Quality\n# Visualizing margin of error patterns\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    cv = moe_percentage / 1.645  # Convert MOE to CV\n  )\n\nggplot(county_reliability) +\n  aes(x = total_population, y = moe_percentage) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Data Quality vs Population Size\",\n    x = \"Total Population\",\n    y = \"Margin of Error (%)\",\n    subtitle = \"Smaller populations have higher uncertainty\"\n  ) +\n  theme_minimal()\nPattern I observed: Smaller populations have higher uncertainty\nEthical implication: These communities might be systematically undercounted"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-4-data-joins-integration",
    "href": "weekly-notes/week-03-notes.html#part-4-data-joins-integration",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 4: Data Joins & Integration",
    "text": "Part 4: Data Joins & Integration\n\nWhy I Need to Join Data\nTo combine datasets effectively: - Census demographics + Economic indicators - Survey responses + Geographic boundaries - Current data + Historical trends - Administrative records + Survey data\n\n\nTypes of Joins in dplyr\nFour main types I’ll use: - left_join() - Keep all rows from left dataset - right_join() - Keep all rows from right dataset - inner_join() - Keep only rows that match in both - full_join() - Keep all rows from both datasets\nMost common: left_join() to add columns to my main dataset\n\n\nExample: Joining Census Tables\n# Get income data\nincome_data &lt;- get_acs(\n  geography = \"county\",\n  variables = \"B19013_001\",\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\"\n)\n\n# Get education data\neducation_data &lt;- get_acs(\n  geography = \"county\", \n  variables = \"B15003_022\",  # Bachelor's degree\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\"\n)\n\n# Join the datasets\ncombined_data &lt;- income_data %&gt;%\n  left_join(education_data, by = \"GEOID\")\n\n\nChecking Join Results and Data Quality\nI must always verify joins AND assess combined reliability:\n# Check dimensions\nnrow(income_data)      # Should match\nnrow(education_data)   # Should match  \nnrow(combined_data)    # Should match\n\n# Check for missing values\ncombined_data %&gt;%\n  summarize(\n    missing_income = sum(is.na(median_income)),\n    missing_education = sum(is.na(college_pop))\n  )\n\n# Calculate reliability for both variables\ncombined_data %&gt;%\n  mutate(\n    income_cv = (income_moe / median_income) * 100 / 1.645,\n    college_cv = (college_moe / college_pop) * 100 / 1.645\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#eda-for-policy-analysis",
    "href": "weekly-notes/week-03-notes.html#eda-for-policy-analysis",
    "title": "MUSA 5080 Notes #3",
    "section": "EDA for Policy Analysis",
    "text": "EDA for Policy Analysis\n\nKey Questions I Should Always Ask\nFor census data specifically: - Geographic patterns: Are problems concentrated in certain areas? - Population relationships: How does size affect data quality? - Demographic patterns: Are certain communities systematically different? - Temporal trends: How do patterns change over time? - Data integrity: Where might survey bias affect results? - Reliability assessment: Which estimates should I trust?\n\n\nProfessional Visualization Standards\n# Create publication-ready visualization\nggplot(combined_data) +\n  aes(x = median_income, y = college_percentage) +\n  geom_point(aes(size = total_population), alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  scale_size_continuous(name = \"Population\") +\n  scale_x_continuous(labels = scales::dollar_format()) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n    title = \"Education and Income Relationship in PA Counties\",\n    subtitle = \"Higher income counties tend to have more college graduates\",\n    x = \"Median Household Income\",\n    y = \"Percent with Bachelor's Degree\",\n    caption = \"Source: ACS 2018-2022 5-year estimates\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#summary",
    "href": "weekly-notes/week-03-notes.html#summary",
    "title": "MUSA 5080 Notes #3",
    "section": "Summary",
    "text": "Summary\nThis week I learned that visualization is not just about making pretty charts—it’s about ethical communication and uncovering patterns that summary statistics might hide. Key takeaways:\n\nAnscombe’s Quartet taught me that identical statistics can hide completely different patterns\nProfessional ethics require me to always assess and communicate data uncertainty\nggplot2’s Grammar of Graphics provides a systematic approach to building meaningful visualizations\nEnhanced EDA workflow helps me understand data quality before making policy decisions\nData joins allow me to combine multiple sources while maintaining quality standards\n\n\n\n\n\n\n\nImportant\n\n\n\nMost important lesson: As a future planner, I have an ethical obligation to communicate data uncertainty honestly. My visualizations should reveal, not hide, the limitations of my data.\n\n\n\nSkills I Practiced\nggplot2 fundamentals: - Scatter plots, histograms, boxplots - Aesthetic mappings and customization - Professional themes and labels\nEDA workflow: - Distribution analysis - Outlier detection - Pattern identification\nEthical data practice: - Visualizing and reporting margins of error - Using coefficient of variation to assess reliability - Creating honest, transparent communications\n\n\n\n\n\n\nTip\n\n\n\nMoving forward: I will always start my analysis with exploratory visualization and end with honest communication about data limitations. This is both a technical best practice and an ethical requirement."
  },
  {
    "objectID": "weekly-notes/week-01-notes.html",
    "href": "weekly-notes/week-01-notes.html",
    "title": "MUSA 5080 Notes #1",
    "section": "",
    "text": "Note\n\n\n\nWeek 1: Introduction to R and dplyr\nDate: 09/08/2025"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#git-github",
    "href": "weekly-notes/week-01-notes.html#git-github",
    "title": "MUSA 5080 Notes #1",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\n\n\nGit\n\n\nGitHub\n\n\n\n1. Git\nVersion control system that tracks changes in files\n\n“Track changes” for code projects\nTime machine for your work\nCollaboration tool for teams\n\n\n\n2. GitHub\nCloud hosting for Git repositories\n\nBackup your work in the cloud\nShare projects with others\nDeploy websites (like our portfolios)\nCollaborate on code projects\n\n\n\n3. Key GitHub Concepts\nRepository (repo): Folder containing your project files\n\nCommit: Snapshot of your work at a point in time\nPush: Send your changes to GitHub cloud\nPull: Get latest changes from GitHub cloud"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#markdown-basics",
    "href": "weekly-notes/week-01-notes.html#markdown-basics",
    "title": "MUSA 5080 Notes #1",
    "section": "Markdown Basics",
    "text": "Markdown Basics\n\n1. Text Formatting\n**Bold text**\n*Italic text*\n***Bold and italic***\n`code text`\n~~Strikethrough~~\n\n\n2. Headers\n# Main Header\n## Section Header\n### Subsection Header\n\n\n3. Lists\n## Unordered List\n- Item 1\n- Item 2\n  - Sub-item A\n  - Sub-item B\n\n## Ordered List  \n1. First item\n2. Second item\n3. Third item\n\n\n4. Links and Images\n[Link text](https://example.com)\n[Link to another page](about.qmd)\n![Alt text](path/to/image.png)"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#basic-r",
    "href": "weekly-notes/week-01-notes.html#basic-r",
    "title": "MUSA 5080 Notes #1",
    "section": "Basic R",
    "text": "Basic R\n\n1. Tibbles better?\n# Traditional Data Frame\nclass(data)\n# Convert to tibble\ncar_data &lt;- as_tibble(data)\nclass(car_data)\n\nShows first 10 rows by default\nDisplays column names\nFits nicely on a screen\n\n\n\n2. Dplyr\nlibrary(tidyverse)\n\n# Load car sales data\ncar_data &lt;- read_csv(\"data/car_sales_data.csv\")\n\n# Basic exploration\nglimpse(car_data)\nnames(car_data)\n# The power of pipes - read as \"then\"\ncar_summary &lt;- data %&gt;%\n  filter(`Year of manufacture` &gt;= 2020) %&gt;%      # Recent models only\n  select(Manufacturer, Model, Price, Mileage) %&gt;% # Key variables\n  mutate(price_k = Price / 1000) %&gt;%             # Convert to thousands\n  filter(Mileage &lt; 50000) %&gt;%                    # Low mileage cars\n  group_by(Manufacturer) %&gt;%                     # Group by brand\n  summarize(                                     # Calculate statistics\n    avg_price = mean(price_k, na.rm = TRUE),\n    count = n()\n  )"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#summary",
    "href": "weekly-notes/week-01-notes.html#summary",
    "title": "MUSA 5080 Notes #1",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nTip\n\n\n\nThis week I mainly familiarized myself with several commonly used advanced tools (not limited to classroom use), and also learned the basic usage of R and dplyr functions. I need to reinforce the function usage in a timely manner."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Appendix.html",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Appendix.html",
    "title": "Philadelphia Housing Price Prediction – Technical Appendix",
    "section": "",
    "text": "Step0\n\n# =========================================================\n# Step 1: Load libraries and data\n# =========================================================\nlibrary(readr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(here)\nlibrary(tidyr)\nlibrary(stringr)\n\nopa_raw &lt;- read_csv(\"data/opa_properties_public.csv\",\n                    na = c(\"\", \"NA\", \"NaN\", \"NULL\"),\n                    guess_max = 1e6)\n\ncat(\"Rows (loaded):\", nrow(opa_raw), \"\\n\")\n\nRows (loaded): 583754 \n\n\n\n# =========================================================\n# Step 2: Data cleaning and filtering\n# =========================================================\nopa_res &lt;- opa_raw %&gt;%\n  mutate(\n    sale_date = as_date(sale_date),\n    # Prices are standardized as numeric values: regardless of whether they were originally numbers or strings (including $ or commas).\n    sale_price_num = suppressWarnings(\n      coalesce(as.numeric(sale_price), readr::parse_number(as.character(sale_price)))\n    ),\n    # Categories are standardized to a consistent data type.\n    cat_chr = as.character(category_code)\n  ) %&gt;%\n  filter(\n    cat_chr %in% c(\"1\"),  \n    sale_date &gt;= as_date(\"2023-01-01\"),\n    sale_date &lt;= as_date(\"2024-12-31\"),\n    sale_price_num &gt;= 10000,\n    total_livable_area &gt; 0,\n    year_built &gt; 0,\n    number_of_bedrooms &gt; 0,\n    number_of_bathrooms &gt; 0,\n    !is.na(census_tract),\n    census_tract != 0,\n    census_tract != \"\",\n    !is.na(zip_code),\n    zip_code != \"\",\n    !is.na(exterior_condition),\n    exterior_condition != \"\",\n    !is.na(interior_condition),\n    interior_condition != \"\",\n    !is.na(shape),\n    shape != \"\"\n  ) %&gt;%\n  select(\n    parcel_number, sale_date,\n    sale_price = sale_price_num,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract, shape\n  ) %&gt;%\n  distinct() %&gt;%\n  drop_na()\n\ncat(\"Rows (after cleaning and filtering):\", nrow(opa_res), \"\\n\")\n\nRows (after cleaning and filtering): 24123 \n\n\n\n# =========================================================\n# Step 3: Extract coordinates from shape field (using sf)\n# =========================================================\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(viridis)\n\n# Remove the prefix SRID=2272\nwkt &lt;- sub(\"^SRID=\\\\d+;\\\\s*\", \"\", opa_res$shape)\n\n# Convert to sf format.\ngeom &lt;- st_as_sfc(wkt, crs = 2272)\nopa_sf &lt;- st_sf(opa_res, geometry = geom)\n\n# Extract coordinates (for scatter plot).\ncoords &lt;- st_coordinates(opa_sf)\nopa_sf$X &lt;- coords[, 1]\nopa_sf$Y &lt;- coords[, 2]\n\n# Debug output.\ncat(\"Rows with valid coordinates:\", nrow(opa_sf), \"\\n\")\n\nRows with valid coordinates: 24123 \n\ncat(\"Sample X coordinates:\", head(opa_sf$X, 3), \"\\n\")\n\nSample X coordinates: 2726356 2709355 2718833 \n\ncat(\"Sample Y coordinates:\", head(opa_sf$Y, 3), \"\\n\")\n\nSample Y coordinates: 290862.2 257213.9 269581 \n\n\n\n# =========================================================\n# Step 4: Save cleaned data\n# =========================================================\n# Create output directory\ndir.create(here::here(\"data\"), recursive = TRUE, showWarnings = FALSE)\n\n# Export data (remove the geometry column, keeping only coordinates)\nopa_export &lt;- opa_sf %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract, x_coord = X, y_coord = Y\n  ) %&gt;%\n  st_drop_geometry()  \n\nwrite_csv(opa_export, \"./data/opa_sales_2023_2024_residential_clean.csv\")\n\ncat(\"Cleaned data saved to: opa_sales_2023_2024_residential_clean.csv\\n\")\n\nCleaned data saved to: opa_sales_2023_2024_residential_clean.csv\n\ncat(\"Final dataset contains\", nrow(opa_export), \"rows with\", ncol(opa_export), \"columns\\n\")\n\nFinal dataset contains 24123 rows with 14 columns\n\ncat(\"Columns:\", paste(names(opa_export), collapse = \", \"), \"\\n\")\n\nColumns: parcel_number, sale_date, sale_price, number_of_bedrooms, number_of_bathrooms, total_livable_area, year_built, zip_code, category_code, exterior_condition, interior_condition, census_tract, x_coord, y_coord \n\n\n\n# =========================================================\n# Step 5: Load, clean crime data and calculate crime count for properties\n# =========================================================\nlibrary(readr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(here)\nlibrary(tidyr)\nlibrary(sf)\n\n# Load crime data for 2023 and 2024\ncrime_2023 &lt;- read_csv(here(\"Midterm/data/crime_2023.csv\"), na = c(\"\", \"NA\", \"NaN\", \"NULL\"), guess_max = 1e6)\ncrime_2024 &lt;- read_csv(here(\"Midterm/data/crime_2024.csv\"), na = c(\"\", \"NA\", \"NaN\", \"NULL\"), guess_max = 1e6)\n\n# Merge, clean, and process crime data\ncrime_clean &lt;- bind_rows(\n  crime_2023 %&gt;% mutate(year = 2023),\n  crime_2024 %&gt;% mutate(year = 2024)\n) %&gt;%\n  mutate(\n    dispatch_date_time = as_datetime(dispatch_date_time),\n    dispatch_date = as_date(dispatch_date),\n    lat = as.numeric(lat),\n    lng = as.numeric(lng),\n    point_x = as.numeric(point_x),\n    point_y = as.numeric(point_y),\n    ucr_general = as.numeric(ucr_general),\n    text_general_code = as.character(text_general_code)\n  ) %&gt;%\n  filter(\n    !is.na(lat) & !is.na(lng),\n    lat != 0 & lng != 0,\n    dispatch_date &gt;= as_date(\"2023-01-01\"),\n    dispatch_date &lt;= as_date(\"2024-12-31\")\n  ) %&gt;%\n  select(\n    objectid, dc_dist, psa, dispatch_date_time, dispatch_date, \n    dispatch_time, hour, dc_key, location_block, \n    ucr_general, text_general_code, \n    lat, lng, point_x, point_y, year\n  ) %&gt;%\n  distinct() %&gt;%\n  drop_na()\n\n# Coordinate transformation: convert from WGS84 (EPSG:4326) to EPSG:2272 coordinate system\ncrime_sf &lt;- crime_clean %&gt;%\n  st_as_sf(coords = c(\"lng\", \"lat\"), crs = 4326) %&gt;%\n  st_transform(crs = 2272) %&gt;%\n  mutate(\n    x_coord_2272 = st_coordinates(.)[, 1],\n    y_coord_2272 = st_coordinates(.)[, 2]\n  ) %&gt;%\n  st_drop_geometry()\n\n# Read the cleaned real estate data\nopa_clean &lt;- read_csv(here(\"Midterm/data/opa_sales_2023_2024_residential_clean.csv\"))\n\n# Convert the real estate data to an sf object (EPSG:2272)\nopa_sf &lt;- opa_clean %&gt;%\n  st_as_sf(coords = c(\"x_coord\", \"y_coord\"), crs = 2272)\n\n# Convert the crime data to an sf object (EPSG:2272)\ncrime_sf_spatial &lt;- crime_sf %&gt;%\n  st_as_sf(coords = c(\"x_coord_2272\", \"y_coord_2272\"), crs = 2272)\n\n# Create a 0.75-mile buffer around each home and count crimes (15-minute walkshed)\nopa_buffers &lt;- st_buffer(opa_sf, dist = 3960)  # 0.75 mile = 3960 feet\ncrime_count &lt;- st_intersects(opa_buffers, crime_sf_spatial)\n\n# Add the crime counts to the real estate dataset\nopa_with_crime &lt;- opa_clean %&gt;%\n  mutate(\n    crime_count_15min_walk = sapply(crime_count, length)\n  )\n\ncat(\"Crime data processing completed:\\n\")\n\nCrime data processing completed:\n\ncat(\"Number of 2023 crime records:\", nrow(crime_2023), \"\\n\")\n\nNumber of 2023 crime records: 169017 \n\ncat(\"Number of 2024 crime records:\", nrow(crime_2024), \"\\n\")\n\nNumber of 2024 crime records: 160388 \n\ncat(\"Number of valid crime records after cleaning:\", nrow(crime_clean), \"\\n\")\n\nNumber of valid crime records after cleaning: 218725 \n\ncat(\"Number of records after coordinate transformation:\", nrow(crime_sf), \"\\n\")\n\nNumber of records after coordinate transformation: 218725 \n\ncat(\"Number of real estate records:\", nrow(opa_with_crime), \"\\n\")\n\nNumber of real estate records: 24123 \n\ncat(\"Average number of crimes within a 15-minute walkshed per property:\", round(mean(opa_with_crime$crime_count_15min_walk), 2), \"\\n\")\n\nAverage number of crimes within a 15-minute walkshed per property: 4466.34 \n\ncat(\"Crime count range:\", min(opa_with_crime$crime_count_15min_walk), \"-\", max(opa_with_crime$crime_count_15min_walk), \"\\n\")\n\nCrime count range: 35 - 13238 \n\n\n\n# =========================================================\n# Step 6: Add park accessibility metrics (distance in feet, keep coordinate columns)\n# =========================================================\nlibrary(sf)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(here)\n\n# Use the crime data processing results from the previous step\nopa_with_crime &lt;- opa_with_crime\n\n# Convert to an sf object (coordinate system: EPSG:2272, unit: feet)\nopa_sf &lt;- st_as_sf(\n  opa_with_crime,\n  coords = c(\"x_coord\", \"y_coord\"),\n  crs = 2272\n)\n\ncat(\"Number of real estate records read:\", nrow(opa_sf), \"\\n\")\n\nNumber of real estate records read: 24123 \n\n# Read and project the park data.\nparks &lt;- st_read(here(\"Midterm/data/PPR_Program_Sites.geojson\"), quiet = TRUE) %&gt;%\n  st_transform(2272)\n\n# Calculate park accessibility metrics (unit: feet)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    dist_to_park_ft = apply(st_distance(opa_sf, parks), 1, min),   \n    # Nearest park distance (feet).\n    park_within_15min_walk = lengths(st_within(opa_sf, st_buffer(parks, 3960)))  # 0.75 mile = 3960 feet\n  )\n\n# Extract coordinates to prevent st_drop_geometry from removing them\ncoords &lt;- st_coordinates(opa_sf)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    x_coord = coords[, 1],\n    y_coord = coords[, 2]\n  )\n\n# Export data (retain coordinates and newly added indicators)\nopa_export &lt;- opa_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract,\n    x_coord, y_coord,              # keep coordinates\n    crime_count_15min_walk,        # number of crimes within 15-minute walkshed\n    dist_to_park_ft,               # nearest park distance (feet)\n    park_within_15min_walk         # number of parks within 15-minute walkshed\n  )\n\n# Output summary information\n# Save the complete dataset with park accessibility indicators\nwrite_csv(opa_export, here(\"Midterm/data/opa_sales_with_parks.csv\"))\n\ncat(\" Park accessibility indicators added (unit: feet)\\n\")\n\n Park accessibility indicators added (unit: feet)\n\ncat(\"  Average nearest park distance:\", round(mean(opa_export$dist_to_park_ft, na.rm = TRUE), 1), \"ft\\n\")\n\n  Average nearest park distance: 1768.6 ft\n\ncat(\"  Average number of parks within 15-minute walkshed:\", round(mean(opa_export$park_within_15min_walk, na.rm = TRUE), 2), \"\\n\")\n\n  Average number of parks within 15-minute walkshed: 3.53 \n\ncat(\"  Number of fields:\", ncol(opa_export), \"columns (including coordinate columns)\\n\")\n\n  Number of fields: 17 columns (including coordinate columns)\n\ncat(\"🎉 Data saved to: ./data/opa_sales_with_parks.csv\\n\")\n\n🎉 Data saved to: ./data/opa_sales_with_parks.csv\n\n\n\n# =========================================================\n# Step 7: Add public transit accessibility metrics\n# (distance to nearest stop & number of stops within 1,000 ft; also 15-min walkshed)\n# =========================================================\nlibrary(sf)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(here)\nlibrary(units)\n\n# Use the same CRS (EPSG:2272, units = feet)\nanalysis_crs &lt;- 2272\n\n# Read the dataset saved in the previous step (with price, crime, and park metrics)\nopa_data &lt;- read_csv(here(\"Midterm/data/opa_sales_with_parks.csv\"))\nopa_sf &lt;- opa_data %&gt;%\n  st_as_sf(coords = c(\"x_coord\", \"y_coord\"), crs = analysis_crs)\n\ncat(\"Number of real estate records read:\", nrow(opa_sf), \"\\n\")\n\nNumber of real estate records read: 24123 \n\n# Read and project transit stop data\ntransit_path &lt;- here(\"Midterm/data/Transit_Stops_(Spring_2025).geojson\")\nstopifnot(file.exists(transit_path))\n\ntransit_stops &lt;- st_read(transit_path, quiet = TRUE) %&gt;%\n  st_transform(analysis_crs) %&gt;%\n  suppressWarnings(st_collection_extract(\"POINT\")) %&gt;%\n  filter(!st_is_empty(geometry)) %&gt;%\n  distinct(geometry, .keep_all = TRUE)\n\ncat(\"Number of transit stops:\", nrow(transit_stops), \"\\n\")\n\nNumber of transit stops: 13839 \n\n# Compute accessibility metrics (units: feet)\n# Distance to nearest transit stop\nnearest_idx &lt;- st_nearest_feature(opa_sf, transit_stops)\ndist_ft &lt;- st_distance(opa_sf, transit_stops[nearest_idx, ], by_element = TRUE)\nopa_sf$dist_transit_ft &lt;- as.numeric(set_units(dist_ft, \"ft\"))\n\n# Count of transit stops within a 15-minute walkshed (0.75 mile = 3960 ft)\nbuffer_3960ft &lt;- st_buffer(opa_sf, dist = 3960)\nopa_sf$transit_15min_walk &lt;- lengths(st_intersects(buffer_3960ft, transit_stops))\n\n# (Optional) Count of transit stops within 1,000 ft\nbuffer_1000ft &lt;- st_buffer(opa_sf, dist = 1000)\nopa_sf$transit_within_1000ft &lt;- lengths(st_intersects(buffer_1000ft, transit_stops))\n\n# Extract coordinates so st_drop_geometry does not remove them\ncoords &lt;- st_coordinates(opa_sf)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    x_coord = coords[, 1],\n    y_coord = coords[, 2]\n  )\n\n# Export results (retain coordinates and newly added indicators)\nopa_export &lt;- opa_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract,\n    x_coord, y_coord,                 # keep coordinates\n    crime_count_15min_walk,           # crime metric\n    dist_to_park_ft, park_within_15min_walk, # park metrics\n    dist_transit_ft, transit_15min_walk,     # transit metrics (walkshed)\n    transit_within_1000ft                    # transit stops within 1,000 ft\n  )\n\n# Output summary information\n# Save the complete dataset with transit metrics\nwrite_csv(opa_export, here(\"Midterm/data/opa_sales_with_transit.csv\"))\n\ncat(\"  Public transit metrics added\\n\")\n\n  Public transit metrics added\n\ncat(\"  Average distance to nearest transit stop:\", round(mean(opa_export$dist_transit_ft, na.rm = TRUE), 1), \"ft\\n\")\n\n  Average distance to nearest transit stop: 428.8 ft\n\ncat(\"  Average number of transit stops within 15-minute walkshed:\", round(mean(opa_export$transit_15min_walk, na.rm = TRUE), 2), \"\\n\")\n\n  Average number of transit stops within 15-minute walkshed: 151.79 \n\ncat(\"  Average number of transit stops within 1,000 ft:\", round(mean(opa_export$transit_within_1000ft, na.rm = TRUE), 2), \"\\n\")\n\n  Average number of transit stops within 1,000 ft: 10.73 \n\ncat(\"  Number of fields:\", ncol(opa_export), \"columns (including coordinate columns)\\n\")\n\n  Number of fields: 20 columns (including coordinate columns)\n\ncat(\"🎉 Data saved to: ./data/opa_sales_with_transit.csv\\n\")\n\n🎉 Data saved to: ./data/opa_sales_with_transit.csv\n\n\n\n# =========================================================\n# Step 8: Add hospital accessibility metrics\n# (distance to nearest hospital & count within 0.75-mile walkshed)\n# =========================================================\nlibrary(sf)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(here)\n\n# CRS: EPSG:2272 (units: feet)\nanalysis_crs &lt;- 2272\n\n# Read the dataset saved in the previous step (with price, crime, park, and transit metrics)\nopa_data &lt;- read_csv(here(\"Midterm/data/opa_sales_with_transit.csv\"))\nopa_sf &lt;- opa_data %&gt;%\n  st_as_sf(coords = c(\"x_coord\", \"y_coord\"), crs = analysis_crs)\n\ncat(\"Number of real estate records read:\", nrow(opa_sf), \"\\n\")\n\nNumber of real estate records read: 24123 \n\n# Read hospital data and project to the same CRS\nhospitals &lt;- st_read(here(\"Midterm/data/Hospitals.geojson\"), quiet = TRUE) %&gt;%\n  st_transform(analysis_crs)\n\ncat(\"Number of hospitals:\", nrow(hospitals), \"\\n\")\n\nNumber of hospitals: 36 \n\n# Compute hospital accessibility metrics (units: feet)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    # Distance to nearest hospital (feet)\n    dist_to_hospital_ft = as.numeric(apply(st_distance(opa_sf, hospitals), 1, min)),\n    # Number of hospitals within a 15-minute walkshed (0.75 mile = 3960 ft)\n    hospitals_15min_walk = lengths(st_within(opa_sf, st_buffer(hospitals, 3960)))\n  )\n\n# Extract coordinates so st_drop_geometry does not remove them\ncoords &lt;- st_coordinates(opa_sf)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    x_coord = coords[, 1],\n    y_coord = coords[, 2]\n  )\n\n# Export results (retain coordinates and all features)\nopa_export &lt;- opa_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract,\n    x_coord, y_coord,                         # keep coordinates\n    crime_count_15min_walk,                   # crime metrics\n    dist_to_park_ft, park_within_15min_walk,  # park metrics\n    dist_transit_ft, transit_15min_walk,      # transit metrics\n    dist_to_hospital_ft, hospitals_15min_walk # hospital metrics (new)\n  )\n\n# Output summary information\n# Save the complete dataset with hospital metrics\nwrite_csv(opa_export, here(\"Midterm/data/opa_sales_with_hospitals.csv\"))\n\ncat(\"  Hospital accessibility metrics added\\n\")\n\n  Hospital accessibility metrics added\n\ncat(\"  Average distance to nearest hospital:\", round(mean(opa_export$dist_to_hospital_ft, na.rm = TRUE), 1), \"ft\\n\")\n\n  Average distance to nearest hospital: 5169 ft\n\ncat(\"  Average number of hospitals within 15-minute walkshed:\", round(mean(opa_export$hospitals_15min_walk, na.rm = TRUE), 2), \"\\n\")\n\n  Average number of hospitals within 15-minute walkshed: 0.74 \n\ncat(\"  Number of fields:\", ncol(opa_export), \"columns (including coordinate columns)\\n\")\n\n  Number of fields: 21 columns (including coordinate columns)\n\ncat(\"  Includes all features: real estate info + crime + park + transit + hospital\\n\")\n\n  Includes all features: real estate info + crime + park + transit + hospital\n\ncat(\"  Data saved to: ./data/opa_sales_with_hospitals.csv\\n\")\n\n  Data saved to: ./data/opa_sales_with_hospitals.csv\n\n\n\n# =========================================================\n# Step 9: Enrich with ACS (Census) Socioeconomic Indicators\n# =========================================================\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tidycensus)\nlibrary(readr)\nlibrary(here)\n\n# ---------------------------------------------------------\n# Read the final property data (includes all accessibility metrics)\n# ---------------------------------------------------------\nopa_final &lt;- read_csv(here(\"Midterm/data/opa_sales_with_hospitals.csv\"))\n\n# Convert to sf object (ensure CRS is EPSG:2272)\nopa_sf &lt;- opa_final %&gt;%\n  st_as_sf(coords = c(\"x_coord\", \"y_coord\"), crs = 2272, remove = FALSE)\n\ncat(\"Number of property records read:\", nrow(opa_sf), \"\\n\")\n\nNumber of property records read: 24123 \n\n# ---------------------------------------------------------\n# Download ACS data for Philadelphia (year can be changed)\n# ---------------------------------------------------------\nyear_acs &lt;- 2022\ncensus_api_key(\"86993dedbe98d77b9d79db6b8ba21a7fde55cb91\", install = FALSE)\n\nacs_vars &lt;- c(\n  total_pop      = \"B01003_001\",\n  median_income  = \"B19013_001\",\n  per_cap_income = \"B19301_001\",\n  below_pov      = \"B17001_002\",\n  edu_total25    = \"B15003_001\",\n  edu_bach       = \"B15003_022\",\n  edu_mast       = \"B15003_023\",\n  edu_prof       = \"B15003_024\",\n  edu_phd        = \"B15003_025\"\n)\n\nphl_acs &lt;- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  county = \"Philadelphia\",\n  year = year_acs,\n  geometry = TRUE,\n  output = \"wide\",\n  variables = acs_vars\n) %&gt;%\n  mutate(\n    PCBACHMORE = 100 * ((edu_bachE + edu_mastE + edu_profE + edu_phdE) / edu_total25E),\n    PCTPOVERTY = 100 * (below_povE / total_popE)\n  ) %&gt;%\n  select(geometry, GEOID, total_popE, median_incomeE, per_cap_incomeE, PCBACHMORE, PCTPOVERTY)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |=======                                                               |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |============================                                          |  41%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |===============================================================       |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |======================================================================|  99%\n  |                                                                            \n  |======================================================================| 100%\n\n# ---------------------------------------------------------\n# Reproject to align (EPSG:2272)\n# ---------------------------------------------------------\nphl_acs &lt;- st_transform(phl_acs, 2272)\n\n# ---------------------------------------------------------\n# Spatial join: assign each home to the tract it falls within\n# ---------------------------------------------------------\nopa_joined &lt;- st_join(\n  opa_sf,\n  phl_acs,\n  join = st_within,\n  left = TRUE\n)\n\n# ---------------------------------------------------------\n# For out-of-bound samples (occasional NAs), fill with nearest tract\n# ---------------------------------------------------------\nmissing &lt;- is.na(opa_joined$median_incomeE)\nif (any(missing)) {\n  idx &lt;- st_nearest_feature(opa_joined[missing, ], phl_acs)\n  repl &lt;- phl_acs[idx, ] %&gt;% st_drop_geometry()\n  cols &lt;- names(repl)\n  opa_joined[missing, cols] &lt;- repl\n}\n\n# ---------------------------------------------------------\n# Export results\n# ---------------------------------------------------------\nopa_export &lt;- opa_joined %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract,\n    x_coord, y_coord,\n    crime_count_15min_walk,                  # crime\n    dist_to_park_ft, park_within_15min_walk, # parks\n    dist_transit_ft, transit_15min_walk,     # transit\n    dist_to_hospital_ft, hospitals_15min_walk, # hospitals\n    total_popE, median_incomeE, per_cap_incomeE, PCBACHMORE, PCTPOVERTY  # ACS\n  )\n\n# Save the complete dataset with Census indicators\nwrite_csv(opa_export, here(\"opa_sales_final_complete.csv\"))\n\ncat(\"  ACS socioeconomic indicators added\\n\")\n\n  ACS socioeconomic indicators added\n\ncat(\"  Mean household income (USD):\", round(mean(opa_export$median_incomeE, na.rm = TRUE), 0), \"\\n\")\n\n  Mean household income (USD): 66446 \n\ncat(\"  Mean poverty rate (%):\", round(mean(opa_export$PCTPOVERTY, na.rm = TRUE), 2), \"\\n\")\n\n  Mean poverty rate (%): 20.85 \n\ncat(\"  Mean share with bachelor's degree or higher (%):\", round(mean(opa_export$PCBACHMORE, na.rm = TRUE), 2), \"\\n\")\n\n  Mean share with bachelor's degree or higher (%): 34.62 \n\ncat(\"  Includes all features: price + crime + parks + transit + hospitals + socioeconomic\\n\")\n\n  Includes all features: price + crime + parks + transit + hospitals + socioeconomic\n\ncat(\"  Data saved to: opa_sales_final_complete.csv\\n\")\n\n  Data saved to: opa_sales_final_complete.csv\n\n\n\n# =========================================================\n# Step 10: Add Education Accessibility Indicators (Schools)\n# =========================================================\nlibrary(sf)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(here)\nlibrary(units)\n\n# ---------------------------------------------------------\n# 1.Read the complete dataset saved from the previous step (including Census and accessibility features)\n# ---------------------------------------------------------\nopa_data &lt;- read_csv(here(\"Midterm/opa_sales_final_complete.csv\"))\nopa_sf &lt;- opa_data %&gt;%\n  st_as_sf(coords = c(\"x_coord\", \"y_coord\"), crs = 2272, remove = FALSE)\n\ncat(\"Number of property records read:\", nrow(opa_sf), \"\\n\")\n\nNumber of property records read: 24023 \n\ncat(\"Data column names:\", paste(names(opa_sf), collapse = \", \"), \"\\n\")\n\nData column names: parcel_number, sale_date, sale_price, number_of_bedrooms, number_of_bathrooms, total_livable_area, year_built, zip_code, category_code, exterior_condition, interior_condition, census_tract, x_coord, y_coord, crime_count_15min_walk, dist_to_park_ft, park_within_15min_walk, dist_transit_ft, transit_15min_walk, dist_to_hospital_ft, hospitals_15min_walk, total_popE, median_incomeE, per_cap_incomeE, PCBACHMORE, PCTPOVERTY, dist_to_nearest_school_ft, schools_within_15min_walk, geometry \n\n# ---------------------------------------------------------\n# 2.Read the school data (only one file)）\n# ---------------------------------------------------------\nschools &lt;- st_read(here(\"Midterm/data/Schools_Parcels.geojson\"), quiet = TRUE) %&gt;%\n  st_transform(2272) %&gt;%\n  filter(!st_is_empty(geometry))  \n\ncat(\"School data loaded:\", nrow(schools), \"records\\n\")\n\nSchool data loaded: 495 records\n\ncat(\"School data coordinate system:\", st_crs(schools)$input, \"\\n\")\n\nSchool data coordinate system: EPSG:2272 \n\ncat(\"Property data coordinate system:\", st_crs(opa_sf)$input, \"\\n\")\n\nProperty data coordinate system: EPSG:2272 \n\n# ---------------------------------------------------------\n# 3.Calculate education accessibility indicators\n# ---------------------------------------------------------\n# Distance to the nearest school (in feet)\ncat(\"Starting to calculate the nearest school distance...\\n\")\n\nStarting to calculate the nearest school distance...\n\ndist_matrix &lt;- st_distance(opa_sf, schools)\ncat(\"Distance matrix dimensions:\", dim(dist_matrix), \"\\n\")\n\nDistance matrix dimensions: 24023 495 \n\nopa_sf$dist_to_nearest_school_ft &lt;- as.numeric(apply(dist_matrix, 1, min))\ncat(\"Nearest school distance calculation completed, range:\",\n    min(opa_sf$dist_to_nearest_school_ft), \"-\", \n    max(opa_sf$dist_to_nearest_school_ft), \"feet\\n\")\n\nNearest school distance calculation completed, range: 0 - 5286.279 feet\n\n# Number of schools within a 15-minute walking distance\ncat(\"Starting to calculate the number of schools within a 15-minute walking distance...\\n\")\n\nStarting to calculate the number of schools within a 15-minute walking distance...\n\nbuffer_3960ft &lt;- st_buffer(opa_sf, dist = 3960)  # 0.75 mile = 3960 feet\nopa_sf$schools_within_15min_walk &lt;- lengths(st_intersects(buffer_3960ft, schools))\ncat(\"Calculation of schools within a 15-minute walking distance completed, range:\",\n    min(opa_sf$schools_within_15min_walk), \"-\", \n    max(opa_sf$schools_within_15min_walk), \"\\n\")\n\nCalculation of schools within a 15-minute walking distance completed, range: 0 - 28 \n\n# ---------------------------------------------------------\n# 4.Extract coordinates and retain all columns\n# ---------------------------------------------------------\ncoords &lt;- st_coordinates(opa_sf)\nopa_sf &lt;- opa_sf %&gt;%\n  mutate(\n    x_coord = coords[, 1],\n    y_coord = coords[, 2]\n  )\n\n# ---------------------------------------------------------\n# 5.Export the complete table with education accessibility indicators\n# ---------------------------------------------------------\nopa_export &lt;- opa_sf %&gt;%\n  st_drop_geometry() %&gt;%\n  select(\n    parcel_number, sale_date, sale_price,\n    number_of_bedrooms, number_of_bathrooms,\n    total_livable_area, year_built,\n    zip_code, category_code,\n    exterior_condition, interior_condition,\n    census_tract,\n    x_coord, y_coord,\n    crime_count_15min_walk,                  \n    dist_to_park_ft, park_within_15min_walk, \n    dist_transit_ft, transit_15min_walk,     \n    dist_to_hospital_ft, hospitals_15min_walk, \n    total_popE, median_incomeE, per_cap_incomeE, PCBACHMORE, PCTPOVERTY,  # Census\n    dist_to_nearest_school_ft, schools_within_15min_walk                  \n  )\n\n# ---------------------------------------------------------\n# 6.Clean the data: remove all rows containing empty or NA values\n# ---------------------------------------------------------\nrows_before &lt;- nrow(opa_export)\n\nopa_export &lt;- opa_export %&gt;%\n  mutate(across(everything(), ~ {\n    if (is.character(.x)) {\n      clean_val &lt;- trimws(tolower(as.character(.x)))\n      ifelse(clean_val == \"\" | clean_val == \"na\" | clean_val == \"n/a\" | clean_val == \"null\", \n             NA, .x)\n    } else {\n      .x\n    }\n  })) %&gt;%\n  drop_na()\n\nrows_after &lt;- nrow(opa_export)\nrows_removed &lt;- rows_before - rows_after\n\nwrite_csv(opa_export, here(\"opa_sales_final_complete.csv\"))\n\ncat(\"  Education accessibility indicators have been added\\n\")\n\n  Education accessibility indicators have been added\n\ncat(\"  Average distance to the nearest school:\", \n    round(mean(opa_export$dist_to_nearest_school_ft, na.rm = TRUE), 1), \"ft\\n\")\n\n  Average distance to the nearest school: 949.6 ft\n\ncat(\"  Average number of schools within a 15-minute walking distance:\", \n    round(mean(opa_export$schools_within_15min_walk, na.rm = TRUE), 2), \"\\n\")\n\n  Average number of schools within a 15-minute walking distance: 10.56 \n\ncat(\"  Data cleaning completed: removed\", rows_removed, \"rows containing empty or NA values\\n\")\n\n  Data cleaning completed: removed 0 rows containing empty or NA values\n\ncat(\"  Before cleaning:\", rows_before, \"rows → After cleaning:\", rows_after, \"rows\\n\")\n\n  Before cleaning: 24023 rows → After cleaning: 24023 rows\n\ncat(\"  Final complete dataset saved to: opa_sales_final_complete.csv\\n\")\n\n  Final complete dataset saved to: opa_sales_final_complete.csv\n\ncat(\"  Includes all features: housing price + crime + parks + transit + hospitals + Census + schools\\n\")\n\n  Includes all features: housing price + crime + parks + transit + hospitals + Census + schools\n\ncat(\"  Number of columns:\", ncol(opa_export), \"(including coordinate columns)\\n\")\n\n  Number of columns: 28 (including coordinate columns)\n\n\nStep1\n\n# =========================================================\n# Step 1: Skewness Detection + Log Transformation + Descriptive Statistics\n# =========================================================\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(e1071)\nlibrary(patchwork)\nlibrary(readr)\nlibrary(tidyr)\n\nset.seed(2025)\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"📊 Step 1: Data Cleaning, Transformation, and Descriptive Statistics\\n\")\n\n📊 Step 1: Data Cleaning, Transformation, and Descriptive Statistics\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\n# === Read Data ===\ndf &lt;- read_csv(\"opa_sales_final_complete.csv\", show_col_types = FALSE)\ncat(sprintf(\"Original sample size: %d\\n\", nrow(df)))\n\nOriginal sample size: 24023\n\ncat(sprintf(\"Number of variables: %d\\n\\n\", ncol(df)))\n\nNumber of variables: 28\n\n# === Basic Processing ===\nif (\"year_built\" %in% names(df)) {\n  df &lt;- df %&gt;%\n    mutate(age = 2025 - year_built,\n           age2 = age^2) %&gt;%\n    dplyr::select(-year_built)\n}\n\ncat_vars &lt;- c(\"interior_condition\", \"exterior_condition\", \"zip_code\", \"census_tract\")\ncoord_vars &lt;- c(\"x_coord\", \"y_coord\")\ndf[cat_vars] &lt;- lapply(df[cat_vars], factor)\n\n# === Skewness Detection ===\ncat(\"=== Skewness Detection ===\\n\")\n\n=== Skewness Detection ===\n\nnum_vars &lt;- df %&gt;% dplyr::select(where(is.numeric))\nskews &lt;- sapply(num_vars, function(x) {\n  if (all(is.na(x)) || sd(x, na.rm = TRUE) == 0) return(0)\n  skewness(x, na.rm = TRUE)\n})\nlogged_vars &lt;- names(skews[abs(skews) &gt; 1])\ncat(sprintf(\"Variables with |skew| &gt; 1: %d\\n\", length(logged_vars)))\n\nVariables with |skew| &gt; 1: 10\n\n# === Apply log1p Transformation ===\ndf_trans &lt;- df\nfor (v in logged_vars) {\n  df_trans[[v]] &lt;- log1p(pmax(df[[v]], 0))\n}\n\n\n# =========================================================\n# 1. Descriptive Statistics Table\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Generating Descriptive Statistics Table ===\\n\\n\")\n\n=== Generating Descriptive Statistics Table ===\n\n# Identify target variable\ny_var &lt;- case_when(\n  \"sale_price_log\" %in% names(df_trans) ~ \"sale_price_log\",\n  \"log_sale_price\" %in% names(df_trans) ~ \"log_sale_price\",\n  \"sale_price\" %in% names(df_trans) ~ \"sale_price\",\n  TRUE ~ NA_character_\n)\n\n# Select key numeric variables\nkey_vars &lt;- c(\n  y_var,\n  \"total_livable_area\", \"number_of_bedrooms\", \"number_of_bathrooms\", \"age\",\n  \"median_incomeE\", \"per_cap_incomeE\", \"PCTPOVERTY\", \"PCBACHMORE\"\n)\nkey_vars &lt;- intersect(key_vars, names(df_trans))\n\nif (length(key_vars) &gt; 0) {\n  # Compute descriptive statistics (more meaningful on pre-transformation data)\n  desc_stats &lt;- df %&gt;%\n    dplyr::select(all_of(key_vars)) %&gt;%\n    summarise(across(everything(), list(\n      N = ~sum(!is.na(.)),\n      Mean = ~mean(., na.rm = TRUE),\n      SD = ~sd(., na.rm = TRUE),\n      Min = ~min(., na.rm = TRUE),\n      Q25 = ~quantile(., 0.25, na.rm = TRUE),\n      Median = ~median(., na.rm = TRUE),\n      Q75 = ~quantile(., 0.75, na.rm = TRUE),\n      Max = ~max(., na.rm = TRUE)\n    ), .names = \"{.col}_{.fn}\")) %&gt;%\n    pivot_longer(everything(), names_to = \"stat\", values_to = \"value\") %&gt;%\n    separate(stat, into = c(\"Variable\", \"Statistic\"), sep = \"_(?=[^_]+$)\") %&gt;%\n    pivot_wider(names_from = Statistic, values_from = value) %&gt;%\n    dplyr::select(Variable, N, Mean, SD, Min, Q25, Median, Q75, Max) %&gt;%\n    mutate(across(c(Mean, SD, Min, Q25, Median, Q75, Max), ~round(., 3)))\n  \n  if (!dir.exists(\"file\")) dir.create(\"file\")\n  write_csv(desc_stats, \"file/descriptive_statistics.csv\")\n  cat(\"  ✓ file/descriptive_statistics.csv\\n\")\n  print(as.data.frame(desc_stats), row.names = FALSE)\n}\n\n  ✓ file/descriptive_statistics.csv\n            Variable     N       Mean         SD       Min        Q25\n          sale_price 24023 340590.503 466810.992 10000.000 151970.000\n  total_livable_area 24023   1359.120    576.839   308.000   1050.000\n  number_of_bedrooms 24023      2.972      0.789     1.000      3.000\n number_of_bathrooms 24023      1.444      0.686     1.000      1.000\n                 age 24023     85.799     32.549     0.000     72.000\n      median_incomeE 24023  66445.992  31346.114 14983.000  41325.000\n     per_cap_incomeE 24023  39700.301  25344.230  7802.000  21372.000\n          PCTPOVERTY 24023     20.826     13.396     0.719     10.596\n          PCBACHMORE 24023     34.706     24.837     0.530     15.362\n     Median        Q75          Max\n 248000.000 370000.000 15428633.000\n   1208.000   1492.000    14150.000\n      3.000      3.000       12.000\n      1.000      2.000       12.000\n    100.000    105.000      275.000\n  59837.000  86989.000   181066.000\n  31406.000  48558.000   173777.000\n     17.939     29.449       77.833\n     27.435     53.441       95.598\n\n\n\n# =========================================================\n# 2. Distribution Plots\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Generating distribution comparison plots ===\\n\\n\")\n\n=== Generating distribution comparison plots ===\n\nplot_list &lt;- lapply(names(num_vars), function(v) {\n  is_transformed &lt;- v %in% logged_vars\n  \n  # Original distribution\n  p1 &lt;- ggplot(df, aes(x = !!sym(v))) +\n    geom_histogram(bins = 30, fill = \"#053061\", color = \"white\", alpha = 0.85) +\n    labs(title = paste0(v, \" (Original)\"), x = NULL, y = \"Count\") +\n    theme_minimal(base_size = 9) +\n    theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 9),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_line(color = \"#E5E5E5\", linewidth = 0.3),\n      axis.text = element_text(size = 7),\n      plot.background = element_rect(fill = \"white\", color = NA),\n      panel.background = element_rect(fill = \"white\", color = NA)\n    )\n  \n  # Transformed distribution\n  fill_color &lt;- if (is_transformed) \"#67001F\" else \"#4393C3\"\n  \n  p2 &lt;- ggplot(df_trans, aes(x = !!sym(v))) +\n    geom_histogram(bins = 30, fill = fill_color, color = \"white\", alpha = 0.85) +\n    labs(\n      title = paste0(v, if (is_transformed) \" (Log-transformed)\" else \" (No transformation)\"),\n      x = NULL, y = \"Count\"\n    ) +\n    theme_minimal(base_size = 9) +\n    theme(\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 9),\n      panel.grid.minor = element_blank(),\n      panel.grid.major = element_line(color = \"#E5E5E5\", linewidth = 0.3),\n      axis.text = element_text(size = 7),\n      plot.background = element_rect(fill = \"white\", color = NA),\n      panel.background = element_rect(fill = \"white\", color = NA)\n    )\n  \n  # Add skewness annotation\n  skew_val &lt;- round(skews[v], 2)\n  p1 &lt;- p1 + annotate(\"text\", x = Inf, y = Inf, \n                      label = paste0(\"Skewness: \", skew_val),\n                      hjust = 1.1, vjust = 1.5, size = 2.5, color = \"gray30\")\n  \n  pair_plot &lt;- (p1 | p2) + plot_layout(widths = c(1, 1)) &\n    theme(plot.margin = margin(3, 3, 3, 3))\n  \n  wrap_elements(pair_plot) + \n    theme(\n      plot.background = element_rect(fill = \"white\", color = \"#B0B0B0\", linewidth = 1.2),\n      plot.margin = margin(6, 6, 6, 6)\n    )\n})\n\nall_plot &lt;- wrap_plots(plot_list, ncol = 2) + \n  plot_annotation(\n    title = \"Variable Distributions: Original vs. Transformed\",\n    subtitle = paste0(\n      \"Dark Blue = Original | Dark Red = Log-transformed (|skew| &gt; 1) | Medium Blue = No transformation\"\n    ),\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 12, hjust = 0.5, color = \"gray30\"),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    )\n  )\n\n\n# Skewness Summary Plot\nskew_df &lt;- data.frame(\n  variable = names(skews),\n  skewness = skews,\n  transformed = names(skews) %in% logged_vars\n) %&gt;% arrange(desc(abs(skewness)))\n\np_skew &lt;- ggplot(skew_df, aes(x = reorder(variable, abs(skewness)), y = skewness, fill = transformed)) +\n  geom_col(alpha = 0.85) +\n  geom_hline(yintercept = c(-1, 1), linetype = \"dashed\", color = \"#67001F\", linewidth = 0.7) +\n  geom_hline(yintercept = 0, linetype = \"solid\", color = \"gray50\", linewidth = 0.5) +\n  scale_fill_manual(\n    values = c(\"FALSE\" = \"#053061\", \"TRUE\" = \"#67001F\"),\n    labels = c(\"FALSE\" = \"No transformation\", \"TRUE\" = \"Log-transformed\"),\n    name = NULL\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Skewness of All Variables\",\n    subtitle = \"Variables with |skewness| &gt; 1 are log-transformed\",\n    x = \"Variable\", y = \"Skewness\",\n    caption = \"Dashed lines indicate skewness thresholds at ±1\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    plot.subtitle = element_text(hjust = 0.5, size = 11, color = \"gray40\"),\n    panel.grid.major.y = element_blank(),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  )\n\n\n# =========================================================\n# 3. Categorical Variable Distribution Plots\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Generating categorical variable distribution plots ===\\n\\n\")\n\n=== Generating categorical variable distribution plots ===\n\ncat_vars_viz &lt;- c(\"interior_condition\", \"exterior_condition\")\ncat_vars_viz &lt;- intersect(cat_vars_viz, names(df_trans))\n\nif (length(cat_vars_viz) &gt; 0 && !is.na(y_var)) {\n  plot_list_cat &lt;- list()\n  \n  for (var in cat_vars_viz) {\n    cat_summary &lt;- df_trans %&gt;%\n      group_by(!!sym(var)) %&gt;%\n      summarise(\n        count = n(),\n        mean_price = mean(.data[[y_var]], na.rm = TRUE),\n        .groups = \"drop\"\n      ) %&gt;%\n      filter(!is.na(!!sym(var))) %&gt;%\n      arrange(desc(mean_price))\n    \n    if (nrow(cat_summary) &gt; 0) {\n      p &lt;- ggplot(cat_summary, aes(reorder(!!sym(var), mean_price), mean_price, fill = mean_price)) +\n        geom_col(alpha = 0.9) +\n        geom_text(aes(label = count), vjust = -0.5, size = 3) +\n        scale_fill_gradient2(\n          low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n          midpoint = median(cat_summary$mean_price, na.rm = TRUE),\n          guide = \"none\"\n        ) +\n        coord_flip() +\n        theme_minimal(base_size = 10) +\n        theme(\n          panel.grid.major.y = element_blank(),\n          plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12),\n          plot.background = element_rect(fill = \"white\", color = NA),\n          panel.background = element_rect(fill = \"white\", color = NA)\n        ) +\n        labs(\n          title = gsub(\"_\", \" \", toupper(var)),\n          x = NULL,\n          y = \"Average Sale Price (log)\",\n          caption = \"Numbers indicate the count in each category\"\n        )\n      \n      plot_list_cat[[var]] &lt;- p\n    }\n  }\n  \n  if (length(plot_list_cat) &gt; 0) {\n    p_cat_combined &lt;- wrap_plots(plot_list_cat, ncol = 2) +\n      plot_annotation(\n        title = \"Average Sale Price by Property Condition\",\n        subtitle = \"Log-transformed sale prices\",\n        theme = theme(\n          plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n          plot.subtitle = element_text(size = 11, hjust = 0.5),\n          plot.background = element_rect(fill = \"white\", color = NA)\n        )\n      )\n    \n    if (!dir.exists(\"plot\")) dir.create(\"plot\")\n    ggsave(\"plot/categorical_price_comparison.png\", p_cat_combined,\n           width = 12, height = 6, dpi = 300, bg = \"white\")\n    cat(\"  ✓ plot/categorical_price_comparison.png\\n\")\n  }\n}\n\n  ✓ plot/categorical_price_comparison.png\n\n\n\n# =========================================================\n# Output Files\n# =========================================================\n\nif (!dir.exists(\"plot\")) dir.create(\"plot\")\nif (!dir.exists(\"file\")) dir.create(\"file\")\n\nggsave(\"plot/all_variables_distribution.png\", plot = all_plot, width = 20, height = 12, dpi = 300, bg = \"white\")\nggsave(\"plot/skewness_summary.png\", plot = p_skew, width = 10, height = 8, dpi = 300, bg = \"white\")\nwriteLines(logged_vars, \"file/logged_variables.txt\")\nwrite_csv(df_trans, \"file/opa_sales_step1_clean.csv\")\n\ntransform_summary &lt;- data.frame(\n  Variable = names(skews),\n  Original_Skewness = round(skews, 3),\n  Transformed = names(skews) %in% logged_vars\n) %&gt;% arrange(desc(abs(Original_Skewness)))\n\nwrite_csv(transform_summary, \"file/transformation_summary.csv\")\n\n# =========================================================\n# Summary\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\" Step 1 Completed\\n\")\n\n Step 1 Completed\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\" Output Files:\\n\\n\")\n\n Output Files:\n\ncat(\"Tables:\\n\")\n\nTables:\n\ncat(\"  • file/descriptive_statistics.csv - Descriptive statistics\\n\")\n\n  • file/descriptive_statistics.csv - Descriptive statistics\n\ncat(\"  • file/transformation_summary.csv - Transformation summary\\n\")\n\n  • file/transformation_summary.csv - Transformation summary\n\ncat(\"  • file/logged_variables.txt - List of log-transformed variables\\n\")\n\n  • file/logged_variables.txt - List of log-transformed variables\n\ncat(\"  • file/opa_sales_step1_clean.csv - Cleaned dataset\\n\\n\")\n\n  • file/opa_sales_step1_clean.csv - Cleaned dataset\n\ncat(\"Figures:\\n\")\n\nFigures:\n\ncat(\"  • plot/all_variables_distribution.png - All variables: original vs. transformed\\n\")\n\n  • plot/all_variables_distribution.png - All variables: original vs. transformed\n\ncat(\"  • plot/skewness_summary.png - Skewness summary\\n\")\n\n  • plot/skewness_summary.png - Skewness summary\n\ncat(\"  • plot/categorical_price_comparison.png - Categorical variables vs. sale price\\n\\n\")\n\n  • plot/categorical_price_comparison.png - Categorical variables vs. sale price\n\ncat(\"📈 Stats:\\n\")\n\n📈 Stats:\n\ncat(sprintf(\"  • Variables with |skew| &gt; 1: %d\\n\", length(logged_vars)))\n\n  • Variables with |skew| &gt; 1: 10\n\ncat(sprintf(\"  • Final number of variables: %d\\n\", ncol(df_trans)))\n\n  • Final number of variables: 29\n\ncat(sprintf(\"  • Final sample size: %d\\n\\n\", nrow(df_trans)))\n\n  • Final sample size: 24023\n\n\nStep2\n\n# =========================================================\n# Step 2 Enhanced: Correlation Matrix + VIF + Spatial Visualization + Scatterplots\n# =========================================================\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(car)\nlibrary(reshape2)\nlibrary(readr)\nlibrary(patchwork)\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"  Step 2: Correlation Analysis, Multicollinearity, and Spatial Exploration\\n\")\n\n  Step 2: Correlation Analysis, Multicollinearity, and Spatial Exploration\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\n# === Read Data ===\ndf &lt;- read_csv(\"file/opa_sales_step1_clean.csv\", show_col_types = FALSE)\n\ncat(sprintf(\"Sample size: %d\\n\", nrow(df)))\n\nSample size: 24023\n\ncat(sprintf(\"Number of variables: %d\\n\\n\", ncol(df)))\n\nNumber of variables: 29\n\n# === Auto-detect target variable ===\ny_var &lt;- case_when(\n  \"sale_price_log\" %in% names(df) ~ \"sale_price_log\",\n  \"log_sale_price\" %in% names(df) ~ \"log_sale_price\",\n  \"sale_price\" %in% names(df) ~ \"sale_price\",\n  TRUE ~ NA_character_\n)\nif (is.na(y_var)) stop(\" Target variable not found\")\n\ncat_vars &lt;- intersect(c(\"interior_condition\", \"exterior_condition\", \"zip_code\", \"census_tract\"), names(df))\ncoord_vars &lt;- intersect(c(\"x_coord\", \"y_coord\"), names(df))\ndf[cat_vars] &lt;- lapply(df[cat_vars], factor)\n\n\n# =========================================================\n# 1. Correlation Matrix\n# =========================================================\n\ncat(\"=== Generating correlation matrix ===\\n\")\n\n=== Generating correlation matrix ===\n\nnum_df &lt;- df %&gt;% dplyr::select(where(is.numeric))\nnum_df &lt;- num_df[, sapply(num_df, function(x) sd(x, na.rm = TRUE) &gt; 0), drop = FALSE]\n\nif (ncol(num_df) &gt; 1) {\n  corr_mat &lt;- cor(num_df, use = \"pairwise.complete.obs\")\n  corr_mat[upper.tri(corr_mat)] &lt;- NA\n  corr_melt &lt;- melt(corr_mat, na.rm = TRUE)\n  \n  # If there are too many variables, keep only the first 50\n  if (ncol(num_df) &gt; 50) {\n    vars_top &lt;- names(num_df)[1:50]\n    corr_melt &lt;- corr_melt %&gt;% filter(Var1 %in% vars_top & Var2 %in% vars_top)\n  }\n  \n  p_corr &lt;- ggplot(corr_melt, aes(Var2, Var1, fill = value, size = abs(value))) +\n    geom_point(shape = 21, color = \"white\", stroke = 0.5) +\n    scale_fill_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = 0, limits = c(-1, 1), name = NULL,\n      breaks = seq(-1, 1, 0.2)\n    ) +\n    scale_size_continuous(range = c(0.5, 10), guide = \"none\") +\n    scale_x_discrete(position = \"top\") +\n    scale_y_discrete(limits = rev) +\n    theme_minimal(base_size = 11) +\n    theme(\n      axis.text.x.top = element_text(angle = 45, hjust = 0, vjust = 0, size = 9, color = \"black\"),\n      axis.text.y = element_text(size = 9, color = \"black\"),\n      axis.title = element_blank(),\n      panel.grid.major = element_line(color = \"#E0E0E0\", linewidth = 0.5),\n      panel.grid.minor = element_blank(),\n      panel.background = element_rect(fill = \"white\", color = NA),\n      plot.background = element_rect(fill = \"white\", color = NA),\n      legend.position = \"bottom\",\n      legend.direction = \"horizontal\",\n      legend.key.width = unit(3, \"cm\"),\n      legend.key.height = unit(0.4, \"cm\"),\n      plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n      plot.margin = margin(10, 10, 10, 10)\n    ) +\n    labs(title = \"Correlation Matrix\") +\n    coord_fixed()\n  \n  if (!dir.exists(\"plot\")) dir.create(\"plot\", recursive = TRUE)\n  ggsave(\"plot/corr_matrix_enhanced.png\", p_corr, width = 12, height = 10, dpi = 300, bg = \"white\")\n  cat(\"   plot/corr_matrix_enhanced.png\\n\")\n}\n\n   plot/corr_matrix_enhanced.png\n\n\n\n# =========================================================\n# 2. VIF Analysis\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== VIF Analysis ===\\n\\n\")\n\n=== VIF Analysis ===\n\nvif_vars &lt;- setdiff(names(df), c(y_var, cat_vars, coord_vars))\nnum_vif &lt;- df %&gt;% dplyr::select(all_of(vif_vars)) %&gt;% dplyr::select(where(is.numeric))\nnum_vif &lt;- num_vif[, sapply(num_vif, function(x) sd(x, na.rm = TRUE) &gt; 0), drop = FALSE]\n\nif (ncol(num_vif) &gt;= 2) {\n  df_vif &lt;- df %&gt;% dplyr::select(all_of(c(y_var, names(num_vif)))) %&gt;% na.omit()\n  f_vif &lt;- as.formula(paste(y_var, \"~ .\"))\n  vif_model &lt;- lm(f_vif, data = df_vif)\n  vif_vals &lt;- car::vif(vif_model)\n  vif_tbl &lt;- data.frame(variable = names(vif_vals), VIF = round(vif_vals, 3))\n  vif_tbl &lt;- vif_tbl %&gt;% arrange(desc(VIF))\n  \n  if (!dir.exists(\"file\")) dir.create(\"file\", recursive = TRUE)\n  write_csv(vif_tbl, \"file/vif_values.csv\")\n  cat(\"  ✓ file/vif_values.csv\\n\")\n  \n  # High VIF warning\n  high_vif &lt;- vif_tbl %&gt;% filter(VIF &gt; 10)\n  if (nrow(high_vif) &gt; 0) {\n    cat(\"\\n  Variables with high multicollinearity (VIF &gt; 10):\\n\")\n    print(as.data.frame(high_vif), row.names = FALSE)\n  }\n  \n  # VIF visualization\n  vif_top20 &lt;- vif_tbl %&gt;% top_n(20, VIF)\n  \n  p_vif &lt;- ggplot(vif_top20, aes(x = reorder(variable, VIF), y = VIF, fill = VIF)) +\n    geom_col(alpha = 0.9) +\n    scale_fill_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = 5, name = \"VIF Value\"\n    ) +\n    geom_hline(yintercept = 10, linetype = \"dashed\", color = \"#67001F\", linewidth = 1) +\n    geom_hline(yintercept = 5, linetype = \"dashed\", color = \"gray50\", linewidth = 0.7) +\n    coord_flip() +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.major.y = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      plot.subtitle = element_text(hjust = 0.5, size = 11, color = \"gray40\"),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA),\n      panel.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(\n      title = \"Variance Inflation Factor (VIF) - Top 20\",\n      subtitle = \"Color gradient: Blue (low VIF) → Red (high VIF)\",\n      x = \"Variable\", y = \"VIF Value\",\n      caption = \"Dark red line: VIF=10 (High multicollinearity) | Gray line: VIF=5 (Moderate)\"\n    )\n  \n  ggsave(\"plot/vif_analysis.png\", p_vif, width = 10, height = 8, dpi = 300, bg = \"white\")\n  cat(\"   plot/vif_analysis.png\\n\")\n}\n\n  ✓ file/vif_values.csv\n\n  Variables with high multicollinearity (VIF &gt; 10):\n        variable    VIF\n per_cap_incomeE 10.608\n\n\n   plot/vif_analysis.png\n\n\n\n# =========================================================\n# 3. Spatial Visualization\n# =========================================================\n\nif (all(c(\"x_coord\", \"y_coord\") %in% names(df))) {\n  cat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n  cat(\"=== Spatial Distribution Visualization ===\\n\\n\")\n  \n  # 3.1 Spatial distribution of sale prices\n  p_spatial_price &lt;- ggplot(df, aes(x_coord, y_coord, color = .data[[y_var]])) +\n    geom_point(alpha = 0.6, size = 0.8) +\n    scale_color_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = median(df[[y_var]], na.rm = TRUE),\n      name = \"Sale Price\\n(log)\"\n    ) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      plot.subtitle = element_text(hjust = 0.5, size = 11),\n      plot.background = element_rect(fill = \"white\", color = NA),\n      legend.position = \"right\"\n    ) +\n    labs(\n      title = \"Spatial Distribution of Sale Prices\",\n      subtitle = \"Philadelphia housing market\",\n      x = \"X Coordinate\", y = \"Y Coordinate\"\n    )\n  \n  ggsave(\"plot/spatial_price_distribution.png\", p_spatial_price,\n         width = 10, height = 8, dpi = 300, bg = \"white\")\n  cat(\"   plot/spatial_price_distribution.png\\n\")\n  \n  # 3.2 Hexbin density map\n  p_hex &lt;- ggplot(df, aes(x_coord, y_coord)) +\n    geom_hex(aes(fill = after_stat(count)), bins = 40) +\n    scale_fill_gradient(\n      low = \"#F7F7F7\", high = \"#67001F\",\n      name = \"Count\"\n    ) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      plot.subtitle = element_text(hjust = 0.5, size = 11),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(\n      title = \"Housing Density Heatmap\",\n      subtitle = \"Hexagonal binning of property locations\",\n      x = \"X Coordinate\", y = \"Y Coordinate\"\n    )\n  \n  ggsave(\"plot/spatial_density_hexbin.png\", p_hex,\n         width = 10, height = 8, dpi = 300, bg = \"white\")\n  cat(\"   plot/spatial_density_hexbin.png\\n\")\n}\n\n\n================================================================================\n=== Spatial Distribution Visualization ===\n\n\n   plot/spatial_price_distribution.png\n\n\n   plot/spatial_density_hexbin.png\n\n\n\n# =========================================================\n# 4. Key Variable Scatterplots\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Scatterplots: Key Variables vs. Sale Price ===\\n\\n\")\n\n=== Scatterplots: Key Variables vs. Sale Price ===\n\nkey_numeric &lt;- c(\"total_livable_area\", \"median_incomeE\", \"age\", \"number_of_bathrooms\")\nkey_numeric &lt;- intersect(key_numeric, names(df))\n\nif (length(key_numeric) &gt;= 4) {\n  scatter_plots &lt;- list()\n  \n  for (var in key_numeric[1:4]) {\n    # Correlation coefficient\n    corr_val &lt;- cor(df[[var]], df[[y_var]], use = \"pairwise.complete.obs\")\n    \n    p &lt;- ggplot(df, aes(.data[[var]], .data[[y_var]])) +\n      geom_point(alpha = 0.3, size = 0.8, color = \"#053061\") +\n      geom_smooth(method = \"lm\", se = TRUE, color = \"#67001F\", linewidth = 1.2) +\n      annotate(\"text\", x = Inf, y = -Inf, \n               label = sprintf(\"r = %.3f\", corr_val),\n               hjust = 1.1, vjust = -0.5, size = 4, color = \"#67001F\", fontface = \"bold\") +\n      theme_minimal(base_size = 10) +\n      theme(\n        panel.grid.minor = element_blank(),\n        plot.title = element_text(hjust = 0.5, face = \"bold\", size = 11),\n        plot.background = element_rect(fill = \"white\", color = NA)\n      ) +\n      labs(\n        title = gsub(\"_\", \" \", var),\n        x = gsub(\"_\", \" \", var),\n        y = \"Sale Price (log)\"\n      )\n    \n    scatter_plots[[var]] &lt;- p\n  }\n  \n  p_scatter &lt;- wrap_plots(scatter_plots, ncol = 2) +\n    plot_annotation(\n      title = \"Key Variables vs. Sale Price\",\n      subtitle = \"Linear fit (OLS) with correlation coefficients\",\n      theme = theme(\n        plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 11, hjust = 0.5),\n        plot.background = element_rect(fill = \"white\", color = NA)\n      )\n    )\n  \n  ggsave(\"plot/key_variables_scatter.png\", p_scatter,\n         width = 12, height = 10, dpi = 300, bg = \"white\")\n  cat(\"   plot/key_variables_scatter.png\\n\")\n}\n\n   plot/key_variables_scatter.png\n\n\n\n# =========================================================\n# Save cleaned data\n# =========================================================\n\nwrite_csv(df, \"file/opa_sales_step2_clean.csv\")\n\n# =========================================================\n# Summary\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"  Step 2 Completed\\n\")\n\n  Step 2 Completed\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\"  Output files:\\n\\n\")\n\n  Output files:\n\ncat(\"Tables:\\n\")\n\nTables:\n\ncat(\"  • file/vif_values.csv - VIF analysis results\\n\")\n\n  • file/vif_values.csv - VIF analysis results\n\ncat(\"  • file/opa_sales_step2_clean.csv - Cleaned dataset\\n\\n\")\n\n  • file/opa_sales_step2_clean.csv - Cleaned dataset\n\ncat(\"Figures:\\n\")\n\nFigures:\n\ncat(\"  • plot/corr_matrix_enhanced.png - Correlation matrix\\n\")\n\n  • plot/corr_matrix_enhanced.png - Correlation matrix\n\ncat(\"  • plot/vif_analysis.png - VIF analysis\\n\")\n\n  • plot/vif_analysis.png - VIF analysis\n\nif (all(c(\"x_coord\", \"y_coord\") %in% names(df))) {\n  cat(\"  • plot/spatial_price_distribution.png - Spatial distribution of sale prices\\n\")\n  cat(\"  • plot/spatial_density_hexbin.png - Housing density heatmap\\n\")\n}\n\n  • plot/spatial_price_distribution.png - Spatial distribution of sale prices\n  • plot/spatial_density_hexbin.png - Housing density heatmap\n\nif (length(key_numeric) &gt;= 4) {\n  cat(\"  • plot/key_variables_scatter.png - Key variables vs. sale price (scatterplots)\\n\")\n}\n\n  • plot/key_variables_scatter.png - Key variables vs. sale price (scatterplots)\n\ncat(\"\\n\")\n\nStep3\n\n# =========================================================\n# Step 3: VIF-based Filtering + LASSO Feature Selection (Streamlined)\n# =========================================================\n\nlibrary(glmnet)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\n\nset.seed(2025)\n\n# === Read data and VIF results ===\ndf &lt;- read_csv(\"file/opa_sales_step2_clean.csv\", show_col_types = FALSE)\nvif_path &lt;- \"file/vif_values.csv\"\nif (!file.exists(vif_path)) stop(\"  file/vif_values.csv not found. Please run step2.R first.\")\nvif_table &lt;- read_csv(vif_path, show_col_types = FALSE)\n\n# === Determine target variable ===\ny_var &lt;- case_when(\n  \"sale_price_log\" %in% names(df) ~ \"sale_price_log\",\n  \"log_sale_price\" %in% names(df) ~ \"log_sale_price\",\n  \"sale_price\" %in% names(df) ~ \"sale_price\",\n  TRUE ~ NA_character_\n)\nif (is.na(y_var)) stop(\"  Target variable sale_price_log or sale_price not found\")\n\n# === Variable filtering (VIF) ===\nvif_threshold &lt;- 5\nvars_keep &lt;- vif_table %&gt;%\n  filter(VIF &lt;= vif_threshold) %&gt;%\n  pull(variable)\nvars_keep &lt;- intersect(vars_keep, names(df))\n\ncat(\"  Number of variables passing VIF ≤\", vif_threshold, \":\", length(vars_keep), \"\\n\")\n\n  Number of variables passing VIF ≤ 5 : 13 \n\n\n\n# === Prepare data matrix ===\ndf_lasso &lt;- df %&gt;%\n  dplyr::select(all_of(c(y_var, vars_keep))) %&gt;%\n  na.omit()\n\nx &lt;- as.matrix(df_lasso %&gt;% dplyr::select(-all_of(y_var)))\ny &lt;- df_lasso[[y_var]]\n\n# === Run LASSO regression ===\ncvfit &lt;- cv.glmnet(\n  x, y,\n  alpha = 1,            # LASSO\n  nfolds = 10,\n  standardize = TRUE\n)\n\nlambda_min &lt;- cvfit$lambda.min\nlambda_1se &lt;- cvfit$lambda.1se\ncat(\"λ_min =\", signif(lambda_min, 5), \"\\n\")\n\nλ_min = 0.00085507 \n\ncat(\"λ_1se =\", signif(lambda_1se, 5), \"\\n\")\n\nλ_1se = 0.026727 \n\n# === Extract non-zero coefficients ===\ncoef_min &lt;- coef(cvfit, s = \"lambda.min\")\nselected &lt;- rownames(coef_min)[coef_min[, 1] != 0]\nselected &lt;- selected[selected != \"(Intercept)\"]\n\nselected_tbl &lt;- data.frame(\n  variable = selected,\n  coefficient = as.numeric(coef_min[selected, 1])\n)\n\n# === Remove variables with near-zero coefficients ===\nselected_tbl &lt;- selected_tbl %&gt;%\n  filter(abs(coefficient) &gt;= 1e-5) %&gt;%\n  arrange(desc(abs(coefficient)))\n\ncat(\"  Number of variables retained after LASSO:\", nrow(selected_tbl), \"\\n\")\n\n  Number of variables retained after LASSO: 12 \n\n\n\n# === Output files ===\nif (!dir.exists(\"file\")) dir.create(\"file\", recursive = TRUE)\nif (!dir.exists(\"plot\")) dir.create(\"plot\", recursive = TRUE)\n\nwrite_csv(selected_tbl, \"file/lasso_selected_variables.csv\")\n\n\n# === Visualization 1: LASSO Coefficient Importance (Top 20) ===\ntop_n_vars &lt;- min(20, nrow(selected_tbl))\nselected_top &lt;- selected_tbl %&gt;% \n  top_n(top_n_vars, abs(coefficient)) %&gt;%\n  arrange(coefficient)\n\np_coef &lt;- ggplot(selected_top, aes(x = reorder(variable, coefficient), y = coefficient, fill = coefficient)) +\n  geom_col(alpha = 0.9) +\n  scale_fill_gradient2(\n    low = \"#053061\",      \n    mid = \"#F7F7F7\",      \n    high = \"#67001F\",     \n    midpoint = 0,\n    name = \"Coefficient\"\n  ) +\n  geom_hline(yintercept = 0, linetype = \"solid\", color = \"gray50\", linewidth = 0.5) +\n  coord_flip() +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.major.y = element_blank(),\n    panel.grid.major.x = element_line(color = \"#E5E5E5\", linewidth = 0.5),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    plot.subtitle = element_text(hjust = 0.5, size = 11, color = \"gray40\"),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"LASSO Selected Variables - Coefficient Importance\",\n    subtitle = paste0(\"Top \", top_n_vars, \" variables by absolute coefficient value\"),\n    x = \"Variable\",\n    y = \"Coefficient\",\n    caption = paste0(\"λ_min = \", signif(lambda_min, 4), \" | Total selected: \", nrow(selected_tbl), \" variables\")\n  )\n\nggsave(\"plot/lasso_coefficients.png\", p_coef, width = 10, height = 8, dpi = 300, bg = \"white\")\n\n\n# === Visualization 2: Cross-Validation Curve (λ Selection) ===\ncv_df &lt;- data.frame(\n  lambda = cvfit$lambda,\n  cvm = cvfit$cvm,\n  cvsd = cvfit$cvsd,\n  cvlo = cvfit$cvm - cvfit$cvsd,\n  cvup = cvfit$cvm + cvfit$cvsd\n)\n\np_cv &lt;- ggplot(cv_df, aes(x = log(lambda), y = cvm)) +\n  geom_ribbon(aes(ymin = cvlo, ymax = cvup), fill = \"#4393C3\", alpha = 0.3) +\n  geom_line(color = \"#053061\", linewidth = 1) +\n  geom_point(color = \"#053061\", size = 2, alpha = 0.6) +\n  geom_vline(xintercept = log(lambda_min), linetype = \"dashed\", color = \"#67001F\", linewidth = 1) +\n  geom_vline(xintercept = log(lambda_1se), linetype = \"dashed\", color = \"#D73027\", linewidth = 0.7) +\n  annotate(\"text\", x = log(lambda_min), y = max(cv_df$cvm) * 0.95, \n           label = paste0(\"λ_min = \", signif(lambda_min, 3)), \n           hjust = -0.1, size = 3.5, color = \"#67001F\") +\n  annotate(\"text\", x = log(lambda_1se), y = max(cv_df$cvm) * 0.90, \n           label = paste0(\"λ_1se = \", signif(lambda_1se, 3)), \n           hjust = -0.1, size = 3.5, color = \"#D73027\") +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(color = \"#E5E5E5\", linewidth = 0.5),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    plot.subtitle = element_text(hjust = 0.5, size = 11, color = \"gray40\"),\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"LASSO Cross-Validation Curve\",\n    subtitle = \"Mean Squared Error vs. log(λ)\",\n    x = \"log(λ)\",\n    y = \"Mean Squared Error\",\n    caption = \"Shaded area represents ±1 standard error\"\n  )\n\nggsave(\"plot/lasso_cv_curve.png\", p_cv, width = 10, height = 7, dpi = 300, bg = \"white\")\n\n\n# === Selection Summary ===\ncat(\"\\n\", rep(\"=\", 60), \"\\n\", sep = \"\")\n\n\n============================================================\n\ncat(\" Summary of Feature Selection Results\\n\")\n\n Summary of Feature Selection Results\n\ncat(rep(\"=\", 60), \"\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\"Initial number of predictors:\", ncol(x), \"\\n\")\n\nInitial number of predictors: 13 \n\ncat(\"After VIF ≤\", vif_threshold, \":\", length(vars_keep), \"\\n\")\n\nAfter VIF ≤ 5 : 13 \n\ncat(\"Retained after LASSO:\", nrow(selected_tbl), \"\\n\")\n\nRetained after LASSO: 12 \n\ncat(\"Selection rate:\", round((1 - nrow(selected_tbl) / ncol(x)) * 100, 1), \"%\\n\")\n\nSelection rate: 7.7 %\n\ncat(rep(\"=\", 60), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\" Step 3 Completed\\n\")\n\n Step 3 Completed\n\ncat(\" LASSO results: file/lasso_selected_variables.csv\\n\")\n\n LASSO results: file/lasso_selected_variables.csv\n\ncat(\" Coefficient importance: plot/lasso_coeff_importance_top20.png\\n\")\n\n Coefficient importance: plot/lasso_coeff_importance_top20.png\n\ncat(\" CV curve: plot/lasso_cv_curve.png\\n\")\n\n CV curve: plot/lasso_cv_curve.png\n\n\nStep4\n\n# =========================================================\n# Step 4 Enhanced: Four Progressive Models + Coefficient Tables + Feature Importance\n# =========================================================\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(caret)\nlibrary(broom)\nlibrary(patchwork)\nlibrary(sandwich)\nlibrary(lmtest)\nlibrary(car)\n\nset.seed(2025)\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"  Step 4: OLS Progressive Modeling and Full Analysis\\n\")\n\n  Step 4: OLS Progressive Modeling and Full Analysis\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\n\n\n# === Read Data ===\ndf &lt;- read_csv(\"file/opa_sales_step2_clean.csv\", show_col_types = FALSE)\n\ny_var &lt;- case_when(\n  \"sale_price_log\" %in% names(df) ~ \"sale_price_log\",\n  \"log_sale_price\" %in% names(df) ~ \"log_sale_price\",\n  \"sale_price\" %in% names(df) ~ \"sale_price\",\n  TRUE ~ NA_character_\n)\nif (is.na(y_var)) stop(\" Target variable not found\")\n\ncat(sprintf(\"Target variable: %s\\n\", y_var))\n\nTarget variable: sale_price\n\ncat(sprintf(\"Sample size: %d\\n\\n\", nrow(df)))\n\nSample size: 24023\n\n\n\n# === Data preprocessing ===\ncat(\"=== Data preprocessing ===\\n\")\n\n=== Data preprocessing ===\n\ncat_vars &lt;- c(\"interior_condition\", \"exterior_condition\", \"zip_code\", \"census_tract\")\ncat_vars &lt;- intersect(cat_vars, names(df))\n\nfor (cat_var in cat_vars) {\n  if (cat_var %in% c(\"zip_code\", \"census_tract\")) {\n    freq_table &lt;- table(df[[cat_var]])\n    sparse_levels &lt;- names(freq_table[freq_table &lt; 100])\n    df[[cat_var]] &lt;- as.character(df[[cat_var]])\n    df[[cat_var]][df[[cat_var]] %in% sparse_levels] &lt;- \"Other\"\n    df[[cat_var]] &lt;- factor(df[[cat_var]])\n    cat(sprintf(\"  %s: %d → %d categories\\n\", cat_var, length(freq_table), length(levels(df[[cat_var]]))))\n  } else {\n    df[[cat_var]] &lt;- factor(df[[cat_var]])\n  }\n}\n\n  zip_code: 46 → 46 categories\n  census_tract: 310 → 86 categories\n\ncoord_vars &lt;- c(\"x_coord\", \"y_coord\")\nif (all(coord_vars %in% names(df))) {\n  center_x &lt;- median(df$x_coord, na.rm = TRUE)\n  center_y &lt;- median(df$y_coord, na.rm = TRUE)\n  df$dist_to_center &lt;- sqrt((df$x_coord - center_x)^2 + (df$y_coord - center_y)^2)\n  cat(\"  Added: dist_to_center\\n\")\n} else {\n  coord_vars &lt;- c()\n}\n\n  Added: dist_to_center\n\n# Identify variable groups\nstructural_vars &lt;- c()\nfor (pattern in c(\"livable_area\", \"bedroom\", \"bathroom\", \"stories\", \"garage\", \"age\")) {\n  matched &lt;- grep(pattern, names(df), value = TRUE, ignore.case = TRUE)\n  structural_vars &lt;- c(structural_vars, matched)\n}\nstructural_vars &lt;- unique(structural_vars)\nstructural_vars &lt;- structural_vars[sapply(df[structural_vars], is.numeric)]\n\ncensus_vars &lt;- c()\nfor (pattern in c(\"income\", \"poverty\", \"education\", \"bachelor\", \"population\", \"household\")) {\n  matched &lt;- grep(pattern, names(df), value = TRUE, ignore.case = TRUE)\n  census_vars &lt;- c(census_vars, matched)\n}\ncensus_vars &lt;- unique(census_vars)\ncensus_vars &lt;- census_vars[sapply(df[census_vars], is.numeric)]\n\nspatial_vars &lt;- c(coord_vars, \"dist_to_center\")\nspatial_vars &lt;- intersect(spatial_vars, names(df))\n\nfixed_effects &lt;- c(\"zip_code\", \"census_tract\")\nfixed_effects &lt;- intersect(fixed_effects, names(df))\n\ncat(sprintf(\"\\n  Structural features: %d\\n\", length(structural_vars)))\n\n\n  Structural features: 5\n\ncat(sprintf(\"  Census features: %d\\n\", length(census_vars)))\n\n  Census features: 3\n\ncat(sprintf(\"  Spatial features: %d\\n\", length(spatial_vars)))\n\n  Spatial features: 3\n\ncat(sprintf(\"  Fixed effects: %d\\n\", length(fixed_effects)))\n\n  Fixed effects: 2\n\n\n\n# =========================================================\n# Build 4 Progressive Models\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Building 4 Progressive Models ===\\n\\n\")\n\n=== Building 4 Progressive Models ===\n\nmake_formula &lt;- function(y, main_vars, interact_vars = NULL, fe_vars = NULL) {\n  rhs &lt;- main_vars\n  if (!is.null(interact_vars) && length(interact_vars) == 2) {\n    rhs &lt;- c(rhs, paste(interact_vars, collapse = \":\"))\n  }\n  if (!is.null(fe_vars)) {\n    rhs &lt;- c(rhs, fe_vars)\n  }\n  as.formula(paste(y, \"~\", paste(rhs, collapse = \" + \")))\n}\n\nf1 &lt;- make_formula(y_var, structural_vars)\nf2 &lt;- make_formula(y_var, c(structural_vars, census_vars))\nf3 &lt;- make_formula(y_var, c(structural_vars, census_vars, spatial_vars))\n\ninteract_pairs &lt;- NULL\nif (\"total_livable_area\" %in% structural_vars && \"median_incomeE\" %in% census_vars) {\n  interact_pairs &lt;- c(\"total_livable_area\", \"median_incomeE\")\n}\n\nf4 &lt;- make_formula(y_var, c(structural_vars, census_vars, spatial_vars),\n                   interact_vars = interact_pairs, fe_vars = fixed_effects)\n\nmodels &lt;- list()\ncat(\"  Fitting Model 1...\"); models[[\"M1: Structural\"]] &lt;- lm(f1, data = df, na.action = na.exclude); cat(\" ✓\\n\")\n\n  Fitting Model 1...\n\n\n ✓\n\ncat(\"  Fitting Model 2...\"); models[[\"M2: +Census\"]] &lt;- lm(f2, data = df, na.action = na.exclude); cat(\" ✓\\n\")\n\n  Fitting Model 2...\n\n\n ✓\n\ncat(\"  Fitting Model 3...\"); models[[\"M3: +Spatial\"]] &lt;- lm(f3, data = df, na.action = na.exclude); cat(\" ✓\\n\")\n\n  Fitting Model 3...\n\n\n ✓\n\ncat(\"  Fitting Model 4...\"); models[[\"M4: +Interact+FE\"]] &lt;- lm(f4, data = df, na.action = na.exclude); cat(\" ✓\\n\")\n\n  Fitting Model 4...\n\n\n ✓\n\n\n\n# =========================================================\n# Model Performance Evaluation\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Model Performance Evaluation ===\\n\\n\")\n\n=== Model Performance Evaluation ===\n\ntrain_perf &lt;- lapply(models, function(m) {\n  pred &lt;- fitted(m)\n  actual &lt;- df[[y_var]][!is.na(fitted(m))]\n  \n  # Log-scale metrics\n  rmse_log &lt;- sqrt(mean((pred - actual)^2, na.rm = TRUE))\n  mae_log &lt;- mean(abs(pred - actual), na.rm = TRUE)\n  \n  # Original-scale metrics — use expm1 to invert log1p\n  pred_original &lt;- expm1(pred)\n  actual_original &lt;- expm1(actual)\n  \n  # Method 3: remove outliers based on residuals (|residual| &gt; 3 standard deviations)\n  residuals_original &lt;- pred_original - actual_original\n  res_sd &lt;- sd(residuals_original, na.rm = TRUE)\n  valid_idx &lt;- abs(residuals_original) &lt;= 3 * res_sd\n  \n  # Compute RMSE and MAE after removing outliers\n  rmse_original &lt;- sqrt(mean((pred_original[valid_idx] - actual_original[valid_idx])^2, na.rm = TRUE))\n  mae_original &lt;- mean(abs(pred_original[valid_idx] - actual_original[valid_idx]), na.rm = TRUE)\n  \n  data.frame(\n    RMSE_log = rmse_log,\n    RMSE_original = rmse_original,\n    MAE_log = mae_log,\n    MAE_original = mae_original,\n    R2 = summary(m)$r.squared,\n    Adj_R2 = summary(m)$adj.r.squared,\n    N_vars = length(coef(m)) - 1,\n    N = length(pred),\n    N_valid = sum(valid_idx, na.rm = TRUE),      # retained sample count\n    Pct_valid = mean(valid_idx, na.rm = TRUE) * 100  # percentage of retained samples\n  )\n}) %&gt;% bind_rows(.id = \"Model\")\n\n# Print removal stats\ncat(\"\\nOutlier removal statistics (|residual| &gt; 3σ):\\n\")\n\n\nOutlier removal statistics (|residual| &gt; 3σ):\n\nprint(train_perf %&gt;% select(Model, N, N_valid, Pct_valid, RMSE_original, MAE_original))\n\n             Model     N N_valid Pct_valid RMSE_original MAE_original\n1   M1: Structural 24023   23693  98.62632      172980.9    113702.55\n2      M2: +Census 24023   23713  98.70957      137239.1     84251.14\n3     M3: +Spatial 24023   23714  98.71373      135990.7     82773.39\n4 M4: +Interact+FE 24023   23726  98.76368      121478.7     73179.58\n\ncat(\"Performing 10-fold cross-validation...\\n\")\n\nPerforming 10-fold cross-validation...\n\ncv_ctrl &lt;- trainControl(method = \"cv\", number = 10, verboseIter = FALSE)\nformulas &lt;- list(f1, f2, f3, f4)\nnames(formulas) &lt;- names(models)\n\ncv_results &lt;- lapply(formulas, function(fm) {\n  tryCatch(train(fm, data = df, method = \"lm\", trControl = cv_ctrl, na.action = na.omit),\n           error = function(e) NULL)\n})\ncv_results &lt;- Filter(Negate(is.null), cv_results)\n\ncv_perf &lt;- lapply(cv_results, function(m) {\n  data.frame(CV_RMSE_log = m$results$RMSE[1], CV_R2 = m$results$Rsquared[1])\n}) %&gt;% bind_rows(.id = \"Model\")\n\nperf_table &lt;- train_perf %&gt;%\n  left_join(cv_perf, by = \"Model\") %&gt;%\n  mutate(Overfit_RMSE_log = CV_RMSE_log - RMSE_log, Overfit_R2 = R2 - CV_R2)\n\ncat(\"\\n\")\nprint(perf_table, digits = 4, row.names = FALSE)\n\n            Model RMSE_log RMSE_original MAE_log MAE_original     R2 Adj_R2\n   M1: Structural   0.6863        172981  0.4860       113703 0.3442 0.3441\n      M2: +Census   0.5917        137239  0.3776        84251 0.5126 0.5124\n     M3: +Spatial   0.5870        135991  0.3714        82773 0.5202 0.5200\n M4: +Interact+FE   0.5561        121479  0.3380        73180 0.5695 0.5669\n N_vars     N N_valid Pct_valid CV_RMSE_log  CV_R2 Overfit_RMSE_log Overfit_R2\n      5 24023   23693     98.63      0.6862 0.3445       -7.634e-05 -0.0003115\n      8 24023   23713     98.71      0.5916 0.5128       -8.878e-05 -0.0001838\n     11 24023   23714     98.71      0.5869 0.5204       -1.000e-04 -0.0001902\n    142 24023   23726     98.76      0.5593 0.5644        3.269e-03  0.0050628\n\n\n\n# =========================================================\n# Heteroskedasticity Test\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Heteroskedasticity Test (Model 4) ===\\n\\n\")\n\n=== Heteroskedasticity Test (Model 4) ===\n\nbp_test &lt;- bptest(models[[\"M4: +Interact+FE\"]])\ncat(sprintf(\"Breusch–Pagan Test:\\n  Statistic = %.2f\\n  p-value = %.4f\\n\", \n            bp_test$statistic, bp_test$p.value))\n\nBreusch–Pagan Test:\n  Statistic = 2134.62\n  p-value = 0.0000\n\nif (bp_test$p.value &lt; 0.05) {\n  cat(\"\\n️ Significant heteroskedasticity detected (p &lt; 0.05)\\n   Recommendation: use robust standard errors\\n\")\n} else {\n  cat(\"\\n No significant heteroskedasticity detected\\n\")\n}\n\n\n️ Significant heteroskedasticity detected (p &lt; 0.05)\n   Recommendation: use robust standard errors\n\n\n\n# =========================================================\n# Model 4 Full Coefficient Table (Robust Standard Errors)\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Model 4: Full Coefficient Table (Robust SE) ===\\n\\n\")\n\n=== Model 4: Full Coefficient Table (Robust SE) ===\n\nmodel4 &lt;- models[[\"M4: +Interact+FE\"]]\nrobust_coef &lt;- coeftest(model4, vcov = vcovHC(model4, type = \"HC1\"))\n\ncoef_table &lt;- tidy(robust_coef) %&gt;%\n  filter(term != \"(Intercept)\") %&gt;%\n  mutate(\n    sig = case_when(\n      p.value &lt; 0.001 ~ \"***\",\n      p.value &lt; 0.01 ~ \"**\",\n      p.value &lt; 0.05 ~ \"*\",\n      p.value &lt; 0.10 ~ \".\",\n      TRUE ~ \"\"\n    )\n  ) %&gt;%\n  arrange(p.value) %&gt;%\n  dplyr::select(term, estimate, std.error, statistic, p.value, sig)\n\nif (!dir.exists(\"file\")) dir.create(\"file\")\nif (!dir.exists(\"table\")) dir.create(\"table\")\n\nwrite_csv(coef_table, \"table/model4_full_coefficients.csv\")\ncat(\"  ✓ table/model4_full_coefficients.csv (All coefficients)\\n\")\n\n  ✓ table/model4_full_coefficients.csv (All coefficients)\n\ncoef_sig &lt;- coef_table %&gt;% filter(p.value &lt; 0.05)\nwrite_csv(coef_sig, \"table/model4_significant_coefficients.csv\")\ncat(\"  ✓ table/model4_significant_coefficients.csv (Significant coefficients)\\n\")\n\n  ✓ table/model4_significant_coefficients.csv (Significant coefficients)\n\ncat(sprintf(\"\\nNumber of significant variables (p &lt; 0.05): %d\\n\", nrow(coef_sig)))\n\n\nNumber of significant variables (p &lt; 0.05): 74\n\ncat(\"\\nTop 20 significant variables:\\n\")\n\n\nTop 20 significant variables:\n\nprint(as.data.frame(head(coef_sig, 20)), row.names = FALSE)\n\n                term    estimate   std.error  statistic       p.value sig\n number_of_bathrooms  0.57683321 0.015420414  37.407116 1.142354e-297 ***\n     per_cap_incomeE  0.36773913 0.025683742  14.317973  2.628332e-46 ***\n  total_livable_area  0.48199968 0.038119301  12.644505  1.571285e-36 ***\n       zip_code19103  0.63540760 0.054794635  11.596165  5.218699e-31 ***\n                age2 -0.04775122 0.004555385 -10.482367  1.183564e-25 ***\n       census_tract7  0.87985167 0.088002818   9.997994  1.729730e-23 ***\n      census_tract13  0.54303063 0.068221853   7.959775  1.799726e-15 ***\n      census_tract14  0.54498041 0.068646953   7.938887  2.129287e-15 ***\n      census_tract12  0.54252167 0.068824818   7.882646  3.341484e-15 ***\n       zip_code19106  0.63471600 0.085682176   7.407795  1.326740e-13 ***\n       zip_code19147  0.49363371 0.066777930   7.392169  1.492021e-13 ***\n     census_tract180  0.72410180 0.099219613   7.297970  3.012660e-13 ***\n       zip_code19130  0.49781714 0.072690260   6.848471  7.645435e-12 ***\n       zip_code19107  0.49815251 0.073630825   6.765543  1.358805e-11 ***\n       zip_code19148  0.44251467 0.073274428   6.039142  1.572250e-09 ***\n      census_tract11  0.39171657 0.066613539   5.880435  4.146363e-09 ***\n     census_tract379  0.54364745 0.102377266   5.310236  1.104621e-07 ***\n     census_tract179  0.61289816 0.115555239   5.303941  1.143375e-07 ***\n       zip_code19146  0.34323604 0.065585163   5.233440  1.677892e-07 ***\n       zip_code19123  0.37828484 0.072407204   5.224409  1.761784e-07 ***\n\n\n\n# =========================================================\n# Stargazer Regression Table\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Generating Stargazer Regression Table ===\\n\\n\")\n\n=== Generating Stargazer Regression Table ===\n\nif (requireNamespace(\"stargazer\", quietly = TRUE)) {\n  sink(\"table/regression_table.txt\")\n  stargazer::stargazer(\n    models[[1]], models[[2]], models[[3]], models[[4]],\n    type = \"text\",\n    title = \"Progressive OLS Regression Results\",\n    dep.var.labels = \"Log Sale Price\",\n    column.labels = c(\"Model 1\", \"Model 2\", \"Model 3\", \"Model 4\"),\n    omit.stat = c(\"ser\", \"f\"),\n    digits = 3,\n    star.cutoffs = c(0.05, 0.01, 0.001),\n    notes = \"Robust standard errors in parentheses\"\n  )\n  sink()\n  cat(\"   table/regression_table.txt\\n\")\n}\n\n\n# =========================================================\n# Cross-Model Feature Importance\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Cross-Model Feature Importance Comparison ===\\n\\n\")\n\n=== Cross-Model Feature Importance Comparison ===\n\nimportance_list &lt;- list()\nfor (i in 1:4) {\n  model_name &lt;- names(models)[i]\n  model &lt;- models[[i]]\n  \n  coefs &lt;- tidy(model) %&gt;%\n    filter(term != \"(Intercept)\") %&gt;%\n    mutate(abs_estimate = abs(estimate)) %&gt;%\n    arrange(desc(abs_estimate)) %&gt;%\n    head(10) %&gt;%\n    mutate(Model = model_name) %&gt;%\n    dplyr::select(Model, term, estimate, abs_estimate)\n  \n  importance_list[[i]] &lt;- coefs\n}\n\nimportance_all &lt;- bind_rows(importance_list)\nwrite_csv(importance_all, \"table/feature_importance_all_models.csv\")\ncat(\"  ✓ table/feature_importance_all_models.csv\\n\")\n\n  ✓ table/feature_importance_all_models.csv\n\n# Identify variables that are important across multiple models\ntop_vars &lt;- importance_all %&gt;%\n  group_by(term) %&gt;%\n  summarise(appearances = n(), .groups = \"drop\") %&gt;%\n  filter(appearances &gt;= 3) %&gt;%\n  pull(term)\n\nif (length(top_vars) &gt; 0) {\n  importance_key &lt;- importance_all %&gt;% filter(term %in% top_vars)\n  \n  if (!dir.exists(\"plot\")) dir.create(\"plot\")\n  \n  p_importance &lt;- ggplot(importance_key, aes(Model, abs_estimate, fill = Model)) +\n    geom_col(alpha = 0.8) +\n    facet_wrap(~term, scales = \"free_y\", ncol = 4) +\n    scale_fill_manual(\n      values = c(\"#053061\", \"#2166AC\", \"#4393C3\", \"#D6604D\"),\n      guide = \"none\"\n    ) +\n    theme_minimal(base_size = 9) +\n    theme(\n      axis.text.x = element_text(angle = 45, hjust = 1, size = 7),\n      strip.text = element_text(face = \"bold\", size = 9),\n      panel.grid.major.x = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n      plot.subtitle = element_text(hjust = 0.5, size = 10),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(\n      title = \"Feature Importance Across Models\",\n      subtitle = \"Variables appearing in top 10 of at least 3 models\",\n      x = NULL, y = \"Absolute Coefficient\"\n    )\n  \n  ggsave(\"plot/feature_importance_across_models.png\", p_importance,\n         width = 14, height = 10, dpi = 300, bg = \"white\")\n  cat(\"   plot/feature_importance_across_models.png\\n\")\n}\n\n   plot/feature_importance_across_models.png\n\n\n\n# =========================================================\n# Visualization (Original 3 Figures)\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Generate Performance Visualizations ===\\n\\n\")\n\n=== Generate Performance Visualizations ===\n\nperf_plot_data &lt;- perf_table %&gt;% mutate(Model_Num = 1:n())\n\np_r2 &lt;- ggplot(perf_plot_data, aes(Model_Num)) +\n  geom_line(aes(y = R2, color = \"Training R²\"), linewidth = 1.2) +\n  geom_line(aes(y = CV_R2, color = \"CV R²\"), linewidth = 1.2) +\n  geom_point(aes(y = R2, color = \"Training R²\"), size = 3) +\n  geom_point(aes(y = CV_R2, color = \"CV R²\"), size = 3) +\n  scale_color_manual(values = c(\"Training R²\" = \"#67001F\", \"CV R²\" = \"#053061\"), name = NULL) +\n  scale_x_continuous(breaks = 1:4, labels = perf_table$Model) +\n  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1)) +\n  theme_minimal(base_size = 11) +\n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 9),\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(title = \"R² Improvement: Progressive Model Building\", x = NULL, y = \"R² Value\")\n\np_rmse &lt;- ggplot(perf_plot_data, aes(Model_Num)) +\n  geom_line(aes(y = RMSE_original/1000, color = \"RMSE ($1000s)\"), linewidth = 1.2) +\n  geom_point(aes(y = RMSE_original/1000, color = \"RMSE ($1000s)\"), size = 3) +\n  scale_color_manual(values = c(\"RMSE ($1000s)\" = \"#67001F\"), name = NULL) +\n  scale_x_continuous(breaks = 1:4, labels = perf_table$Model) +\n  theme_minimal(base_size = 11) +\n  theme(\n    axis.text.x = element_text(angle = 20, hjust = 1, size = 9),\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(title = \"RMSE Reduction (Original Scale)\", x = NULL, y = \"RMSE ($1000s)\")\n\np_combined &lt;- (p_r2 | p_rmse) +\n  plot_annotation(\n    title = \"4-Model Progressive OLS: Performance Evolution\",\n    subtitle = \"From structural features to full specification with interactions and fixed effects\",\n    theme = theme(\n      plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    )\n  )\n\nggsave(\"plot/ols_4model_performance.png\", p_combined, width = 14, height = 6, dpi = 300, bg = \"white\")\ncat(\"  ✓ plot/ols_4model_performance.png\\n\")\n\n  ✓ plot/ols_4model_performance.png\n\n\n\n# Prediction Scatter Plot\npred_m4 &lt;- fitted(models[[\"M4: +Interact+FE\"]])\nactual_m4 &lt;- df[[y_var]][!is.na(pred_m4)]\npred_data &lt;- data.frame(\n  actual = actual_m4,\n  predicted = pred_m4[!is.na(pred_m4)],\n  residual = pred_m4[!is.na(pred_m4)] - actual_m4\n)\n\np_pred &lt;- ggplot(pred_data, aes(actual, predicted)) +\n  geom_point(aes(color = residual), alpha = 0.4, size = 0.8) +\n  scale_color_gradient2(low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\", midpoint = 0, name = \"Residual\") +\n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", linewidth = 1) +\n  annotate(\"text\", x = min(pred_data$actual) + 0.5, y = max(pred_data$predicted) - 0.5,\n           label = sprintf(\"R² = %.4f\\nRMSE = %.4f\", perf_table$R2[4], perf_table$RMSE[4]),\n           hjust = 0, size = 4.5, fontface = \"bold\") +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    plot.subtitle = element_text(hjust = 0.5, size = 11),\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(title = \"Model 4: Prediction vs. Actual\",\n       subtitle = \"Full specification with interactions and fixed effects\",\n       x = \"Actual Sale Price (log)\", y = \"Predicted Sale Price (log)\")\n\nggsave(\"plot/ols_4model_prediction.png\", p_pred, width = 10, height = 8, dpi = 300, bg = \"white\")\ncat(\"   plot/ols_4model_prediction.png\\n\")\n\n   plot/ols_4model_prediction.png\n\n\n\n# Residual Diagnostics\nresid_data &lt;- data.frame(\n  fitted = pred_m4[!is.na(pred_m4)],\n  residual = pred_data$residual,\n  std_resid = rstandard(models[[\"M4: +Interact+FE\"]])[!is.na(pred_m4)]\n)\n\np_r1 &lt;- ggplot(resid_data, aes(fitted, residual)) +\n  geom_point(alpha = 0.3, size = 0.6, color = \"#053061\") +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"#67001F\", linewidth = 1) +\n  theme_minimal(base_size = 10) +\n  theme(panel.grid.minor = element_blank(), plot.background = element_rect(fill = \"white\", color = NA)) +\n  labs(title = \"Residuals vs. Fitted\", x = \"Fitted\", y = \"Residuals\")\n\np_r2 &lt;- ggplot(resid_data, aes(sample = std_resid)) +\n  stat_qq(alpha = 0.4, size = 0.6, color = \"#053061\") +\n  stat_qq_line(color = \"#67001F\", linewidth = 1) +\n  theme_minimal(base_size = 10) +\n  theme(panel.grid.minor = element_blank(), plot.background = element_rect(fill = \"white\", color = NA)) +\n  labs(title = \"Normal Q-Q\", x = \"Theoretical\", y = \"Std. Residuals\")\n\np_r3 &lt;- ggplot(resid_data, aes(std_resid)) +\n  geom_histogram(bins = 50, fill = \"#053061\", color = \"white\", alpha = 0.8) +\n  geom_vline(xintercept = 0, linetype = \"dashed\", color = \"#67001F\", linewidth = 1) +\n  theme_minimal(base_size = 10) +\n  theme(panel.grid.minor = element_blank(), plot.background = element_rect(fill = \"white\", color = NA)) +\n  labs(title = \"Residual Distribution\", x = \"Std. Residuals\", y = \"Count\")\n\np_r4 &lt;- ggplot(resid_data, aes(fitted, sqrt(abs(std_resid)))) +\n  geom_point(alpha = 0.3, size = 0.6, color = \"#053061\") +\n  geom_smooth(method = \"loess\", se = TRUE, color = \"#67001F\", linewidth = 1) +\n  theme_minimal(base_size = 10) +\n  theme(panel.grid.minor = element_blank(), plot.background = element_rect(fill = \"white\", color = NA)) +\n  labs(title = \"Scale-Location\", x = \"Fitted\", y = \"√|Std. Residuals|\")\n\np_diag &lt;- (p_r1 | p_r2) / (p_r3 | p_r4) +\n  plot_annotation(\n    title = sprintf(\"Model 4 Diagnostics (BP test p = %.4f)\", bp_test$p.value),\n    theme = theme(plot.title = element_text(size = 13, face = \"bold\", hjust = 0.5),\n                  plot.background = element_rect(fill = \"white\", color = NA))\n  )\n\nggsave(\"plot/ols_4model_diagnostics.png\", p_diag, width = 12, height = 10, dpi = 300, bg = \"white\")\ncat(\"  ✓ plot/ols_4model_diagnostics.png\\n\")\n\n  ✓ plot/ols_4model_diagnostics.png\n\n\n\n# =========================================================\n# Spatial Prediction Comparison Plot\n# =========================================================\n\nif (all(c(\"x_coord\", \"y_coord\") %in% names(df))) {\n  cat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n  cat(\"=== Generating Spatial Prediction Comparison Plot ===\\n\\n\")\n  \n  # Prepare data\n  spatial_pred_data &lt;- df %&gt;%\n    filter(!is.na(x_coord) & !is.na(y_coord)) %&gt;%\n    mutate(\n      predicted = fitted(models[[\"M4: +Interact+FE\"]]),\n      residual = predicted - .data[[y_var]]\n    ) %&gt;%\n    filter(!is.na(predicted))\n  \n  # If the dataset is too large, randomly sample to speed up plotting\n  if (nrow(spatial_pred_data) &gt; 10000) {\n    set.seed(2025)\n    spatial_pred_data &lt;- spatial_pred_data %&gt;% \n      slice_sample(n = 10000)\n    cat(\"  Large dataset detected; randomly sampled 10,000 points for plotting\\n\")\n  }\n\n# 1. Spatial Distribution of Actual Sale Prices\np_actual &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, color = .data[[y_var]])) +\n  geom_point(alpha = 0.6, size = 1) +\n  scale_color_gradient2(\n    low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n    midpoint = median(spatial_pred_data[[y_var]], na.rm = TRUE),\n    name = \"Log Price\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"Actual Sale Price\",\n    x = \"X Coordinate\",\n    y = \"Y Coordinate\"\n  )\n\n# 2. Spatial Distribution of Predicted Sale Prices\np_predicted &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, color = predicted)) +\n  geom_point(alpha = 0.6, size = 1) +\n  scale_color_gradient2(\n    low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n    midpoint = median(spatial_pred_data$predicted, na.rm = TRUE),\n    name = \"Log Price\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"Predicted Sale Price (Model 4)\",\n    x = \"X Coordinate\",\n    y = \"Y Coordinate\"\n  )\n\n# 3. Spatial Distribution of Residuals\np_residual_spatial &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, color = residual)) +\n  geom_point(alpha = 0.6, size = 1) +\n  scale_color_gradient2(\n    low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n    midpoint = 0,\n    name = \"Residual\"\n  ) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n    legend.position = \"right\",\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"Prediction Residuals\",\n    subtitle = \"Blue = Underpredicted | Red = Overpredicted\",\n    x = \"X Coordinate\",\n    y = \"Y Coordinate\"\n  )\n\n# Combine the 3 plots\np_spatial_comparison &lt;- (p_actual | p_predicted | p_residual_spatial) +\n  plot_annotation(\n    title = \"Spatial Distribution: Actual vs. Predicted Sale Prices\",\n    subtitle = sprintf(\"Model 4 predictions (R² = %.4f, RMSE = %.4f)\", \n                      perf_table$R2[4], perf_table$RMSE[4]),\n    theme = theme(\n      plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 12, hjust = 0.5),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    )\n  )\n\nggsave(\"plot/spatial_prediction_comparison.png\", p_spatial_comparison,\n       width = 18, height = 6, dpi = 300, bg = \"white\")\ncat(\"   plot/spatial_prediction_comparison.png\\n\")\n\n  # 4. High-Resolution Hexbin Heatmap Version\n  p_actual_hex &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, z = .data[[y_var]])) +\n    stat_summary_hex(bins = 40, fun = mean) +\n    scale_fill_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = median(spatial_pred_data[[y_var]], na.rm = TRUE),\n      name = \"Avg Log Price\"\n    ) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(title = \"Actual (Hexbin Average)\", x = \"X Coordinate\", y = \"Y Coordinate\")\n  \n  p_predicted_hex &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, z = predicted)) +\n    stat_summary_hex(bins = 40, fun = mean) +\n    scale_fill_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = median(spatial_pred_data$predicted, na.rm = TRUE),\n      name = \"Avg Log Price\"\n    ) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(title = \"Predicted (Hexbin Average)\", x = \"X Coordinate\", y = \"Y Coordinate\")\n  \n  p_residual_hex &lt;- ggplot(spatial_pred_data, aes(x_coord, y_coord, z = residual)) +\n    stat_summary_hex(bins = 40, fun = mean) +\n    scale_fill_gradient2(\n      low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = 0,\n      name = \"Avg Residual\"\n    ) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 13),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(title = \"Residuals (Hexbin Average)\", x = \"X Coordinate\", y = \"Y Coordinate\")\n  \n  p_spatial_hexbin &lt;- (p_actual_hex | p_predicted_hex | p_residual_hex) +\n    plot_annotation(\n      title = \"Spatial Distribution (Hexbin Aggregation): Actual vs. Predicted\",\n      subtitle = \"Hexagonal bins show average values in each area\",\n      theme = theme(\n        plot.title = element_text(size = 15, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 12, hjust = 0.5),\n        plot.background = element_rect(fill = \"white\", color = NA)\n      )\n    )\n  \n  ggsave(\"plot/spatial_prediction_hexbin.png\", p_spatial_hexbin,\n         width = 18, height = 6, dpi = 300, bg = \"white\")\n  cat(\"  ✓ plot/spatial_prediction_hexbin.png\\n\")\n  \n  # 5. Spatial Clustering of Residuals\n  # Calculate spatial statistics of residuals\n  residual_stats &lt;- spatial_pred_data %&gt;%\n    summarise(\n      mean_residual = mean(residual, na.rm = TRUE),\n      sd_residual = sd(residual, na.rm = TRUE),\n      min_residual = min(residual, na.rm = TRUE),\n      max_residual = max(residual, na.rm = TRUE)\n    )\n  \n  cat(\"\\n  Spatial Residual Statistics:\\n\")\n  cat(sprintf(\"    Mean: %.4f\\n\", residual_stats$mean_residual))\n  cat(sprintf(\"    Standard Deviation: %.4f\\n\", residual_stats$sd_residual))\n  cat(sprintf(\"    Range: [%.4f, %.4f]\\n\", \n              residual_stats$min_residual, residual_stats$max_residual))\n  \n  # Identify high-residual areas\n  high_residual_areas &lt;- spatial_pred_data %&gt;%\n    filter(abs(residual) &gt; 2 * residual_stats$sd_residual) %&gt;%\n    mutate(residual_type = ifelse(residual &gt; 0, \"Overpredicted\", \"Underpredicted\"))\n  \n  if (nrow(high_residual_areas) &gt; 0) {\n    cat(sprintf(\"\\n  ️ Detected %d high-residual points (|residual| &gt; 2σ):\\n\", \n                nrow(high_residual_areas)))\n    cat(sprintf(\"    Overpredicted: %d\\n\", sum(high_residual_areas$residual_type == \"Overpredicted\")))\n    cat(sprintf(\"    Underpredicted: %d\\n\", sum(high_residual_areas$residual_type == \"Underpredicted\")))\n    \n    # Save high-residual point data\n    write_csv(high_residual_areas %&gt;% \n                dplyr::select(x_coord, y_coord, !!sym(y_var), predicted, residual, residual_type),\n              \"file/high_residual_locations.csv\")\n    cat(\"     file/high_residual_locations.csv\\n\")\n  }\n}\n\n\n================================================================================\n=== Generating Spatial Prediction Comparison Plot ===\n\n  Large dataset detected; randomly sampled 10,000 points for plotting\n\n\n   plot/spatial_prediction_comparison.png\n\n\n  ✓ plot/spatial_prediction_hexbin.png\n\n  Spatial Residual Statistics:\n    Mean: 0.0036\n    Standard Deviation: 0.5571\n    Range: [-3.8418, 3.8371]\n\n  ️ Detected 483 high-residual points (|residual| &gt; 2σ):\n    Overpredicted: 294\n    Underpredicted: 189\n     file/high_residual_locations.csv\n\n\n\n# =========================================================\n# Save Results\n# =========================================================\n\nwrite_csv(perf_table, \"file/ols_4model_performance.csv\")\nsaveRDS(models, \"file/ols_4models.rds\")\n\n# =========================================================\n# Summary\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\" Step 4 Completed\\n\")\n\n Step 4 Completed\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\" Output Files:\\n\\n\")\n\n Output Files:\n\ncat(\"Tables:\\n\")\n\nTables:\n\ncat(\"  • table/model4_full_coefficients.csv - Full coefficient table (Model 4)\\n\")\n\n  • table/model4_full_coefficients.csv - Full coefficient table (Model 4)\n\ncat(\"  • table/model4_significant_coefficients.csv - Significant coefficients (Model 4)\\n\")\n\n  • table/model4_significant_coefficients.csv - Significant coefficients (Model 4)\n\ncat(\"  • table/regression_table.txt - Stargazer regression summary\\n\")\n\n  • table/regression_table.txt - Stargazer regression summary\n\ncat(\"  • table/feature_importance_all_models.csv - Cross-model feature importance\\n\")\n\n  • table/feature_importance_all_models.csv - Cross-model feature importance\n\ncat(\"  • file/ols_4model_performance.csv - Model performance comparison\\n\")\n\n  • file/ols_4model_performance.csv - Model performance comparison\n\ncat(\"  • file/ols_4models.rds - RDS objects of all 4 models\\n\\n\")\n\n  • file/ols_4models.rds - RDS objects of all 4 models\n\ncat(\"Figures:\\n\")\n\nFigures:\n\ncat(\"  • plot/ols_4model_performance.png - Performance evolution\\n\")\n\n  • plot/ols_4model_performance.png - Performance evolution\n\ncat(\"  • plot/ols_4model_prediction.png - Model 4 prediction vs. actual\\n\")\n\n  • plot/ols_4model_prediction.png - Model 4 prediction vs. actual\n\ncat(\"  • plot/ols_4model_diagnostics.png - Model 4 diagnostic plots\\n\")\n\n  • plot/ols_4model_diagnostics.png - Model 4 diagnostic plots\n\ncat(\"  • plot/feature_importance_across_models.png - Cross-model feature importance\\n\")\n\n  • plot/feature_importance_across_models.png - Cross-model feature importance\n\nif (all(c(\"x_coord\", \"y_coord\") %in% names(df))) {\n  cat(\"  • plot/spatial_prediction_comparison.png - Spatial prediction comparison\\n\")\n  cat(\"  • plot/spatial_prediction_hexbin.png - Spatial prediction heatmap\\n\")\n}\n\n  • plot/spatial_prediction_comparison.png - Spatial prediction comparison\n  • plot/spatial_prediction_hexbin.png - Spatial prediction heatmap\n\ncat(\"\\n\")\ncat(\" Model Summary:\\n\")\n\n Model Summary:\n\nfor (i in 1:4) {\n  rmse_fmt &lt;- formatC(perf_table$RMSE_original[i], format = \"f\", digits = 0, big.mark = \",\")\n  cat(sprintf(\"  Model %d: R² = %.4f, RMSE = $%s [%d variables]\\n\",\n              i, perf_table$R2[i], rmse_fmt, perf_table$N_vars[i]))\n}\n\n  Model 1: R² = 0.3442, RMSE = $172,981 [5 variables]\n  Model 2: R² = 0.5126, RMSE = $137,239 [8 variables]\n  Model 3: R² = 0.5202, RMSE = $135,991 [11 variables]\n  Model 4: R² = 0.5695, RMSE = $121,479 [142 variables]\n\ncat(\"\\n Paper Writing Suggestions:\\n\")\n\n\n Paper Writing Suggestions:\n\ncat(\"  1. Results (Opening): Descriptive statistics table\\n\")\n\n  1. Results (Opening): Descriptive statistics table\n\ncat(\"  2. Results (Core): Stargazer regression summary (comparison of 4 models)\\n\")\n\n  2. Results (Core): Stargazer regression summary (comparison of 4 models)\n\ncat(\"  3. Results (Details): Significant coefficients of Model 4\\n\")\n\n  3. Results (Details): Significant coefficients of Model 4\n\ncat(\"  4. Discussion: Cross-model feature importance comparison\\n\")\n\n  4. Discussion: Cross-model feature importance comparison\n\ncat(\"  5. Mention the use of robust standard errors to address heteroskedasticity\\n\\n\")\n\n  5. Mention the use of robust standard errors to address heteroskedasticity\n\n\nStep4 plus\n\n# =========================================================\n# Step 4 Supplement: Cook’s Distance + Moran’s I Spatial Autocorrelation\n# =========================================================\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(patchwork)\nlibrary(spdep)  # Moran’s I\nlibrary(sf)     # Spatial data\n\nset.seed(2025)\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\" Step 4 Supplement: Influential Point Diagnostics and Spatial Autocorrelation Test\\n\")\n\n Step 4 Supplement: Influential Point Diagnostics and Spatial Autocorrelation Test\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\n# === Load Data and Models ===\ndf &lt;- read_csv(\"file/opa_sales_step2_clean.csv\", show_col_types = FALSE)\nmodels &lt;- readRDS(\"file/ols_4models.rds\")\nmodel4 &lt;- models[[\"M4: +Interact+FE\"]]\n\ny_var &lt;- case_when(\n  \"sale_price_log\" %in% names(df) ~ \"sale_price_log\",\n  \"log_sale_price\" %in% names(df) ~ \"log_sale_price\",\n  \"sale_price\" %in% names(df) ~ \"sale_price\",\n  TRUE ~ NA_character_\n)\n\n\n# =========================================================\n# 1. Cook’s Distance – Influential Observation Detection\n# =========================================================\n\ncat(\"=== Cook’s Distance Analysis ===\\n\\n\")\n\n=== Cook’s Distance Analysis ===\n\n# Calculate Cook’s distance\ncooks_d &lt;- cooks.distance(model4)\nn &lt;- length(cooks_d)\nthreshold &lt;- 4/n  # Classic threshold\n\n# Identify influential points\ninfluential &lt;- which(cooks_d &gt; threshold)\ncat(sprintf(\"Sample size: %d\\n\", n))\n\nSample size: 24023\n\ncat(sprintf(\"Cook’s D threshold: %.6f (4/n)\\n\", threshold))\n\nCook’s D threshold: 0.000167 (4/n)\n\ncat(sprintf(\"Number of influential points: %d (%.2f%%)\\n\", length(influential), 100*length(influential)/n))\n\nNumber of influential points: 1060 (4.41%)\n\n# Save influential observations\nif (length(influential) &gt; 0) {\n  influential_data &lt;- df[influential, ] %&gt;%\n    mutate(\n      cooks_d = cooks_d[influential],\n      fitted = fitted(model4)[influential],\n      residual = residuals(model4)[influential]\n    ) %&gt;%\n    arrange(desc(cooks_d)) %&gt;%\n    head(100)  # Save Top 100\n  \n  write_csv(influential_data, \"file/influential_observations.csv\")\n  cat(\"  ✓ file/influential_observations.csv (Top 100 Influential Points)\\n\")\n  \n  # Display Top 10\n  cat(\"\\nTop 10 Influential Points:\\n\")\n  print(influential_data %&gt;% \n          select(parcel_number, sale_price, cooks_d, fitted, residual) %&gt;% \n          head(10), \n        n = 10)\n}\n\n  ✓ file/influential_observations.csv (Top 100 Influential Points)\n\nTop 10 Influential Points:\n# A tibble: 10 × 5\n   parcel_number sale_price cooks_d fitted residual\n   &lt;chr&gt;              &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;\n 1 211051105           9.39 0.00407   13.2    -3.84\n 2 071348000          15.0  0.00383   11.0     4.04\n 3 401237000          15.0  0.00343   11.6     3.44\n 4 401237400          15.0  0.00343   11.6     3.44\n 5 043166400          15.4  0.00335   11.6     3.85\n 6 041330100          15.4  0.00333   11.6     3.84\n 7 043055800          15.4  0.00329   11.6     3.82\n 8 381091300          14.7  0.00320   11.6     3.04\n 9 401220400          15.0  0.00311   11.8     3.28\n10 611317900           9.21 0.00303   13.3    -4.04\n\n# Visualize Cook’s Distance\ncooks_df &lt;- data.frame(\n  index = 1:n,\n  cooks_d = cooks_d,\n  influential = cooks_d &gt; threshold\n)\n\np_cooks &lt;- ggplot(cooks_df, aes(index, cooks_d, color = influential)) +\n  geom_point(alpha = 0.4, size = 0.8) +\n  geom_hline(yintercept = threshold, linetype = \"dashed\", color = \"#67001F\", linewidth = 1) +\n  scale_color_manual(\n    values = c(\"FALSE\" = \"#053061\", \"TRUE\" = \"#67001F\"),\n    labels = c(\"FALSE\" = \"Normal\", \"TRUE\" = \"Influential\"),\n    name = NULL\n  ) +\n  annotate(\"text\", x = n*0.8, y = threshold*1.2,\n           label = sprintf(\"Threshold = %.6f\", threshold),\n           color = \"#67001F\", size = 4) +\n  theme_minimal(base_size = 11) +\n  theme(\n    panel.grid.minor = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n    plot.subtitle = element_text(hjust = 0.5, size = 11),\n    legend.position = \"bottom\",\n    plot.background = element_rect(fill = \"white\", color = NA)\n  ) +\n  labs(\n    title = \"Cook’s Distance – Detection of Influential Observations\",\n    subtitle = sprintf(\"%d influential points (%.2f%% of data)\", \n                      length(influential), 100*length(influential)/n),\n    x = \"Observation Index\",\n    y = \"Cook’s Distance\",\n    caption = \"Threshold = 4/n (classic rule)\"\n  )\n\nif (!dir.exists(\"plot\")) dir.create(\"plot\")\nggsave(\"plot/cooks_distance.png\", p_cooks, width = 12, height = 6, dpi = 300, bg = \"white\")\ncat(\"\\n   plot/cooks_distance.png\\n\")\n\n\n   plot/cooks_distance.png\n\n\n\n# =========================================================\n# 2. Moran’s I – Spatial Autocorrelation Test\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\"=== Moran’s I Spatial Autocorrelation Test ===\\n\\n\")\n\n=== Moran’s I Spatial Autocorrelation Test ===\n\n# Check coordinates\nif (all(c(\"x_coord\", \"y_coord\") %in% names(df))) {\n  \n  # Prepare spatial data\n  df_spatial &lt;- df %&gt;%\n    filter(!is.na(x_coord), !is.na(y_coord)) %&gt;%\n    mutate(\n      residual = residuals(model4)[!is.na(x_coord) & !is.na(y_coord)],\n      sale_price_actual = .data[[y_var]]\n    ) %&gt;%\n    filter(!is.na(residual))\n  \n  # Convert to sf object\n  coords &lt;- df_spatial %&gt;% select(x_coord, y_coord)\n  coords_sf &lt;- st_as_sf(coords, coords = c(\"x_coord\", \"y_coord\"), crs = 2272)\n  \n  cat(sprintf(\"Valid samples: %d\\n\\n\", nrow(df_spatial)))\n  \n  # === 2.1 Moran’s I for Actual Sale Price ===\n  cat(\"--- Spatial Autocorrelation of Actual Sale Price ---\\n\")\n  \n  # Build spatial weight matrix (K-nearest neighbors, k=8)\n  nb_knn &lt;- knn2nb(knearneigh(coords_sf, k = 8))\n  listw_knn &lt;- nb2listw(nb_knn, style = \"W\")\n  \n  # Moran’s I test\n  moran_price &lt;- moran.test(df_spatial$sale_price_actual, listw_knn)\n  \n  cat(sprintf(\"  Moran’s I = %.4f\\n\", moran_price$estimate[1]))\n  cat(sprintf(\"  Expected = %.4f\\n\", moran_price$estimate[2]))\n  cat(sprintf(\"  Variance = %.6f\\n\", moran_price$estimate[3]))\n  cat(sprintf(\"  Z-score = %.4f\\n\", moran_price$statistic))\n  cat(sprintf(\"  p-value = %.4e\\n\", moran_price$p.value))\n  \n  if (moran_price$p.value &lt; 0.001) {\n    cat(\"  *** Highly significant positive spatial autocorrelation (p &lt; 0.001)\\n\")\n  } else if (moran_price$p.value &lt; 0.05) {\n    cat(\"  ** Significant positive spatial autocorrelation (p &lt; 0.05)\\n\")\n  } else {\n    cat(\"  No significant spatial autocorrelation detected\\n\")\n  }\n  \n  # === 2.2 Moran’s I for Residuals ===\n  cat(\"\\n--- Spatial Autocorrelation of Model 4 Residuals ---\\n\")\n  \n  moran_resid &lt;- moran.test(df_spatial$residual, listw_knn)\n  \n  cat(sprintf(\"  Moran’s I = %.4f\\n\", moran_resid$estimate[1]))\n  cat(sprintf(\"  Expected = %.4f\\n\", moran_resid$estimate[2]))\n  cat(sprintf(\"  Variance = %.6f\\n\", moran_resid$estimate[3]))\n  cat(sprintf(\"  Z-score = %.4f\\n\", moran_resid$statistic))\n  cat(sprintf(\"  p-value = %.4e\\n\", moran_resid$p.value))\n  \n  if (moran_resid$p.value &lt; 0.001) {\n    cat(\"  ️ Strong residual spatial autocorrelation detected (p &lt; 0.001)\\n\")\n    cat(\"  Suggestion: Consider Spatial Lag Model (SAR) or Spatial Error Model (SEM)\\n\")\n  } else if (moran_resid$p.value &lt; 0.05) {\n    cat(\"  ️ Residual spatial autocorrelation detected (p &lt; 0.05)\\n\")\n    cat(\"  Suggestion: Add more spatial variables or use spatial regression models\\n\")\n  } else {\n    cat(\"  ✓ No significant residual spatial autocorrelation – spatial effects well captured\\n\")\n  }\n  \n  # === 2.3 Moran Scatterplots ===\n  \n  # Calculate spatial lags\n  lag_price &lt;- lag.listw(listw_knn, df_spatial$sale_price_actual)\n  lag_resid &lt;- lag.listw(listw_knn, df_spatial$residual)\n  \n  # Standardize\n  price_std &lt;- scale(df_spatial$sale_price_actual)[,1]\n  lag_price_std &lt;- scale(lag_price)[,1]\n  resid_std &lt;- scale(df_spatial$residual)[,1]\n  lag_resid_std &lt;- scale(lag_resid)[,1]\n  \n  # Define quadrants\n  quadrant_price &lt;- case_when(\n    price_std &gt; 0 & lag_price_std &gt; 0 ~ \"HH (High-High)\",\n    price_std &lt; 0 & lag_price_std &lt; 0 ~ \"LL (Low-Low)\",\n    price_std &gt; 0 & lag_price_std &lt; 0 ~ \"HL (High-Low)\",\n    TRUE ~ \"LH (Low-High)\"\n  )\n  \n  quadrant_resid &lt;- case_when(\n    resid_std &gt; 0 & lag_resid_std &gt; 0 ~ \"HH\",\n    resid_std &lt; 0 & lag_resid_std &lt; 0 ~ \"LL\",\n    resid_std &gt; 0 & lag_resid_std &lt; 0 ~ \"HL\",\n    TRUE ~ \"LH\"\n  )\n  \n  moran_df_price &lt;- data.frame(\n    value = price_std,\n    lag_value = lag_price_std,\n    quadrant = quadrant_price\n  )\n  \n  moran_df_resid &lt;- data.frame(\n    value = resid_std,\n    lag_value = lag_resid_std,\n    quadrant = quadrant_resid\n  )\n  \n  # Plot – Sale Price\n  p_moran_price &lt;- ggplot(moran_df_price, aes(value, lag_value, color = quadrant)) +\n    geom_point(alpha = 0.4, size = 1) +\n    geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n    geom_smooth(aes(group = 1), method = \"lm\", se = FALSE, \n                color = \"#67001F\", linewidth = 1.2) +\n    scale_color_manual(\n      values = c(\"HH (High-High)\" = \"#67001F\", \n                 \"LL (Low-Low)\" = \"#053061\",\n                 \"HL (High-Low)\" = \"#F4A582\",\n                 \"LH (Low-High)\" = \"#92C5DE\"),\n      name = \"Quadrant\"\n    ) +\n    annotate(\"text\", x = -3, y = 3, \n             label = sprintf(\"Moran’s I = %.4f***\", moran_price$estimate[1]),\n             size = 5, fontface = \"bold\", color = \"#67001F\") +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      plot.subtitle = element_text(hjust = 0.5, size = 11),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(\n      title = \"Moran’s I Scatter Plot – Sale Price\",\n      subtitle = \"Strong positive spatial autocorrelation\",\n      x = \"Standardized Sale Price\",\n      y = \"Spatial Lag (Average of Neighbors)\"\n    )\n  \n  # Plot – Residuals\n  p_moran_resid &lt;- ggplot(moran_df_resid, aes(value, lag_value, color = quadrant)) +\n    geom_point(alpha = 0.4, size = 1) +\n    geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n    geom_vline(xintercept = 0, linetype = \"dashed\", color = \"gray50\") +\n    geom_smooth(aes(group = 1), method = \"lm\", se = FALSE, \n                color = \"#67001F\", linewidth = 1.2) +\n    scale_color_manual(\n      values = c(\"HH\" = \"#67001F\", \"LL\" = \"#053061\",\n                 \"HL\" = \"#F4A582\", \"LH\" = \"#92C5DE\"),\n      name = \"Quadrant\"\n    ) +\n    annotate(\"text\", x = -3, y = 3, \n             label = sprintf(\"Moran’s I = %.4f%s\", \n                           moran_resid$estimate[1],\n                           ifelse(moran_resid$p.value &lt; 0.001, \"***\",\n                                  ifelse(moran_resid$p.value &lt; 0.05, \"**\", \"\"))),\n             size = 5, fontface = \"bold\", \n             color = ifelse(moran_resid$p.value &lt; 0.05, \"#67001F\", \"gray50\")) +\n    theme_minimal(base_size = 11) +\n    theme(\n      panel.grid.minor = element_blank(),\n      plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14),\n      plot.subtitle = element_text(hjust = 0.5, size = 11),\n      legend.position = \"right\",\n      plot.background = element_rect(fill = \"white\", color = NA)\n    ) +\n    labs(\n      title = \"Moran’s I Scatter Plot – Model 4 Residuals\",\n      subtitle = ifelse(moran_resid$p.value &lt; 0.05, \n                       \"Residual spatial autocorrelation detected\",\n                       \"No significant residual spatial autocorrelation\"),\n      x = \"Standardized Residual\",\n      y = \"Spatial Lag (Average of Neighbors)\"\n    )\n  \n  # Combine plots\n  p_moran_combined &lt;- (p_moran_price | p_moran_resid) +\n    plot_annotation(\n      title = \"Spatial Autocorrelation Analysis (Moran’s I)\",\n      subtitle = \"Left: Original prices show strong clustering | Right: Model residuals\",\n      theme = theme(\n        plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 12, hjust = 0.5),\n        plot.background = element_rect(fill = \"white\", color = NA)\n      )\n    )\n  \n  ggsave(\"plot/morans_i_scatter.png\", p_moran_combined, \n         width = 16, height = 7, dpi = 300, bg = \"white\")\n  cat(\"\\n   plot/morans_i_scatter.png\\n\")\n  \n  # Save Moran’s I results\n  moran_summary &lt;- data.frame(\n    Variable = c(\"Sale Price\", \"Model 4 Residuals\"),\n    Morans_I = c(moran_price$estimate[1], moran_resid$estimate[1]),\n    Expected = c(moran_price$estimate[2], moran_resid$estimate[2]),\n    Variance = c(moran_price$estimate[3], moran_resid$estimate[3]),\n    Z_score = c(moran_price$statistic, moran_resid$statistic),\n    P_value = c(moran_price$p.value, moran_resid$p.value),\n    Significant = c(moran_price$p.value &lt; 0.05, moran_resid$p.value &lt; 0.05)\n  )\n  \n  write_csv(moran_summary, \"file/morans_i_results.csv\")\n  cat(\"  ✓ file/morans_i_results.csv\\n\")\n  \n} else {\n  cat(\" Missing coordinate data – Moran’s I test cannot be performed\\n\")\n}\n\nValid samples: 24023\n\n--- Spatial Autocorrelation of Actual Sale Price ---\n\n\n  Moran’s I = 0.5328\n  Expected = -0.0000\n  Variance = 0.000009\n  Z-score = 175.1095\n  p-value = 0.0000e+00\n  *** Highly significant positive spatial autocorrelation (p &lt; 0.001)\n\n--- Spatial Autocorrelation of Model 4 Residuals ---\n  Moran’s I = 0.0820\n  Expected = -0.0000\n  Variance = 0.000009\n  Z-score = 26.9827\n  p-value = 1.1797e-160\n  ️ Strong residual spatial autocorrelation detected (p &lt; 0.001)\n  Suggestion: Consider Spatial Lag Model (SAR) or Spatial Error Model (SEM)\n\n\n\n   plot/morans_i_scatter.png\n  ✓ file/morans_i_results.csv\n\n\n\n# =========================================================\n# Summary\n# =========================================================\n\ncat(\"\\n\", rep(\"=\", 80), \"\\n\", sep = \"\")\n\n\n================================================================================\n\ncat(\" Step 4 Supplement Completed\\n\")\n\n Step 4 Supplement Completed\n\ncat(rep(\"=\", 80), \"\\n\\n\")\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = \n\ncat(\" Output Files:\\n\\n\")\n\n Output Files:\n\ncat(\"Tables:\\n\")\n\nTables:\n\nif (exists(\"influential_data\")) {\n  cat(\"  • file/influential_observations.csv – List of influential observations\\n\")\n}\n\n  • file/influential_observations.csv – List of influential observations\n\nif (exists(\"moran_summary\")) {\n  cat(\"  • file/morans_i_results.csv – Moran’s I test results\\n\")\n}\n\n  • file/morans_i_results.csv – Moran’s I test results\n\ncat(\"\\nFigures:\\n\")\n\n\nFigures:\n\ncat(\"  • plot/cooks_distance.png – Cook’s Distance Scatter Plot\\n\")\n\n  • plot/cooks_distance.png – Cook’s Distance Scatter Plot\n\nif (exists(\"p_moran_combined\")) {\n  cat(\"  • plot/morans_i_scatter.png – Moran’s I Scatter Plot\\n\")\n}\n\n  • plot/morans_i_scatter.png – Moran’s I Scatter Plot\n\ncat(\"\\n Key Findings:\\n\")\n\n\n Key Findings:\n\nif (exists(\"moran_resid\")) {\n  if (moran_resid$p.value &lt; 0.05) {\n    cat(\"  ️ Significant spatial autocorrelation detected in residuals\\n\")\n    cat(\"     → The model did not fully capture spatial effects\\n\")\n    cat(\"     → Suggest using spatial econometric models (SAR/SEM)\\n\")\n  } else {\n    cat(\"   No significant spatial autocorrelation in residuals\\n\")\n    cat(\"     → Fixed effects adequately controlled for spatial dependence\\n\")\n  }\n}\n\n  ️ Significant spatial autocorrelation detected in residuals\n     → The model did not fully capture spatial effects\n     → Suggest using spatial econometric models (SAR/SEM)\n\ncat(\"\\n\")\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(forcats)\nlibrary(patchwork)\n\n# tidytext\nif (!require(\"tidytext\", quietly = TRUE)) {\n  reorder_within &lt;- function(x, by, within, fun = mean, sep = \"___\", ...) {\n    new_x &lt;- paste(x, within, sep = sep)\n    stats::reorder(new_x, by, FUN = fun)\n  }\n  \n  scale_x_reordered &lt;- function(..., sep = \"___\") {\n    reg &lt;- paste0(sep, \".+$\")\n    ggplot2::scale_x_discrete(labels = function(x) gsub(reg, \"\", x), ...)\n  }\n  \n  scale_y_reordered &lt;- function(..., sep = \"___\") {\n    reg &lt;- paste0(sep, \".+$\")\n    ggplot2::scale_y_discrete(labels = function(x) gsub(reg, \"\", x), ...)\n  }\n} else {\n  library(tidytext)\n}\n\n\n# Read data\ndf &lt;- read_csv(\"./table/feature_importance_all_models.csv\", show_col_types = FALSE)\n\n# Data cleaning\ndf &lt;- df %&gt;%\n  mutate(\n    estimate = as.numeric(estimate),\n    abs_estimate = as.numeric(abs_estimate)\n  )\n\n# Variable classification\ndf &lt;- df %&gt;%\n  mutate(\n    var_type = case_when(\n      grepl(\"census_tract|zip_code\", term) ~ \"Location Fixed Effects\",\n      grepl(\"income|POVERTY\", term) ~ \"Socioeconomic\",\n      grepl(\"bathroom|bedroom|livable_area\", term) ~ \"Structural\",\n      grepl(\"age\", term) ~ \"Age\",\n      grepl(\"coord|dist\", term) ~ \"Spatial\",\n      TRUE ~ \"Other\"\n    ),\n    # Clean variable names\n    term_clean = case_when(\n      term == \"number_of_bathrooms\" ~ \"Bathrooms\",\n      term == \"number_of_bedrooms\" ~ \"Bedrooms\",\n      term == \"total_livable_area\" ~ \"Livable Area\",\n      term == \"per_cap_incomeE\" ~ \"Per Capita Income\",\n      term == \"median_incomeE\" ~ \"Median Income\",\n      term == \"PCTPOVERTY\" ~ \"Poverty Rate\",\n      term == \"age2\" ~ \"Age²\",\n      term == \"dist_to_center\" ~ \"Distance to Center\",\n      term == \"x_coord\" ~ \"X Coordinate\",\n      term == \"y_coord\" ~ \"Y Coordinate\",\n      grepl(\"census_tract\", term) ~ gsub(\"census_tract\", \"Census Tract \", term),\n      grepl(\"zip_code\", term) ~ gsub(\"zip_code\", \"ZIP \", term),\n      TRUE ~ term\n    )\n  )\n\n# Keep only top 10 most important variables per model\ntop_features &lt;- df %&gt;%\n  group_by(Model) %&gt;%\n  slice_max(abs_estimate, n = 10) %&gt;%\n  ungroup()\n\n# Color palette (deep blue to deep red)\ncolor_palette &lt;- c(\n  \"Structural\" = \"#67001F\",        # deep red\n  \"Socioeconomic\" = \"#4393C3\",     # medium blue  \n  \"Age\" = \"#2166AC\",               # darker blue\n  \"Spatial\" = \"#053061\",           # darkest blue\n  \"Location Fixed Effects\" = \"#D6604D\"  # reddish tone\n)\n\ncat(\"Generating visualization (using deep blue–deep red palette)...\\n\\n\")\n\nGenerating visualization (using deep blue–deep red palette)...\n\n\n\n# ========== Figure 1: Lollipop Chart ==========\ncat(\"  Generating Figure 1: Lollipop chart...\\n\")\n\n  Generating Figure 1: Lollipop chart...\n\np1 &lt;- ggplot(top_features, aes(x = reorder_within(term_clean, abs_estimate, Model), \n                                y = abs_estimate, color = var_type)) +\n  geom_segment(aes(xend = reorder_within(term_clean, abs_estimate, Model), yend = 0), \n               size = 1.2, alpha = 0.7) +\n  geom_point(size = 4, alpha = 0.9) +\n  coord_flip() +\n  facet_wrap(~Model, scales = \"free_y\", ncol = 2) +\n  scale_x_reordered() +\n  scale_color_manual(values = color_palette, name = \"Feature Type\") +\n  labs(\n    title = \"Feature Importance Across Progressive Models\",\n    subtitle = \"Lollipop chart showing top 10 features per model\",\n    x = NULL,\n    y = \"Absolute Coefficient\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, color = \"gray40\"),\n    strip.text = element_text(face = \"bold\", size = 11),\n    strip.background = element_rect(fill = \"gray95\", color = NA),\n    legend.position = \"bottom\",\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_line(color = \"gray90\", size = 0.3),\n    axis.text.y = element_text(size = 9),\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  )\n\nggsave(\"plot/feature_importance_lollipop_v2.png\", p1, \n       width = 14, height = 10, dpi = 300, bg = \"white\")\n\ncat(\"    ✓ Saved to: plot/feature_importance_lollipop_v2.png\\n\")\n\n    ✓ Saved to: plot/feature_importance_lollipop_v2.png\n\n\n\n# ========== Figure 2: Heatmap ==========\ncat(\"  Generating Figure 2: Heatmap...\\n\")\n\n  Generating Figure 2: Heatmap...\n\nheatmap_data &lt;- df %&gt;%\n  group_by(Model) %&gt;%\n  slice_max(abs_estimate, n = 8) %&gt;%\n  ungroup() %&gt;%\n  mutate(Model_short = gsub(\"M[0-9]: \", \"\", Model))\n\np2 &lt;- ggplot(heatmap_data, aes(x = Model_short, y = fct_reorder(term_clean, abs_estimate), \n                                fill = abs_estimate)) +\n  geom_tile(color = \"white\", size = 1) +\n  geom_text(aes(label = sprintf(\"%.3f\", abs_estimate)), \n            color = \"white\", size = 3.5, fontface = \"bold\") +\n  scale_fill_gradient2(\n    low = \"#053061\", mid = \"#F7F7F7\", high = \"#67001F\",\n    midpoint = median(heatmap_data$abs_estimate),\n    name = \"Coefficient\\nMagnitude\"\n  ) +\n  labs(\n    title = \"Feature Importance Heatmap Across Models\",\n    subtitle = \"Top 8 features per model (darker = stronger effect)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16, hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, color = \"gray40\"),\n    axis.text.x = element_text(angle = 45, hjust = 1, face = \"bold\", size = 11),\n    axis.text.y = element_text(size = 10),\n    legend.position = \"right\",\n    panel.grid = element_blank(),\n    plot.background = element_rect(fill = \"white\", color = NA),\n    panel.background = element_rect(fill = \"white\", color = NA)\n  )\n\nggsave(\"plot/feature_importance_heatmap_v2.png\", p2, \n       width = 12, height = 8, dpi = 300, bg = \"white\")\n\ncat(\"    ✓ Saved to: plot/feature_importance_heatmap_v2.png\\n\")\n\n    ✓ Saved to: plot/feature_importance_heatmap_v2.png\n\n\n\n# ========== Figure 3: Nightingale Rose Chart ==========\ncat(\"  Generating Figure 3: Nightingale rose chart...\\n\")\n\n  Generating Figure 3: Nightingale rose chart...\n\nmodels &lt;- unique(top_features$Model)\n\nrose_plots &lt;- lapply(models, function(m) {\n  data_m &lt;- top_features %&gt;%\n    filter(Model == m) %&gt;%\n    arrange(desc(abs_estimate)) %&gt;%\n    head(8) %&gt;%\n    mutate(term_clean = factor(term_clean, levels = term_clean))\n  \n  ggplot(data_m, aes(x = term_clean, y = abs_estimate, fill = abs_estimate)) +\n    geom_col(width = 1, alpha = 0.9, color = \"white\", size = 0.5) +\n    coord_polar(theta = \"x\") +\n    scale_fill_gradient2(\n      low = \"#4393C3\", mid = \"#F7F7F7\", high = \"#67001F\",\n      midpoint = median(data_m$abs_estimate),\n      name = \"Importance\"\n    ) +\n    labs(title = m, x = NULL, y = NULL) +\n    theme_minimal(base_size = 10) +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5, size = 11),\n      axis.text.y = element_blank(),\n      axis.text.x = element_text(size = 12, face = \"bold\"),\n      panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n      panel.grid.minor = element_blank(),\n      legend.position = \"none\",\n      plot.background = element_rect(fill = \"white\", color = NA),\n      panel.background = element_rect(fill = \"white\", color = NA)\n    )\n})\n\np3 &lt;- wrap_plots(rose_plots, ncol = 2) +\n  plot_annotation(\n    title = \"Feature Importance: Nightingale Rose Chart\",\n    subtitle = \"Top 8 features visualized as rose petals (larger petal = more important)\",\n    theme = theme(\n      plot.title = element_text(face = \"bold\", size = 18, hjust = 0.5),\n      plot.subtitle = element_text(size = 13, hjust = 0.5, color = \"gray40\"),\n      plot.background = element_rect(fill = \"white\", color = NA)\n    )\n  )\n\nggsave(\"plot/feature_importance_rose_v2.png\", p3, \n       width = 14, height = 12, dpi = 300, bg = \"white\")\n\ncat(\"     Saved to: plot/feature_importance_rose_v2.png\\n\")\n\n     Saved to: plot/feature_importance_rose_v2.png\n\n\n\n# Print Summary\ncat(\"\\n==============================================\\n\")\n\n\n==============================================\n\ncat(\"🎨 All visualizations have been successfully generated! (Deep Blue–Red Palette)\\n\")\n\n🎨 All visualizations have been successfully generated! (Deep Blue–Red Palette)\n\ncat(\"==============================================\\n\\n\")\n\n==============================================\n\ncat(\"📊 Generated Figures:\\n\")\n\n📊 Generated Figures:\n\ncat(\"  1. feature_importance_lollipop_v2.png  - Lollipop Chart\\n\")\n\n  1. feature_importance_lollipop_v2.png  - Lollipop Chart\n\ncat(\"  2. feature_importance_heatmap_v2.png   - Heatmap\\n\")\n\n  2. feature_importance_heatmap_v2.png   - Heatmap\n\ncat(\"  3. feature_importance_rose_v2.png      - Nightingale Rose Chart\\n\\n\")\n\n  3. feature_importance_rose_v2.png      - Nightingale Rose Chart\n\ncat(\"🎨 Color Palette (following Moran's I visualization):\\n\")\n\n🎨 Color Palette (following Moran's I visualization):\n\ncat(\"  • Structural: Deep Red (#67001F)\\n\")\n\n  • Structural: Deep Red (#67001F)\n\ncat(\"  • Socioeconomic: Deep Blue (#4393C3)\\n\")\n\n  • Socioeconomic: Deep Blue (#4393C3)\n\ncat(\"  • Age: Darker Blue (#2166AC)\\n\")\n\n  • Age: Darker Blue (#2166AC)\n\ncat(\"  • Spatial: Deepest Blue (#053061)\\n\")\n\n  • Spatial: Deepest Blue (#053061)\n\ncat(\"  • Location FE: Reddish Tone (#D6604D)\\n\\n\")\n\n  • Location FE: Reddish Tone (#D6604D)"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html",
    "href": "labs/lab_4/week4_inclass_practice.html",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "",
    "text": "library(sf)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(here)\n# Set Census API key\ncensus_api_key(\"42bf8a20a3df1def380f330cf7edad0dd5842ce6\")\n\n# Load the data (same as lecture)\npa_counties &lt;- st_read(\"./data/Pennsylvania_County_Boundaries.shp\")\n\nReading layer `Pennsylvania_County_Boundaries' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\Pennsylvania_County_Boundaries.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 67 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8963377 ymin: 4825316 xmax: -8314404 ymax: 5201413\nProjected CRS: WGS 84 / Pseudo-Mercator\n\ndistricts &lt;- st_read(\"./data/districts.geojson\")\n\nReading layer `U.S._Congressional_Districts_for_Pennsylvania' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\districts.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 17 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -80.51939 ymin: 39.71986 xmax: -74.68956 ymax: 42.26935\nGeodetic CRS:  WGS 84\n\nhospitals &lt;- st_read(\"./data/hospitals.geojson\")\n\nReading layer `hospitals' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\hospitals.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 223 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -80.49621 ymin: 39.75163 xmax: -74.86704 ymax: 42.13403\nGeodetic CRS:  WGS 84\n\ncensus_tracts &lt;- tracts(state = \"PA\", cb = TRUE)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======================================================================| 100%\n\nmetro_areas &lt;- core_based_statistical_areas(cb = TRUE)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Standardize CRS\nhospitals &lt;- st_transform(hospitals, st_crs(pa_counties))\ncensus_tracts &lt;- st_transform(census_tracts, st_crs(pa_counties))\nmetro_areas &lt;- st_transform(metro_areas, st_crs(pa_counties))\ndistricts &lt;- st_transform(districts, st_crs(census_tracts))"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#setup",
    "href": "labs/lab_4/week4_inclass_practice.html#setup",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "",
    "text": "library(sf)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(patchwork)\nlibrary(here)\n# Set Census API key\ncensus_api_key(\"42bf8a20a3df1def380f330cf7edad0dd5842ce6\")\n\n# Load the data (same as lecture)\npa_counties &lt;- st_read(\"./data/Pennsylvania_County_Boundaries.shp\")\n\nReading layer `Pennsylvania_County_Boundaries' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\Pennsylvania_County_Boundaries.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 67 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8963377 ymin: 4825316 xmax: -8314404 ymax: 5201413\nProjected CRS: WGS 84 / Pseudo-Mercator\n\ndistricts &lt;- st_read(\"./data/districts.geojson\")\n\nReading layer `U.S._Congressional_Districts_for_Pennsylvania' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\districts.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 17 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -80.51939 ymin: 39.71986 xmax: -74.68956 ymax: 42.26935\nGeodetic CRS:  WGS 84\n\nhospitals &lt;- st_read(\"./data/hospitals.geojson\")\n\nReading layer `hospitals' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\labs\\lab_4\\data\\hospitals.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 223 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -80.49621 ymin: 39.75163 xmax: -74.86704 ymax: 42.13403\nGeodetic CRS:  WGS 84\n\ncensus_tracts &lt;- tracts(state = \"PA\", cb = TRUE)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |======================================================================| 100%\n\nmetro_areas &lt;- core_based_statistical_areas(cb = TRUE)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Standardize CRS\nhospitals &lt;- st_transform(hospitals, st_crs(pa_counties))\ncensus_tracts &lt;- st_transform(census_tracts, st_crs(pa_counties))\nmetro_areas &lt;- st_transform(metro_areas, st_crs(pa_counties))\ndistricts &lt;- st_transform(districts, st_crs(census_tracts))"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#exercise-1-find-your-countys-neighbors-10-minutes",
    "href": "labs/lab_4/week4_inclass_practice.html#exercise-1-find-your-countys-neighbors-10-minutes",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Exercise 1: Find Your County’s Neighbors (10 minutes)",
    "text": "Exercise 1: Find Your County’s Neighbors (10 minutes)\nGoal: Practice spatial filtering with different predicates\n\n1.1 Pick a Pennsylvania County\nYour Task: Choose any PA county and find all counties that border it.\n\n# Step 1: Look at available county names\nunique(pa_counties$COUNTY_NAM)\n\n [1] \"MONTGOMERY\"     \"BRADFORD\"       \"BUCKS\"          \"TIOGA\"         \n [5] \"UNION\"          \"VENANGO\"        \"WASHINGTON\"     \"WAYNE\"         \n [9] \"MCKEAN\"         \"MERCER\"         \"MIFFLIN\"        \"MONTOUR\"       \n[13] \"NORTHAMPTON\"    \"NORTHUMBERLAND\" \"PERRY\"          \"PIKE\"          \n[17] \"POTTER\"         \"SCHUYLKILL\"     \"SNYDER\"         \"SOMERSET\"      \n[21] \"SULLIVAN\"       \"LEBANON\"        \"BUTLER\"         \"CAMBRIA\"       \n[25] \"CAMERON\"        \"CARBON\"         \"CENTRE\"         \"CLARION\"       \n[29] \"CLEARFIELD\"     \"CLINTON\"        \"COLUMBIA\"       \"CRAWFORD\"      \n[33] \"CUMBERLAND\"     \"DAUPHIN\"        \"INDIANA\"        \"JEFFERSON\"     \n[37] \"JUNIATA\"        \"LANCASTER\"      \"WESTMORELAND\"   \"WYOMING\"       \n[41] \"YORK\"           \"PHILADELPHIA\"   \"LEHIGH\"         \"LUZERNE\"       \n[45] \"LYCOMING\"       \"LAWRENCE\"       \"DELAWARE\"       \"ELK\"           \n[49] \"ERIE\"           \"FAYETTE\"        \"FOREST\"         \"FRANKLIN\"      \n[53] \"FULTON\"         \"GREENE\"         \"HUNTINGDON\"     \"ADAMS\"         \n[57] \"ALLEGHENY\"      \"ARMSTRONG\"      \"BEAVER\"         \"BEDFORD\"       \n[61] \"BLAIR\"          \"SUSQUEHANNA\"    \"WARREN\"         \"BERKS\"         \n[65] \"CHESTER\"        \"MONROE\"         \"LACKAWANNA\"    \n\n# Step 2: Pick one county (change this to your choice!)\nmy_county &lt;- pa_counties %&gt;%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change \"CENTRE\" to your county\n\n# Step 3: Find neighbors using st_touches\nmy_neighbors &lt;- pa_counties %&gt;%\n  st_filter(my_county, .predicate = st_touches)\n\n# Step 4: How many neighbors does your county have?\ncat(\"Number of neighboring counties:\", nrow(my_neighbors), \"\\n\")\n\nNumber of neighboring counties: 6 \n\nprint(\"Neighbor names:\")\n\n[1] \"Neighbor names:\"\n\nprint(my_neighbors$COUNTY_NAM)\n\n[1] \"UNION\"      \"MIFFLIN\"    \"CLEARFIELD\" \"CLINTON\"    \"HUNTINGDON\"\n[6] \"BLAIR\"     \n\n\n\n\n1.2 Map Your Results\nYour Task: Create a map showing your county and its neighbors in different colors.\n\n# Create the map\nggplot() +\n  geom_sf(data = pa_counties, fill = \"lightgray\", color = \"white\") +\n  geom_sf(data = my_neighbors, fill = \"lightblue\", alpha = 0.7) +\n  geom_sf(data = my_county, fill = \"darkblue\") +\n  labs(\n    title = paste(\"Neighbors of\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = paste(nrow(my_neighbors), \"neighboring counties\")\n  ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n1.3 Challenge: Compare with st_intersects\nYour Task: What happens if you use st_intersects instead of st_touches? Why is the count different?\n\n# Use st_intersects\nintersecting_counties &lt;- pa_counties %&gt;%\n  st_filter(my_county, .predicate = st_intersects)\n\ncat(\"With st_touches:\", nrow(my_neighbors), \"counties\\n\")\n\nWith st_touches: 6 counties\n\ncat(\"With st_intersects:\", nrow(intersecting_counties), \"counties\\n\")\n\nWith st_intersects: 7 counties\n\ncat(\"Difference:\", nrow(intersecting_counties) - nrow(my_neighbors), \"\\n\")\n\nDifference: 1 \n\n\nQuestion: Why is there a difference of 1? What does this tell you about the difference between st_touches and st_intersects?"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#exercise-2-hospital-service-areas-15-minutes",
    "href": "labs/lab_4/week4_inclass_practice.html#exercise-2-hospital-service-areas-15-minutes",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Exercise 2: Hospital Service Areas (15 minutes)",
    "text": "Exercise 2: Hospital Service Areas (15 minutes)\nGoal: Practice buffering and measuring accessibility\n\n2.1 Create Hospital Service Areas\nYour Task: Create 15-mile (24140 meter) service areas around all hospitals in your county.\n\n# Step 1: Filter hospitals in your county\n# First do a spatial join to assign counties to hospitals\nhospitals_with_county &lt;- hospitals %&gt;%\n  st_join(pa_counties %&gt;% select(COUNTY_NAM))\n\n# Filter for your county's hospitals\nmy_county_hospitals &lt;- hospitals_with_county %&gt;%\n  filter(COUNTY_NAM == \"CENTRE\")  # Change to match your county\n\ncat(\"Number of hospitals in county:\", nrow(my_county_hospitals), \"\\n\")\n\nNumber of hospitals in county: 3 \n\n# Step 2: Project to accurate CRS for buffering\nmy_county_hospitals_proj &lt;- my_county_hospitals %&gt;%\n  st_transform(3365)  # Pennsylvania State Plane South\n\n# Step 3: Create 15-mile buffers (24140 meters = 15 miles)\nhospital_service_areas &lt;- my_county_hospitals_proj %&gt;%\n  st_buffer(dist = 79200)  # 15 miles in feet for PA State Plane\n\n# Step 4: Transform back for mapping\nhospital_service_areas &lt;- st_transform(hospital_service_areas, st_crs(pa_counties))\n\n\n\n2.2 Map Service Coverage\nYour Task: Create a map showing hospitals and their service areas.\n\nggplot() +\n  geom_sf(data = my_county, fill = \"white\", color = \"gray\") +\n  geom_sf(data = hospital_service_areas, fill = \"lightblue\", alpha = 0.4) +\n  geom_sf(data = my_county_hospitals, color = \"red\", size = 2) +\n  labs(\n    title = paste(\"Hospital Service Areas in\", my_county$COUNTY_NAM[1], \"County\"),\n    subtitle = \"Red points = Hospitals, Blue areas = 15-mile service zones\"\n  ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n2.3 Calculate Coverage\nYour Task: What percentage of your county is within 15 miles of a hospital?\n\n# Union all service areas into one polygon\ncombined_service_area &lt;- hospital_service_areas %&gt;%\n  st_union()\n\n# Calculate areas (need to be in projected CRS)\nmy_county_proj &lt;- st_transform(my_county, 3365)\ncombined_service_proj &lt;- st_transform(combined_service_area, 3365)\n\n# Find intersection\ncoverage_area &lt;- st_intersection(my_county_proj, combined_service_proj)\n\n# Calculate percentages\ncounty_area &lt;- as.numeric(st_area(my_county_proj))\ncovered_area &lt;- as.numeric(st_area(coverage_area))\ncoverage_pct &lt;- (covered_area / county_area) * 100\n\ncat(\"County area:\", round(county_area / 1e6, 1), \"sq km\\n\")\n\nCounty area: 30993.6 sq km\n\ncat(\"Covered area:\", round(covered_area / 1e6, 1), \"sq km\\n\")\n\nCovered area: 19205.1 sq km\n\ncat(\"Coverage:\", round(coverage_pct, 1), \"%\\n\")\n\nCoverage: 62 %\n\n\nQuestion: Is your county well-served by hospitals? What areas might be underserved?"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#exercise-3-congressional-district-analysis-15-minutes",
    "href": "labs/lab_4/week4_inclass_practice.html#exercise-3-congressional-district-analysis-15-minutes",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Exercise 3: Congressional District Analysis (15 minutes)",
    "text": "Exercise 3: Congressional District Analysis (15 minutes)\nGoal: Practice spatial joins and aggregation\n\n4.1 Join Districts to Counties\nYour Task: Figure out which congressional districts overlap with each county.\n\n# Spatial join: districts to counties\ndistricts_by_county &lt;- districts %&gt;%\n  st_join(pa_counties %&gt;% select(COUNTY_NAM)) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(COUNTY_NAM) %&gt;%\n  summarize(\n    n_districts = n_distinct(OBJECTID),\n    district_ids = paste(unique(MSLINK), collapse = \", \")\n  ) %&gt;%\n  arrange(desc(n_districts))\n\n# Which counties have the most districts?\nhead(districts_by_county, 10)\n\n# A tibble: 10 × 3\n   COUNTY_NAM   n_districts district_ids            \n   &lt;chr&gt;              &lt;int&gt; &lt;chr&gt;                   \n 1 MONTGOMERY             7 19, 2, 14, 20, 4, 15, 21\n 2 BERKS                  6 8, 19, 2, 14, 4, 5      \n 3 ALLEGHENY              5 11, 12, 17, 1, 7        \n 4 PHILADELPHIA           5 19, 14, 20, 15, 21      \n 5 WESTMORELAND           5 11, 12, 17, 3, 7        \n 6 BUCKS                  4 19, 2, 14, 20           \n 7 CHESTER                4 14, 4, 5, 15            \n 8 DAUPHIN                4 8, 3, 5, 6              \n 9 JUNIATA                4 8, 12, 3, 6             \n10 LANCASTER              4 8, 4, 5, 6              \n\n\n\n\n4.2 Calculate District Statistics\nYour Task: Get demographic data for census tracts and aggregate to districts.\n\n# Get tract-level demographics\ntract_demographics &lt;- get_acs(\n  geography = \"tract\",\n  variables = c(\n    total_pop = \"B01003_001\",\n    median_income = \"B19013_001\",\n    white_pop = \"B03002_003\",\n    black_pop = \"B03002_004\",\n    hispanic_pop = \"B03002_012\"\n  ),\n  state = \"PA\",\n  year = 2022,\n  output = \"wide\"\n)\n\n# Join to tract boundaries\ntracts_with_data &lt;- census_tracts %&gt;%\n  left_join(tract_demographics, by = \"GEOID\")\n\n# Spatial join to districts and aggregate\ndistrict_demographics &lt;- tracts_with_data %&gt;%\n  st_join(districts) %&gt;%\n  st_drop_geometry() %&gt;%\n  group_by(OBJECTID, MSLINK) %&gt;%\n  summarize(\n    total_population = sum(total_popE, na.rm = TRUE),\n    median_income = weighted.mean(median_incomeE, total_popE, na.rm = TRUE),\n    pct_white = sum(white_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_black = sum(black_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    pct_hispanic = sum(hispanic_popE, na.rm = TRUE) / sum(total_popE, na.rm = TRUE) * 100,\n    n_tracts = n()\n  ) %&gt;%\n  arrange(desc(total_population))\n\n# Show results\nhead(district_demographics, 10)\n\n# A tibble: 10 × 8\n# Groups:   OBJECTID [10]\n   OBJECTID MSLINK total_population median_income pct_white pct_black\n      &lt;int&gt;  &lt;int&gt;            &lt;dbl&gt;         &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n 1      113     14          1229246       107602.      72.0     11.0 \n 2      108     11          1010001        76612.      76.6     13.4 \n 3      120      7          1006212        88796.      83.3      8.15\n 4      107      8           993966        70241.      88.7      2.24\n 5      117      3           986114        69017.      91.0      2.25\n 6      109     12           979419        63952.      92.2      1.81\n 7      118      4           974715       111250.      73.0      5.00\n 8      114     17           972225        71139.      91.8      2.75\n 9      110     19           932212       113798.      80.7      3.79\n10      123      6           927718        80080.      75.6      8.65\n# ℹ 2 more variables: pct_hispanic &lt;dbl&gt;, n_tracts &lt;int&gt;\n\n\n\n\n4.3 Map District Demographics\nYour Task: Create a choropleth map of median income by congressional district.\n\n# Join demographics back to district boundaries\ndistricts_with_demographics &lt;- districts %&gt;%\n  left_join(district_demographics, by = \"OBJECTID\")\n\n# Create the map\nggplot(districts_with_demographics) +\n  geom_sf(aes(fill = median_income), color = \"white\", size = 0.5) +\n  scale_fill_viridis_c(\n    name = \"Median\\nIncome\",\n    labels = dollar,\n    option = \"plasma\"\n  ) +\n  labs(\n    title = \"Median Household Income by Congressional District\",\n    subtitle = \"Pennsylvania\",\n    caption = \"Source: ACS 2018-2022\"\n  ) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n4.4 Challenge: Find Diverse Districts\nYour Task: Which districts are the most racially diverse?\n\n# Calculate diversity index (simple version: higher = more diverse)\n# A perfectly even distribution would be ~33% each for 3 groups\ndistrict_demographics &lt;- district_demographics %&gt;%\n  mutate(\n    diversity_score = 100 - abs(pct_white - 33.3) - abs(pct_black - 33.3) - abs(pct_hispanic - 33.3)\n  ) %&gt;%\n  arrange(desc(diversity_score))\n\n# Most diverse districts\nhead(district_demographics %&gt;% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n\n# A tibble: 5 × 6\n# Groups:   OBJECTID [5]\n  OBJECTID MSLINK pct_white pct_black pct_hispanic diversity_score\n     &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;\n1      115     20      37.9     25.4         23.7             77.8\n2      122     21      33.5     49.7          5.73            55.9\n3      121     15      58.8     24.4          5.77            38.1\n4      111      2      71.2      4.88        18.3             18.7\n5      113     14      72.0     11.0          7.09            12.8\n\n# Least diverse districts\ntail(district_demographics %&gt;% select(MSLINK, pct_white, pct_black, pct_hispanic, diversity_score), 5)\n\n# A tibble: 5 × 6\n# Groups:   OBJECTID [5]\n  OBJECTID MSLINK pct_white pct_black pct_hispanic diversity_score\n     &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;        &lt;dbl&gt;           &lt;dbl&gt;\n1      107      8      88.7      2.24         5.73           -14.1\n2      116      1      89.3      3.66         2.53           -16.4\n3      117      3      91.0      2.25         3.24           -18.8\n4      114     17      91.8      2.75         1.49           -20.9\n5      109     12      92.2      1.81         2.09           -21.6"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#exercise-5-projection-effects-10-minutes",
    "href": "labs/lab_4/week4_inclass_practice.html#exercise-5-projection-effects-10-minutes",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Exercise 5: Projection Effects (10 minutes)",
    "text": "Exercise 5: Projection Effects (10 minutes)\nGoal: Understand how CRS affects calculations\n\n5.1 Calculate Areas in Different Projections\nYour Task: Calculate county areas using different coordinate systems and compare.\n\n# Calculate areas in different CRS\narea_comparison &lt;- pa_counties %&gt;%\n  # Geographic (WGS84) - WRONG for areas!\n  st_transform(4326) %&gt;%\n  mutate(area_geographic = as.numeric(st_area(.))) %&gt;%\n  # PA State Plane South - Good for PA\n  st_transform(3365) %&gt;%\n  mutate(area_state_plane = as.numeric(st_area(.))) %&gt;%\n  # Albers Equal Area - Good for areas\n  st_transform(5070) %&gt;%\n  mutate(area_albers = as.numeric(st_area(.))) %&gt;%\n  st_drop_geometry() %&gt;%\n  select(COUNTY_NAM, starts_with(\"area_\")) %&gt;%\n  mutate(\n    # Calculate errors compared to Albers (most accurate for area)\n    error_geographic_pct = abs(area_geographic - area_albers) / area_albers * 100,\n    error_state_plane_pct = abs(area_state_plane - area_albers) / area_state_plane * 100\n  )\n\n# Show counties with biggest errors\narea_comparison %&gt;%\n  arrange(desc(error_geographic_pct)) %&gt;%\n  select(COUNTY_NAM, error_geographic_pct, error_state_plane_pct) %&gt;%\n  head(10)\n\n    COUNTY_NAM error_geographic_pct error_state_plane_pct\n1         ERIE            0.1520567              90.71567\n2  SUSQUEHANNA            0.1480129              90.71426\n3       MCKEAN            0.1479719              90.71414\n4       WARREN            0.1478826              90.71421\n5     BRADFORD            0.1473177              90.71402\n6        TIOGA            0.1469541              90.71390\n7       POTTER            0.1463317              90.71371\n8     CRAWFORD            0.1447572              90.71326\n9        WAYNE            0.1440222              90.71306\n10     WYOMING            0.1409741              90.71215\n\n\n\n\n5.2 Visualize the Error\nYour Task: Map which counties have the biggest area calculation errors.\n\n# Join error data back to counties\ncounties_with_errors &lt;- pa_counties %&gt;%\n  left_join(\n    area_comparison %&gt;% select(COUNTY_NAM, error_geographic_pct),\n    by = \"COUNTY_NAM\"\n  )\n\n# Map the error\nggplot(counties_with_errors) +\n  geom_sf(aes(fill = error_geographic_pct), color = \"white\") +\n  scale_fill_viridis_c(\n    name = \"Area\\nError %\",\n    option = \"magma\"\n  ) +\n  labs(\n    title = \"Area Calculation Errors by County\",\n    subtitle = \"Using geographic coordinates (WGS84) instead of projected CRS\"\n  ) +\n  theme_void()\n\n\n\n\n\n\n\n\nQuestion: Which counties have the largest errors? Why might this be?"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#bonus-challenge-combined-analysis-if-time-permits",
    "href": "labs/lab_4/week4_inclass_practice.html#bonus-challenge-combined-analysis-if-time-permits",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Bonus Challenge: Combined Analysis (If Time Permits)",
    "text": "Bonus Challenge: Combined Analysis (If Time Permits)\nGoal: Combine multiple operations for a complex policy question\n\nResearch Question\nWhich Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?\nYour Task: Combine what you’ve learned to identify vulnerable, underserved communities.\nSteps: 1. Get demographic (elderly and income) data for census tracts 2. Identify vulnerable tracts (low income AND high elderly population) 3. Calculate distance to nearest hospital 4. Check which ones are more than 15 miles from a hospital 5. Aggregate to county level 6. Create comprehensive map 7. Create a summary table\n\n# Your code here!"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#reflection-questions",
    "href": "labs/lab_4/week4_inclass_practice.html#reflection-questions",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Reflection Questions",
    "text": "Reflection Questions\nAfter completing these exercises, reflect on:\n\nWhen did you need to transform CRS? Why was this necessary?\nWhat’s the difference between st_filter() and st_intersection()? When would you use each?\nHow does the choice of predicate (st_touches, st_intersects, st_within) change your results?"
  },
  {
    "objectID": "labs/lab_4/week4_inclass_practice.html#summary-of-key-functions-used",
    "href": "labs/lab_4/week4_inclass_practice.html#summary-of-key-functions-used",
    "title": "Week 4 In-Class Practice Exercises",
    "section": "Summary of Key Functions Used",
    "text": "Summary of Key Functions Used\n\n\n\n\n\n\n\n\nFunction\nPurpose\nExample Use\n\n\n\n\nst_filter()\nSelect features by spatial relationship\nFind neighboring counties\n\n\nst_buffer()\nCreate zones around features\nHospital service areas\n\n\nst_intersects()\nTest spatial overlap\nCheck access to services\n\n\nst_disjoint()\nTest spatial separation\nFind rural areas\n\n\nst_join()\nJoin by location\nAdd county info to tracts\n\n\nst_union()\nCombine geometries\nMerge overlapping buffers\n\n\nst_intersection()\nClip geometries\nCalculate overlap areas\n\n\nst_transform()\nChange CRS\nAccurate distance/area calculations\n\n\nst_area()\nCalculate areas\nCounty sizes, coverage\n\n\nst_distance()\nCalculate distances\nDistance to facilities\n\n\n\nImportant Reminder: Always check and standardize CRS when working with spatial data from multiple sources!"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html",
    "href": "labs/lab_0/lab0_index.html",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "",
    "text": "Welcome to your first lab! In this (not graded) assignment, you’ll practice the fundamental dplyr operations I overviewed in class using car sales data. This lab will help you get comfortable with:\n\nBasic data exploration\nColumn selection and manipulation\n\nCreating new variables\nFiltering data\nGrouping and summarizing\n\nInstructions: Copy this template into your portfolio repository under a lab_0/ folder, then complete each section with your code and answers. You will write the code under the comment section in each chunk. Be sure to also copy the data folder into your lab_0 folder."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#data-structure-exploration",
    "href": "labs/lab_0/lab0_index.html#data-structure-exploration",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "1.1 Data Structure Exploration",
    "text": "1.1 Data Structure Exploration\nExplore the structure of your data and answer these questions:\n\n# data structure\nglimpse(car_data)\n\nRows: 50,000\nColumns: 7\n$ Manufacturer          &lt;chr&gt; \"Ford\", \"Porsche\", \"Ford\", \"Toyota\", \"VW\", \"Ford…\n$ Model                 &lt;chr&gt; \"Fiesta\", \"718 Cayman\", \"Mondeo\", \"RAV4\", \"Polo\"…\n$ `Engine size`         &lt;dbl&gt; 1.0, 4.0, 1.6, 1.8, 1.0, 1.4, 1.8, 1.4, 1.2, 2.0…\n$ `Fuel type`           &lt;chr&gt; \"Petrol\", \"Petrol\", \"Diesel\", \"Hybrid\", \"Petrol\"…\n$ `Year of manufacture` &lt;dbl&gt; 2002, 2016, 2014, 1988, 2006, 2018, 2010, 2015, …\n$ Mileage               &lt;dbl&gt; 127300, 57850, 39190, 210814, 127869, 33603, 866…\n$ Price                 &lt;dbl&gt; 3074, 49704, 24072, 1705, 4101, 29204, 14350, 30…\n\n# Variable types\nvar_types &lt;- sapply(car_data, class)\nvar_types\n\n       Manufacturer               Model         Engine size           Fuel type \n        \"character\"         \"character\"           \"numeric\"         \"character\" \nYear of manufacture             Mileage               Price \n          \"numeric\"           \"numeric\"           \"numeric\" \n\n# Problematic names\nproblematic_names &lt;- names(car_data)[!make.names(names(car_data)) == names(car_data)]\nproblematic_names\n\n[1] \"Engine size\"         \"Fuel type\"           \"Year of manufacture\"\n\n# Look at the first few rows\nhead(car_data)\n\n# A tibble: 6 × 7\n  Manufacturer Model     `Engine size` `Fuel type` `Year of manufacture` Mileage\n  &lt;chr&gt;        &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt;\n1 Ford         Fiesta              1   Petrol                       2002  127300\n2 Porsche      718 Caym…           4   Petrol                       2016   57850\n3 Ford         Mondeo              1.6 Diesel                       2014   39190\n4 Toyota       RAV4                1.8 Hybrid                       1988  210814\n5 VW           Polo                1   Petrol                       2006  127869\n6 Ford         Focus               1.4 Petrol                       2018   33603\n# ℹ 1 more variable: Price &lt;dbl&gt;\n\n\nQuestions to answer: - How many rows and columns does the dataset have? - What types of variables do you see (numeric, character, etc.)? - Are there any column names that might cause problems? Why?\nYour answers:\n\nRows: 50,000 | Columns: 7\nVariable types:\n\n\n\n\nColumn name\nVariable type\n\n\n\n\nManufacturer\ncharacter\n\n\nModel\ncharacter\n\n\nEngine size\nnumeric\n\n\nFuel type\ncharacter\n\n\nYear of manufacture\nnumeric\n\n\nMileage\nnumeric\n\n\nPrice\nnumeric\n\n\n\n\nProblematic names: Engine size, Fuel type, Year of manufacture (contain spaces)"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#tibble-vs-data-frame",
    "href": "labs/lab_0/lab0_index.html#tibble-vs-data-frame",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "1.2 Tibble vs Data Frame",
    "text": "1.2 Tibble vs Data Frame\nCompare how tibbles and data frames display:\n\n# Look at the tibble version (what we have)\ncar_data\n\n# A tibble: 50,000 × 7\n   Manufacturer Model    `Engine size` `Fuel type` `Year of manufacture` Mileage\n   &lt;chr&gt;        &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt;\n 1 Ford         Fiesta             1   Petrol                       2002  127300\n 2 Porsche      718 Cay…           4   Petrol                       2016   57850\n 3 Ford         Mondeo             1.6 Diesel                       2014   39190\n 4 Toyota       RAV4               1.8 Hybrid                       1988  210814\n 5 VW           Polo               1   Petrol                       2006  127869\n 6 Ford         Focus              1.4 Petrol                       2018   33603\n 7 Ford         Mondeo             1.8 Diesel                       2010   86686\n 8 Toyota       Prius              1.4 Hybrid                       2015   30663\n 9 VW           Polo               1.2 Petrol                       2012   73470\n10 Ford         Focus              2   Diesel                       1992  262514\n# ℹ 49,990 more rows\n# ℹ 1 more variable: Price &lt;dbl&gt;\n\n# Convert to regular data frame and display\ncar_df &lt;- as.data.frame(car_data)\n\nQuestion: What differences do you notice in how they print?\nYour answer:\n\nTibble (car_data)\n\nPrints a clean preview: shows only the first 10 rows by default.\n\nDisplays column types.\n\nData frame (car_df)\n\nPrints the entire dataset (or up to the max.print limit).\n\nDoes not show column types alongside values."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#selecting-columns",
    "href": "labs/lab_0/lab0_index.html#selecting-columns",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "2.1 Selecting Columns",
    "text": "2.1 Selecting Columns\nPractice selecting different combinations of columns:\n\nlibrary(dplyr)\n\n# Select just Model and Mileage columns\ncar_data %&gt;%\n  select(Model, Mileage)\n\n# A tibble: 50,000 × 2\n   Model      Mileage\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 Fiesta      127300\n 2 718 Cayman   57850\n 3 Mondeo       39190\n 4 RAV4        210814\n 5 Polo        127869\n 6 Focus        33603\n 7 Mondeo       86686\n 8 Prius        30663\n 9 Polo         73470\n10 Focus       262514\n# ℹ 49,990 more rows\n\n# Select Manufacturer, Price, and Fuel type\ncar_data %&gt;%\n  select(Manufacturer, Price, `Fuel type`)\n\n# A tibble: 50,000 × 3\n   Manufacturer Price `Fuel type`\n   &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      \n 1 Ford          3074 Petrol     \n 2 Porsche      49704 Petrol     \n 3 Ford         24072 Diesel     \n 4 Toyota        1705 Hybrid     \n 5 VW            4101 Petrol     \n 6 Ford         29204 Petrol     \n 7 Ford         14350 Diesel     \n 8 Toyota       30297 Hybrid     \n 9 VW            9977 Petrol     \n10 Ford          1049 Diesel     \n# ℹ 49,990 more rows\n\n# Challenge: Select all columns EXCEPT Engine size\ncar_data %&gt;%\n  select(-`Engine size`)\n\n# A tibble: 50,000 × 6\n   Manufacturer Model      `Fuel type` `Year of manufacture` Mileage Price\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ford         Fiesta     Petrol                       2002  127300  3074\n 2 Porsche      718 Cayman Petrol                       2016   57850 49704\n 3 Ford         Mondeo     Diesel                       2014   39190 24072\n 4 Toyota       RAV4       Hybrid                       1988  210814  1705\n 5 VW           Polo       Petrol                       2006  127869  4101\n 6 Ford         Focus      Petrol                       2018   33603 29204\n 7 Ford         Mondeo     Diesel                       2010   86686 14350\n 8 Toyota       Prius      Hybrid                       2015   30663 30297\n 9 VW           Polo       Petrol                       2012   73470  9977\n10 Ford         Focus      Diesel                       1992  262514  1049\n# ℹ 49,990 more rows"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#renaming-columns",
    "href": "labs/lab_0/lab0_index.html#renaming-columns",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "2.2 Renaming Columns",
    "text": "2.2 Renaming Columns\nLet’s fix a problematic column name:\n\n# Rename 'Year of manufacture' to year\ncar_data &lt;- car_data %&gt;%\n  rename(year = `Year of manufacture`)\n\n# Check that it worked\nnames(car_data)\n\n[1] \"Manufacturer\" \"Model\"        \"Engine size\"  \"Fuel type\"    \"year\"        \n[6] \"Mileage\"      \"Price\"       \n\n\nQuestion: Why did we need backticks around Year of manufacture but not around year?\nYour answer: Because the column name contains spaces, which makes it an invalid R identifier. And backticks tell R to treat it as a literal name. In contrast, year is a valid R variable name (no spaces or special characters), so it can be used directly without backticks."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#calculate-car-age",
    "href": "labs/lab_0/lab0_index.html#calculate-car-age",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "3.1 Calculate Car Age",
    "text": "3.1 Calculate Car Age\n\n# Create an 'age' column (2025 minus year of manufacture)\n# Create a mileage_per_year column\ncar_data &lt;- car_data %&gt;%\n  mutate(\n    age = 2025 - year,\n    mileage_per_year = Mileage / age\n  )\n\n# Look at your new columns\ncar_data %&gt;%\n  select(Model, year, age, Mileage, mileage_per_year) %&gt;%\n  head()\n\n# A tibble: 6 × 5\n  Model       year   age Mileage mileage_per_year\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;            &lt;dbl&gt;\n1 Fiesta      2002    23  127300            5535.\n2 718 Cayman  2016     9   57850            6428.\n3 Mondeo      2014    11   39190            3563.\n4 RAV4        1988    37  210814            5698.\n5 Polo        2006    19  127869            6730.\n6 Focus       2018     7   33603            4800."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#categorize-cars",
    "href": "labs/lab_0/lab0_index.html#categorize-cars",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "3.2 Categorize Cars",
    "text": "3.2 Categorize Cars\n\n# Create a price_category column where if price is &lt; 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)\ncar_data &lt;- car_data %&gt;%\n  mutate(\n    price_category = case_when(\n      Price &lt; 15000 ~ \"budget\",\n      Price &gt;= 15000 & Price &lt;= 30000 ~ \"midrange\",\n      Price &gt; 30000 ~ \"mid-range\"\n    )\n  )\n\n# Check your categories select the new column and show it\ncar_data %&gt;%\n  select(price_category) %&gt;%\n  head()\n\n# A tibble: 6 × 1\n  price_category\n  &lt;chr&gt;         \n1 budget        \n2 mid-range     \n3 midrange      \n4 budget        \n5 budget        \n6 midrange"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#basic-filtering",
    "href": "labs/lab_0/lab0_index.html#basic-filtering",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "4.1 Basic Filtering",
    "text": "4.1 Basic Filtering\n\n# Find all Toyota cars\ntoyota_cars &lt;- car_data %&gt;%\n  filter(Manufacturer == \"Toyota\")\n\n# Find cars with mileage less than 30,000\nlow_mileage_cars &lt;- car_data %&gt;%\n  filter(Mileage &lt; 30000)\n\n# Find luxury cars (from price category) with low mileage\nluxury_low_mileage &lt;- car_data %&gt;%\n  filter(price_category == \"mid-range\", Mileage &lt; 30000)\n\nhead(toyota_cars)\n\n# A tibble: 6 × 10\n  Manufacturer Model `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4            1.8 Hybrid       1988  210814  1705    37\n2 Toyota       Prius           1.4 Hybrid       2015   30663 30297    10\n3 Toyota       RAV4            2.2 Petrol       2007   79393 16026    18\n4 Toyota       Yaris           1.4 Petrol       1998   97286  4046    27\n5 Toyota       RAV4            2.4 Hybrid       2003  117425 11667    22\n6 Toyota       Yaris           1.2 Petrol       1992  245990   720    33\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(low_mileage_cars)\n\n# A tibble: 6 × 10\n  Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n2 VW           Golf                 2   Petrol       2020   18985 36387     5\n3 BMW          M5                   4   Petrol       2017   22759 97758     8\n4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(luxury_low_mileage)\n\n# A tibble: 6 × 10\n  Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n2 VW           Golf                 2   Petrol       2020   18985 36387     5\n3 BMW          M5                   4   Petrol       2017   22759 97758     8\n4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#multiple-conditions",
    "href": "labs/lab_0/lab0_index.html#multiple-conditions",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "4.2 Multiple Conditions",
    "text": "4.2 Multiple Conditions\n\n# Find cars that are EITHER Honda OR Nissan\nhonda_nissan &lt;- car_data %&gt;%\n  filter(Manufacturer %in% c(\"Honda\", \"Nissan\"))\n\n# Find cars with price between $20,000 and $35,000\nmid_price &lt;- car_data %&gt;%\n  filter(between(Price, 20000, 35000))\n\n# Find diesel cars less than 10 years old\ndiesel_recent &lt;- car_data %&gt;%\n  filter(`Fuel type` == \"Diesel\", 2025 - year &lt; 10) %&gt;%\n  count()\n\nhead(honda_nissan)\n\n# A tibble: 0 × 10\n# ℹ 10 variables: Manufacturer &lt;chr&gt;, Model &lt;chr&gt;, Engine size &lt;dbl&gt;,\n#   Fuel type &lt;chr&gt;, year &lt;dbl&gt;, Mileage &lt;dbl&gt;, Price &lt;dbl&gt;, age &lt;dbl&gt;,\n#   mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(mid_price)\n\n# A tibble: 6 × 10\n  Manufacturer Model  `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ford         Mondeo           1.6 Diesel       2014   39190 24072    11\n2 Ford         Focus            1.4 Petrol       2018   33603 29204     7\n3 Toyota       Prius            1.4 Hybrid       2015   30663 30297    10\n4 Toyota       Prius            1.4 Hybrid       2016   43893 29946     9\n5 Toyota       Prius            1.4 Hybrid       2016   43130 30085     9\n6 VW           Passat           1.6 Petrol       2016   64344 23641     9\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(diesel_recent)\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  2040\n\n\nQuestion: How many diesel cars are less than 10 years old?\nYour answer: 2,040"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#basic-summaries",
    "href": "labs/lab_0/lab0_index.html#basic-summaries",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "5.1 Basic Summaries",
    "text": "5.1 Basic Summaries\n\n# Calculate average price by manufacturer\navg_price_by_brand &lt;- car_data %&gt;%\n  group_by(Manufacturer) %&gt;%\n  summarize(avg_price = mean(Price, na.rm = TRUE))\n\navg_price_by_brand\n\n# A tibble: 5 × 2\n  Manufacturer avg_price\n  &lt;chr&gt;            &lt;dbl&gt;\n1 BMW             24429.\n2 Ford            10672.\n3 Porsche         29104.\n4 Toyota          14340.\n5 VW              10363.\n\n# Calculate average mileage by fuel type\navg_mileage_by_fuel &lt;- car_data %&gt;%\n  group_by(`Fuel type`) %&gt;%\n  summarize(avg_mileage = mean(Mileage, na.rm = TRUE))\n\n# Count cars by manufacturer\ncars_by_manufacturer &lt;- car_data %&gt;%\n  count(Manufacturer)\n\navg_mileage_by_fuel\n\n# A tibble: 3 × 2\n  `Fuel type` avg_mileage\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Diesel          112667.\n2 Hybrid          111622.\n3 Petrol          112795.\n\ncars_by_manufacturer\n\n# A tibble: 5 × 2\n  Manufacturer     n\n  &lt;chr&gt;        &lt;int&gt;\n1 BMW           4965\n2 Ford         14959\n3 Porsche       2609\n4 Toyota       12554\n5 VW           14913"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#categorical-summaries",
    "href": "labs/lab_0/lab0_index.html#categorical-summaries",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "5.2 Categorical Summaries",
    "text": "5.2 Categorical Summaries\n\n# Frequency table for price categories\nprice_freq &lt;- car_data %&gt;%\n  count(price_category)\n\nprice_freq\n\n# A tibble: 3 × 2\n  price_category     n\n  &lt;chr&gt;          &lt;int&gt;\n1 budget         34040\n2 mid-range       6178\n3 midrange        9782"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "This portfolio documents my learning journey in Public Policy Analytics (MUSA 5080).\n\n\nAdvanced spatial analysis and data science for urban planning and public policy.\n\n\n\n\nWeekly Notes: My learning reflections and key concepts\nLabs: Completed assignments and analyses\nFinal Project: Capstone modeling challenge\n\n\n\n\nHi I’m Fan Yang, a student in MUSA program. Welcome to my homepage! ๑&gt;ᴗO๑\nI am deeply interested in analysis and data science, and I aspire to pursue a career in data analytics.\nSo I will give my best effort to achieve this goal!\n\n\n\n\nEmail: [yangfann@upenn.edu]\nGitHub: [@FANYANG0304]"
  },
  {
    "objectID": "index.html#about-this-course",
    "href": "index.html#about-this-course",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Advanced spatial analysis and data science for urban planning and public policy."
  },
  {
    "objectID": "index.html#portfolio-structure",
    "href": "index.html#portfolio-structure",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Weekly Notes: My learning reflections and key concepts\nLabs: Completed assignments and analyses\nFinal Project: Capstone modeling challenge"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Hi I’m Fan Yang, a student in MUSA program. Welcome to my homepage! ๑&gt;ᴗO๑\nI am deeply interested in analysis and data science, and I aspire to pursue a career in data analytics.\nSo I will give my best effort to achieve this goal!"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Email: [yangfann@upenn.edu]\nGitHub: [@FANYANG0304]"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "You are a data analyst for the Pennsylvania Department of Human Services. The department is considering implementing an algorithmic system to identify communities that should receive priority for social service funding and outreach programs. Your supervisor has asked you to evaluate the quality and reliability of available census data to inform this decision.\nDrawing on our Week 2 discussion of algorithmic bias, you need to assess not just what the data shows, but how reliable it is and what communities might be affected by data quality issues.\n\n\n\n\nApply dplyr functions to real census data for policy analysis\nEvaluate data quality using margins of error\nConnect technical analysis to algorithmic decision-making\nIdentify potential equity implications of data reliability issues\nCreate professional documentation for policy stakeholders"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#scenario",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#scenario",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "You are a data analyst for the Pennsylvania Department of Human Services. The department is considering implementing an algorithmic system to identify communities that should receive priority for social service funding and outreach programs. Your supervisor has asked you to evaluate the quality and reliability of available census data to inform this decision.\nDrawing on our Week 2 discussion of algorithmic bias, you need to assess not just what the data shows, but how reliable it is and what communities might be affected by data quality issues."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#learning-objectives",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#learning-objectives",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "Apply dplyr functions to real census data for policy analysis\nEvaluate data quality using margins of error\nConnect technical analysis to algorithmic decision-making\nIdentify potential equity implications of data reliability issues\nCreate professional documentation for policy stakeholders"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#data-retrieval",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#data-retrieval",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.1 Data Retrieval",
    "text": "2.1 Data Retrieval\nYour Task: Use get_acs() to retrieve county-level data for your chosen state.\nRequirements: - Geography: county level - Variables: median household income (B19013_001) and total population (B01003_001)\n- Year: 2022 - Survey: acs5 - Output format: wide\nHint: Remember to give your variables descriptive names using the variables = c(name = \"code\") syntax.\n\n# Write your get_acs() code here\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_income = \"B19013_001\",\n    total_population = \"B01003_001\"\n  ),\n  state = my_state,\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n# Clean the county names to remove state name and \"County\" \n# Hint: use mutate() with str_remove()\ncounty_data &lt;- county_data %&gt;%\n  mutate(\n    county_name = str_remove(NAME, \", Pennsylvania\"),\n    county_name = str_remove(county_name, \" County\")\n  )\n\n# Display the first few rows\nkable(head(county_data),\n      caption = \"County-Level Data Sample\",\n      digits = 0)\n\n\nCounty-Level Data Sample\n\n\n\n\n\n\n\n\n\n\n\nGEOID\nNAME\nmedian_incomeE\nmedian_incomeM\ntotal_populationE\ntotal_populationM\ncounty_name\n\n\n\n\n42001\nAdams County, Pennsylvania\n78975\n3334\n104604\nNA\nAdams\n\n\n42003\nAllegheny County, Pennsylvania\n72537\n869\n1245310\nNA\nAllegheny\n\n\n42005\nArmstrong County, Pennsylvania\n61011\n2202\n65538\nNA\nArmstrong\n\n\n42007\nBeaver County, Pennsylvania\n67194\n1531\n167629\nNA\nBeaver\n\n\n42009\nBedford County, Pennsylvania\n58337\n2606\n47613\nNA\nBedford\n\n\n42011\nBerks County, Pennsylvania\n74617\n1191\n428483\nNA\nBerks"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#data-quality-assessment",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#data-quality-assessment",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.2 Data Quality Assessment",
    "text": "2.2 Data Quality Assessment\nYour Task: Calculate margin of error percentages and create reliability categories.\nRequirements: - Calculate MOE percentage: (margin of error / estimate) * 100 - Create reliability categories: - High Confidence: MOE &lt; 5% - Moderate Confidence: MOE 5-10%\n- Low Confidence: MOE &gt; 10% - Create a flag for unreliable estimates (MOE &gt; 10%)\nHint: Use mutate() with case_when() for the categories.\n\n# Calculate MOE percentage and reliability categories using mutate()\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    # Calculate MOE percentage for median income\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    \n    # Create reliability categories\n    reliability_category = case_when(\n      moe_percentage &lt; 5 ~ \"High Confidence\",\n      moe_percentage &gt;= 5 & moe_percentage &lt;= 10 ~ \"Moderate Confidence\",\n      moe_percentage &gt; 10 ~ \"Low Confidence\"\n    ),\n    \n    # Create flag for unreliable estimates\n    unreliable_flag = ifelse(moe_percentage &gt; 10, \"Unreliable\", \"Reliable\")\n  )\n\n# Create a summary showing count of counties in each reliability category\n# Hint: use count() and mutate() to add percentages\nreliability_summary &lt;- county_reliability %&gt;%\n  count(reliability_category) %&gt;%\n  mutate(\n    percentage = round((n / sum(n)) * 100, 1),\n    summary = paste0(n, \" (\", percentage, \"%)\")\n  )\n\nkable(reliability_summary,\n      col.names = c(\"Reliability Category\", \"Count\", \"Percentage\", \"Summary\"),\n      caption = \"County Data Reliability Summary\",\n      digits = 1)\n\n\nCounty Data Reliability Summary\n\n\nReliability Category\nCount\nPercentage\nSummary\n\n\n\n\nHigh Confidence\n57\n85.1\n57 (85.1%)\n\n\nModerate Confidence\n10\n14.9\n10 (14.9%)"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#high-uncertainty-counties",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#high-uncertainty-counties",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.3 High Uncertainty Counties",
    "text": "2.3 High Uncertainty Counties\nYour Task: Identify the 5 counties with the highest MOE percentages.\nRequirements: - Sort by MOE percentage (highest first) - Select the top 5 counties - Display: county name, median income, margin of error, MOE percentage, reliability category - Format as a professional table using kable()\nHint: Use arrange(), slice(), and select() functions.\n\n# Create table of top 5 counties by MOE percentage\ntop_uncertainty &lt;- county_reliability %&gt;%\n  arrange(desc(moe_percentage)) %&gt;%\n  slice(1:5) %&gt;%\n  select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability_category)\n\n# Format as table with kable() - include appropriate column names and caption\nkable(top_uncertainty,\n      col.names = c(\"County\", \"Median Income\", \"Margin of Error\", \"MOE %\", \"Reliability\"),\n      caption = \"Top 5 Counties with Highest Margin of Error Percentages\",\n      digits = 2)\n\n\nTop 5 Counties with Highest Margin of Error Percentages\n\n\nCounty\nMedian Income\nMargin of Error\nMOE %\nReliability\n\n\n\n\nForest\n46188\n4612\n9.99\nModerate Confidence\n\n\nSullivan\n62910\n5821\n9.25\nModerate Confidence\n\n\nUnion\n64914\n4753\n7.32\nModerate Confidence\n\n\nMontour\n72626\n5146\n7.09\nModerate Confidence\n\n\nElk\n61672\n4091\n6.63\nModerate Confidence\n\n\n\n\n\nData Quality Commentary:\nThe results show that Forest, Sullivan, Union, Montour, and Elk counties have the highest uncertainty in median income estimates, with MOE percentages ranging from 6.63% to 9.99%. These counties would be poorly served by algorithms that rely heavily on median income data, as the estimates are less reliable and could lead to misallocation of resources. The higher uncertainty is likely due to smaller population sizes in these counties, which makes it more difficult to obtain precise statistical estimates through sampling methods."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#focus-area-selection",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#focus-area-selection",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.1 Focus Area Selection",
    "text": "3.1 Focus Area Selection\nYour Task: Select 2-3 counties from your reliability analysis for detailed tract-level study.\nStrategy: Choose counties that represent different reliability levels (e.g., 1 high confidence, 1 moderate, 1 low confidence) to compare how data quality varies.\n\n# Use filter() to select 2-3 counties from your county_reliability data\n# Store the selected counties in a variable called selected_counties\n\n# Get one county from each reliability category for comparison\nselected_counties &lt;- county_reliability %&gt;%\n  group_by(reliability_category) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(GEOID, county_name, median_incomeE, moe_percentage, reliability_category)\n\n# Display the selected counties with their key characteristics\n# Show: county name, median income, MOE percentage, reliability category\nkable(selected_counties,\n      col.names = c(\"GEOID\", \"County\", \"Median Income\", \"MOE %\", \"Reliability\"),\n      caption = \"Selected Counties for Detailed Analysis\",\n      digits = 2)\n\n\nSelected Counties for Detailed Analysis\n\n\nGEOID\nCounty\nMedian Income\nMOE %\nReliability\n\n\n\n\n42001\nAdams\n78975\n4.22\nHigh Confidence\n\n\n42023\nCameron\n46186\n5.64\nModerate Confidence\n\n\n\n\n\nComment on the output: The selected counties represent a good range of data reliability levels - Adams County with high confidence (4.22% MOE) and Cameron County with moderate confidence (5.64% MOE). This selection allows us to compare how data quality issues manifest differently across different types of Pennsylvania communities, from more populous areas to smaller rural counties."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#tract-level-demographics",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#tract-level-demographics",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.2 Tract-Level Demographics",
    "text": "3.2 Tract-Level Demographics\nYour Task: Get demographic data for census tracts in your selected counties.\nRequirements: - Geography: tract level - Variables: white alone (B03002_003), Black/African American (B03002_004), Hispanic/Latino (B03002_012), total population (B03002_001) - Use the same state and year as before - Output format: wide - Challenge: You’ll need county codes, not names. Look at the GEOID patterns in your county data for hints.\n\n# Define your race/ethnicity variables with descriptive names\nrace_vars &lt;- c(\n  total_pop = \"B03002_001\",\n  white_alone = \"B03002_003\",\n  black_alone = \"B03002_004\",\n  hispanic = \"B03002_012\"\n)\n\n# Extract county codes from selected counties for tract-level analysis\ncounty_codes &lt;- str_sub(selected_counties$GEOID, 3, 5)\n\n# Use get_acs() to retrieve tract-level data\n# Hint: You may need to specify county codes in the county parameter\ntract_data &lt;- get_acs(\n  geography = \"tract\",\n  variables = race_vars,\n  state = my_state,\n  county = county_codes,\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n# Calculate percentage of each group using mutate()\n# Create percentages for white, Black, and Hispanic populations\ntract_demographics &lt;- tract_data %&gt;%\n  mutate(\n    pct_white = (white_aloneE / total_popE) * 100,\n    pct_black = (black_aloneE / total_popE) * 100,\n    pct_hispanic = (hispanicE / total_popE) * 100,\n    \n    # Add readable tract and county name columns using str_extract() or similar\n    county_code = str_sub(GEOID, 3, 5),\n    tract_name = paste0(\"Tract \", str_sub(GEOID, 6, 11)),\n    county_name = case_when(\n      county_code %in% county_codes[1] ~ selected_counties$county_name[1],\n      county_code %in% county_codes[2] ~ selected_counties$county_name[2],\n      county_code %in% county_codes[3] ~ selected_counties$county_name[3],\n      TRUE ~ \"Other\"\n    )\n  )\n\nkable(head(tract_demographics %&gt;% select(county_name, tract_name, total_popE, pct_white, pct_black, pct_hispanic)),\n      col.names = c(\"County\", \"Tract\", \"Total Population\", \"% White\", \"% Black\", \"% Hispanic\"),\n      caption = \"Tract Demographics Sample\",\n      digits = 1)\n\n\nTract Demographics Sample\n\n\nCounty\nTract\nTotal Population\n% White\n% Black\n% Hispanic\n\n\n\n\nAdams\nTract 030101\n2658\n87.2\n0.1\n7.8\n\n\nAdams\nTract 030103\n2416\n98.7\n0.0\n0.0\n\n\nAdams\nTract 030104\n3395\n91.7\n0.0\n4.9\n\n\nAdams\nTract 030200\n5475\n78.4\n0.3\n17.2\n\n\nAdams\nTract 030300\n4412\n82.0\n3.0\n14.6\n\n\nAdams\nTract 030400\n5462\n91.7\n0.4\n3.8"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#demographic-analysis",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#demographic-analysis",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.3 Demographic Analysis",
    "text": "3.3 Demographic Analysis\nYour Task: Analyze the demographic patterns in your selected areas.\n\n# Find the tract with the highest percentage of Hispanic/Latino residents\n# Hint: use arrange() and slice() to get the top tract\nhighest_hispanic &lt;- tract_demographics %&gt;%\n  arrange(desc(pct_hispanic)) %&gt;%\n  slice(1) %&gt;%\n  select(county_name, tract_name, pct_hispanic, total_popE)\n\nkable(highest_hispanic,\n      col.names = c(\"County\", \"Tract\", \"Hispanic %\", \"Total Population\"),\n      caption = \"Tract with Highest Hispanic/Latino Percentage\",\n      digits = 1)\n\n\nTract with Highest Hispanic/Latino Percentage\n\n\nCounty\nTract\nHispanic %\nTotal Population\n\n\n\n\nAdams\nTract 031502\n20.9\n3908\n\n\n\n\n# Calculate average demographics by county using group_by() and summarize()\n# Show: number of tracts, average percentage for each racial/ethnic group\ncounty_summary &lt;- tract_demographics %&gt;%\n  group_by(county_name) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_total_pop = mean(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create a nicely formatted table of your results using kable()\nkable(county_summary,\n      col.names = c(\"County\", \"# Tracts\", \"Avg Population\", \"% White\", \"% Black\", \"% Hispanic\"),\n      caption = \"Average Demographics by County\",\n      digits = 1)\n\n\nAverage Demographics by County\n\n\nCounty\n# Tracts\nAvg Population\n% White\n% Black\n% Hispanic\n\n\n\n\nAdams\n27\n3874.2\n88.3\n1.3\n7.1\n\n\nCameron\n2\n2268.0\n93.2\n0.0\n2.1"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#moe-analysis-for-demographic-variables",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#moe-analysis-for-demographic-variables",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "4.1 MOE Analysis for Demographic Variables",
    "text": "4.1 MOE Analysis for Demographic Variables\nYour Task: Examine margins of error for demographic variables to see if some communities have less reliable data.\nRequirements: - Calculate MOE percentages for each demographic variable - Flag tracts where any demographic variable has MOE &gt; 15% - Create summary statistics\n\n# Calculate MOE percentages for white, Black, and Hispanic variables\n# Handle cases where estimate is 0 to avoid Inf values\ntract_moe_analysis &lt;- tract_demographics %&gt;%\n  filter(total_popE &gt; 0) %&gt;%  # Remove tracts with zero population\n  mutate(\n    # Calculate MOE percentages, handling cases where estimate is 0\n    white_moe_pct = ifelse(white_aloneE &gt; 0, (white_aloneM / white_aloneE) * 100, NA),\n    black_moe_pct = ifelse(black_aloneE &gt; 0, (black_aloneM / black_aloneE) * 100, NA),\n    hispanic_moe_pct = ifelse(hispanicE &gt; 0, (hispanicM / hispanicE) * 100, NA),\n    \n    # Create separate MOE flags for each demographic group\n    white_high_moe = ifelse(white_moe_pct &gt; 15, \"High MOE\", \"Acceptable\"),\n    black_high_moe = ifelse(black_moe_pct &gt; 15, \"High MOE\", \"Acceptable\"),\n    hispanic_high_moe = ifelse(hispanic_moe_pct &gt; 15, \"High MOE\", \"Acceptable\"),\n    \n    # Create a combined flag for tracts with high MOE on any demographic variable\n    high_moe_flag = ifelse(\n      white_moe_pct &gt; 15 | black_moe_pct &gt; 15 | hispanic_moe_pct &gt; 15,\n      \"High MOE Issues\",\n      \"Acceptable MOE\"\n    )\n  )\n\n# Create summary statistics showing how many tracts have data quality issues\nmoe_summary &lt;- tract_moe_analysis %&gt;%\n  count(high_moe_flag) %&gt;%\n  mutate(\n    percentage = round((n / sum(n)) * 100, 1)\n  )\n\nkable(moe_summary,\n      col.names = c(\"MOE Status\", \"Count\", \"Percentage\"),\n      caption = \"Summary of Tracts with Data Quality Issues\",\n      digits = 1)\n\n\nSummary of Tracts with Data Quality Issues\n\n\nMOE Status\nCount\nPercentage\n\n\n\n\nHigh MOE Issues\n28\n96.6\n\n\nNA\n1\n3.4\n\n\n\n\n# Show some example tracts with high MOE\nhigh_moe_examples &lt;- tract_moe_analysis %&gt;%\n  filter(high_moe_flag == \"High MOE Issues\") %&gt;%\n  select(county_name, tract_name, white_moe_pct, black_moe_pct, hispanic_moe_pct) %&gt;%\n  head(3)\n\nkable(high_moe_examples,\n      col.names = c(\"County\", \"Tract\", \"White MOE %\", \"Black MOE %\", \"Hispanic MOE %\"),\n      caption = \"Example Tracts with High MOE Issues\",\n      digits = 1)\n\n\nExample Tracts with High MOE Issues\n\n\nCounty\nTract\nWhite MOE %\nBlack MOE %\nHispanic MOE %\n\n\n\n\nAdams\nTract 030101\n6.6\n200\n50.2\n\n\nAdams\nTract 030104\n11.5\nNA\n100.6\n\n\nAdams\nTract 030200\n9.9\n100\n28.3"
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#pattern-analysis",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#pattern-analysis",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "4.2 Pattern Analysis",
    "text": "4.2 Pattern Analysis\nYour Task: Investigate whether data quality problems are randomly distributed or concentrated in certain types of communities.\n\n# Analyze patterns by separate demographic MOE flags\n# Calculate average characteristics for each demographic group's MOE status\n\n# White population MOE analysis\nwhite_moe_analysis &lt;- tract_moe_analysis %&gt;%\n  group_by(white_high_moe) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_population = mean(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(demographic_group = \"White\")\n\n# Black population MOE analysis  \nblack_moe_analysis &lt;- tract_moe_analysis %&gt;%\n  group_by(black_high_moe) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_population = mean(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(demographic_group = \"Black\")\n\n# Hispanic population MOE analysis\nhispanic_moe_analysis &lt;- tract_moe_analysis %&gt;%\n  group_by(hispanic_high_moe) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_population = mean(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(demographic_group = \"Hispanic\")\n\n# Combine all analyses\npattern_analysis &lt;- bind_rows(\n  white_moe_analysis %&gt;% rename(moe_status = white_high_moe),\n  black_moe_analysis %&gt;% rename(moe_status = black_high_moe),\n  hispanic_moe_analysis %&gt;% rename(moe_status = hispanic_high_moe)\n)\n\n# Create a professional table showing the patterns\nkable(pattern_analysis,\n      col.names = c(\"MOE Status\", \"# Tracts\", \"Avg Pop\", \"% White\", \"% Black\", \"% Hispanic\", \"Demographic Group\"),\n      caption = \"Comparison of Tracts by Demographic Group MOE Status\",\n      digits = 1)\n\n\nComparison of Tracts by Demographic Group MOE Status\n\n\n\n\n\n\n\n\n\n\n\nMOE Status\n# Tracts\nAvg Pop\n% White\n% Black\n% Hispanic\nDemographic Group\n\n\n\n\nAcceptable\n29\n3763.4\n88.7\n1.2\n6.8\nWhite\n\n\nHigh MOE\n23\n4061.3\n87.8\n1.5\n7.5\nBlack\n\n\nNA\n6\n2621.5\n92.2\n0.0\n4.2\nBlack\n\n\nHigh MOE\n27\n3868.1\n88.1\n1.2\n7.3\nHispanic\n\n\nNA\n2\n2350.0\n96.9\n1.4\n0.0\nHispanic\n\n\n\n\n\nPattern Analysis: The analysis reveals distinct patterns in data quality across different demographic groups. By examining separate MOE flags for each demographic group, we can see that data reliability issues are not uniformly distributed. The analysis shows that tracts with high MOE for specific demographic groups tend to have different characteristics - for example, tracts with high MOE for Black population estimates may have very low Black population percentages, while tracts with high MOE for Hispanic population estimates may have different demographic compositions. This granular analysis allows for more targeted policy interventions, as we can identify which specific demographic groups face data quality challenges in which communities, rather than treating all high-MOE tracts as equivalent."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#analysis-integration-and-professional-summary",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#analysis-integration-and-professional-summary",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "5.1 Analysis Integration and Professional Summary",
    "text": "5.1 Analysis Integration and Professional Summary\nYour Task: Write an executive summary that integrates findings from all four analyses.\nExecutive Summary Requirements: 1. Overall Pattern Identification: What are the systematic patterns across all your analyses? 2. Equity Assessment: Which communities face the greatest risk of algorithmic bias based on your findings? 3. Root Cause Analysis: What underlying factors drive both data quality issues and bias risk? 4. Strategic Recommendations: What should the Department implement to address these systematic issues?\nExecutive Summary:\nMy analysis of Pennsylvania’s census data reveals systematic patterns in data quality that pose significant challenges for algorithmic decision-making in social service allocation. At the county level, I found that 85.1% of Pennsylvania’s 67 counties have high confidence data (MOE &lt; 5%) for median income, while 14.9% fall into the moderate confidence category (MOE 5-10%). Notably, no counties reached the low confidence threshold (MOE &gt; 10%), indicating that county-level income data is generally reliable across Pennsylvania. However, the variation in data quality is not random - counties with higher MOE percentages tend to be smaller, rural communities such as Forest, Sullivan, and Cameron counties.\nThe tract-level demographic analysis reveals more concerning patterns for algorithmic equity. All 29 census tracts examined in my selected counties showed high MOE issues (&gt;15%) for at least one demographic variable, particularly for Black and Hispanic population estimates. This finding is especially troubling because demographic data is crucial for ensuring equitable service delivery and identifying communities that may face systemic disadvantages. The tract-level analysis shows average populations of around 3,763 people, with demographics averaging 88.7% white, 1.2% Black, and 6.8% Hispanic, suggesting that minority communities may be systematically underrepresented in reliable data.\nThe equity implications of these findings are profound and create multiple layers of algorithmic bias risk. Communities most likely to experience data quality issues - rural areas, smaller populations, and areas with minority populations - may also be those most in need of social services but least likely to receive them through algorithmic allocation systems. This creates a systematic bias where algorithms trained on unreliable data could perpetuate or exacerbate existing inequalities. The combination of small population sizes and demographic diversity appears to compound data reliability issues, suggesting that the most vulnerable communities face the greatest risk of being poorly served by algorithmic systems.\nGiven these systematic challenges, the Pennsylvania Department of Human Services must implement a tiered, equity-conscious approach to algorithmic decision-making. Rather than applying uniform algorithmic criteria across all communities, the department should develop differentiated strategies that provide additional oversight for moderate-confidence counties and alternative assessment methods for areas with known demographic data limitations. This includes establishing enhanced monitoring protocols, manual review processes for high-stakes decisions, and partnerships with community organizations to supplement census data in areas where it may be unreliable. Such an approach ensures that algorithmic efficiency enhances rather than undermines equitable service delivery across Pennsylvania’s diverse communities."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#specific-recommendations",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#specific-recommendations",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "6.3 Specific Recommendations",
    "text": "6.3 Specific Recommendations\nYour Task: Create a decision framework for algorithm implementation.\n\n# Create a summary table using your county reliability data\n# Include: county name, median income, MOE percentage, reliability category\n\nrecommendations_table &lt;- county_reliability %&gt;%\n  select(county_name, median_incomeE, moe_percentage, reliability_category) %&gt;%\n  # Add a new column with algorithm recommendations using case_when():\n  mutate(\n    algorithm_recommendation = case_when(\n      reliability_category == \"High Confidence\" ~ \"Safe for algorithmic decisions\",\n      reliability_category == \"Moderate Confidence\" ~ \"Use with caution - monitor outcomes\",\n      reliability_category == \"Low Confidence\" ~ \"Requires manual review or additional data\"\n    )\n  ) %&gt;%\n  arrange(moe_percentage)\n\n# Format as a professional table with kable()\nkable(recommendations_table,\n      col.names = c(\"County\", \"Median Income\", \"MOE %\", \"Reliability\", \"Algorithm Recommendation\"),\n      caption = \"Algorithm Implementation Recommendations by County\",\n      digits = 2)\n\n\nAlgorithm Implementation Recommendations by County\n\n\n\n\n\n\n\n\n\nCounty\nMedian Income\nMOE %\nReliability\nAlgorithm Recommendation\n\n\n\n\nAllegheny\n72537\n1.20\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMontgomery\n107441\n1.27\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPhiladelphia\n57537\n1.38\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBucks\n107826\n1.41\nHigh Confidence\nSafe for algorithmic decisions\n\n\nDelaware\n86390\n1.53\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBerks\n74617\n1.60\nHigh Confidence\nSafe for algorithmic decisions\n\n\nChester\n118574\n1.70\nHigh Confidence\nSafe for algorithmic decisions\n\n\nYork\n79183\n1.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLancaster\n81458\n1.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nNorthampton\n82201\n1.93\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWestmoreland\n69454\n1.99\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLehigh\n74973\n2.00\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCumberland\n82849\n2.20\nHigh Confidence\nSafe for algorithmic decisions\n\n\nDauphin\n71046\n2.27\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBeaver\n67194\n2.28\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLuzerne\n60836\n2.35\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWashington\n74403\n2.38\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSchuylkill\n63574\n2.40\nHigh Confidence\nSafe for algorithmic decisions\n\n\nErie\n59396\n2.55\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLackawanna\n63739\n2.58\nHigh Confidence\nSafe for algorithmic decisions\n\n\nButler\n82932\n2.61\nHigh Confidence\nSafe for algorithmic decisions\n\n\nNorthumberland\n55952\n2.67\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLebanon\n72532\n2.69\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCentre\n70087\n2.77\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSomerset\n57357\n2.78\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClearfield\n56982\n2.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFranklin\n71808\n3.00\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLawrence\n57585\n3.07\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSusquehanna\n63968\n3.14\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPerry\n76103\n3.17\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMonroe\n80656\n3.17\nHigh Confidence\nSafe for algorithmic decisions\n\n\nTioga\n59707\n3.23\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCambria\n54221\n3.34\nHigh Confidence\nSafe for algorithmic decisions\n\n\nJefferson\n56607\n3.41\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMifflin\n58012\n3.43\nHigh Confidence\nSafe for algorithmic decisions\n\n\nVenango\n59278\n3.45\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBlair\n59386\n3.47\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBradford\n60650\n3.57\nHigh Confidence\nSafe for algorithmic decisions\n\n\nArmstrong\n61011\n3.61\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMercer\n57353\n3.63\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFulton\n63153\n3.65\nHigh Confidence\nSafe for algorithmic decisions\n\n\nColumbia\n59457\n3.76\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWyoming\n67968\n3.85\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClinton\n59011\n3.86\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCrawford\n58734\n3.91\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFayette\n55579\n4.16\nHigh Confidence\nSafe for algorithmic decisions\n\n\nAdams\n78975\n4.22\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClarion\n58690\n4.37\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLycoming\n63437\n4.39\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPotter\n56491\n4.42\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBedford\n58337\n4.47\nHigh Confidence\nSafe for algorithmic decisions\n\n\nIndiana\n57170\n4.65\nHigh Confidence\nSafe for algorithmic decisions\n\n\nHuntingdon\n61300\n4.72\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMcKean\n57861\n4.75\nHigh Confidence\nSafe for algorithmic decisions\n\n\nJuniata\n61915\n4.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWayne\n59240\n4.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPike\n76416\n4.90\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWarren\n57925\n5.19\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nCarbon\n64538\n5.31\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nSnyder\n65914\n5.56\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nCameron\n46186\n5.64\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nGreene\n66283\n6.41\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nElk\n61672\n6.63\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nMontour\n72626\n7.09\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nUnion\n64914\n7.32\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nSullivan\n62910\n9.25\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nForest\n46188\n9.99\nModerate Confidence\nUse with caution - monitor outcomes\n\n\n\n\n\nKey Recommendations:\nYour Task: Use your analysis results to provide specific guidance to the department.\n\nCounties suitable for immediate algorithmic implementation: The 57 counties with high confidence data (MOE &lt; 5%) including major population centers like Allegheny, Philadelphia, Montgomery, Bucks, and Chester counties are appropriate for immediate algorithmic implementation. These counties have large populations, stable demographic patterns, and reliable census estimates that minimize the risk of algorithmic bias. Their robust data quality allows algorithms to make accurate assessments and resource allocations with minimal human oversight required.\nCounties requiring additional oversight: The 10 counties with moderate confidence data (MOE 5-10%) including Forest, Sullivan, Union, Montour, Elk, Warren, Carbon, Snyder, Cameron, and Greene require enhanced monitoring protocols. These counties should implement quarterly outcome reviews, establish appeal processes for algorithmic decisions, conduct periodic manual audits of allocation patterns, and maintain enhanced documentation of decision rationales. Additionally, these counties should have lower thresholds for triggering manual review of high-stakes decisions.\nCounties needing alternative approaches: While my analysis found no counties with low confidence data at the county level, the tract-level analysis reveals that demographic data quality issues require special attention across all counties. For areas with significant demographic uncertainty, alternative approaches should include: partnering with local community organizations for supplementary data collection, implementing mandatory manual review for decisions affecting minority communities, developing alternative indicators beyond census data (such as school enrollment data or local administrative records), and establishing community feedback mechanisms to validate algorithmic outcomes."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#questions-for-further-investigation",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#questions-for-further-investigation",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "Questions for Further Investigation",
    "text": "Questions for Further Investigation\n\nGeographic Clustering of Data Quality Issues: Are the counties with moderate confidence data (Forest, Sullivan, Cameron, etc.) geographically clustered in specific regions of Pennsylvania, and do they share common characteristics such as rural designation, distance from urban centers, or economic base? Understanding spatial patterns could help identify systematic factors affecting census data collection and inform targeted data quality improvement efforts.\nDemographic Data Reliability Across Different Community Types: How does the reliability of demographic data vary between urban, suburban, and rural census tracts, and are there specific thresholds of population size or demographic diversity below which data becomes systematically unreliable? This analysis could help establish evidence-based guidelines for when additional data collection or alternative assessment methods are needed.\nImpact of Data Quality on Service Delivery Outcomes: How do current social service allocation patterns correlate with data quality levels, and are communities with less reliable census data currently underserved relative to their documented needs? This longitudinal analysis could provide evidence of existing algorithmic bias and help quantify the potential impact of implementing data quality-aware decision systems."
  },
  {
    "objectID": "assignments/assignment_1/Fan_Yang_Assignment1.html#submission-checklist",
    "href": "assignments/assignment_1/Fan_Yang_Assignment1.html#submission-checklist",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "Submission Checklist",
    "text": "Submission Checklist\nBefore submitting your portfolio link on Canvas:\n\nAll code chunks run without errors\nAll “[Fill this in]” prompts have been completed\nTables are properly formatted and readable\nExecutive summary addresses all four required components\nPortfolio navigation includes this assignment\nCensus API key is properly set\nDocument renders correctly to HTML"
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "",
    "text": "Learning Objectives: - Apply spatial operations to answer policy-relevant research questions - Integrate census demographic data with spatial analysis - Create publication-quality visualizations and maps - Work with spatial data from multiple sources - Communicate findings effectively for policy audiences"
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html#assignment-overview",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html#assignment-overview",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "",
    "text": "Learning Objectives: - Apply spatial operations to answer policy-relevant research questions - Integrate census demographic data with spatial analysis - Create publication-quality visualizations and maps - Work with spatial data from multiple sources - Communicate findings effectively for policy audiences"
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-1-healthcare-access-for-vulnerable-populations",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-1-healthcare-access-for-vulnerable-populations",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "Part 1: Healthcare Access for Vulnerable Populations",
    "text": "Part 1: Healthcare Access for Vulnerable Populations\n\nResearch Question\nWhich Pennsylvania counties have the highest proportion of vulnerable populations (elderly + low-income) living far from hospitals?\nYour analysis should identify counties that should be priorities for healthcare investment and policy intervention.\n\n\nRequired Analysis Steps\nComplete the following analysis, documenting each step with code and brief explanations:\n\nStep 1: Data Collection (5 points)\nLoad the required spatial data: - Pennsylvania county boundaries - Pennsylvania hospitals (from lecture data) - Pennsylvania census tracts\nYour Task:\n\n# Load required packages\nlibrary(sf)\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(units)\nlibrary(patchwork)\nlibrary(ggspatial)\n\n\n# Load spatial data\nlibrary(here)\noptions(tigris_use_cache = TRUE)\noptions(tigris_progress = FALSE)\npa_counties &lt;- st_read(here(\"assignments\", \"assignment_2\", \"data\", \"Pennsylvania_County_Boundaries.shp\"))\n\nReading layer `Pennsylvania_County_Boundaries' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\assignments\\assignment_2\\data\\Pennsylvania_County_Boundaries.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 67 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -8963377 ymin: 4825316 xmax: -8314404 ymax: 5201413\nProjected CRS: WGS 84 / Pseudo-Mercator\n\nhospitals   &lt;- st_read(here(\"assignments\", \"assignment_2\", \"data\", \"hospitals.geojson\"))\n\nReading layer `hospitals' from data source \n  `D:\\UPENN\\MUSA5080\\portfolio-setup-FANYANG0304\\assignments\\assignment_2\\data\\hospitals.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 223 features and 11 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -80.49621 ymin: 39.75163 xmax: -74.86704 ymax: 42.13403\nGeodetic CRS:  WGS 84\n\npa_tracts &lt;- tracts(\"PA\", year = 2022, cb = TRUE)\n\n# Create summary table of dataset information\ndataset_summary &lt;- data.frame(\n  Dataset = c(\"Hospitals\", \"Census Tracts\", \"Counties\", \"Hospitals\", \"Census Tracts\"),\n  Metric = c(\"Count\", \"Count\", \"Count\", \"CRS\", \"CRS\"),\n  Value = c(\n    nrow(hospitals),\n    nrow(pa_tracts),\n    nrow(pa_counties),\n    st_crs(pa_counties)$input,\n    st_crs(pa_tracts)$input\n  )\n)\n\nkable(dataset_summary,\n      col.names = c(\"Dataset\", \"Metric\", \"Value\"),\n      caption = \"Spatial Dataset Summary\",\n      align = c(\"l\", \"l\", \"l\"))\n\n\nSpatial Dataset Summary\n\n\nDataset\nMetric\nValue\n\n\n\n\nHospitals\nCount\n223\n\n\nCensus Tracts\nCount\n3445\n\n\nCounties\nCount\n67\n\n\nHospitals\nCRS\nWGS 84 / Pseudo-Mercator\n\n\nCensus Tracts\nCRS\nNAD83\n\n\n\n\n\nQuestions to answer:\n\nHow many hospitals are in your dataset? 223\nHow many census tracts? 3,445\nWhat coordinate reference system is each dataset in?\n\nCounties: WGS 84 / Pseudo-Mercator\nHospitals: WGS 84\nCensus tracts: NAD83\n\n\n\n\n\nStep 2: Get Demographic Data\nUse tidycensus to download tract-level demographic data for Pennsylvania.\nRequired variables:\n\nTotal population\nMedian household income\nPopulation 65 years and over (you may need to sum multiple age categories)\n\nYour Task:\n\n# Get demographic data from ACS\n\n# Get demographic data for Pennsylvania tracts\npa_demographics &lt;- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  variables = c(\n    total_pop = \"B01003_001\",           # Total population\n    median_income = \"B19013_001\",       # Median household income\n    pop_65_74 = \"B01001_020\",          # Population 65-74 years\n    pop_75_84 = \"B01001_021\",          # Population 75-84 years  \n    pop_85_plus = \"B01001_022\"         # Population 85 years and over\n  ),\n  year = 2022,\n  geometry = TRUE\n)\n\n# Pivot the data to wide format\npa_demographics_wide &lt;- pa_demographics %&gt;%\n  select(GEOID, NAME, variable, estimate) %&gt;%\n  pivot_wider(names_from = variable, values_from = estimate) %&gt;%\n  # Calculate total elderly population (65+)\n  mutate(\n    pop_65_plus = pop_65_74 + pop_75_84 + pop_85_plus,\n    elderly_pct = (pop_65_plus / total_pop) * 100\n  )\n\n# Join to tract boundaries (already have geometry from get_acs)\ntracts_with_demographics &lt;- pa_demographics_wide\n\n# Check for missing data and create summary table\ndemographics_summary &lt;- data.frame(\n  Metric = c(\"Missing Income Data\", \"Median Income (All Tracts)\"),\n  Value = c(\n    paste(sum(is.na(tracts_with_demographics$median_income)), \"tracts\"),\n    paste(\"$\", format(median(tracts_with_demographics$median_income, na.rm = TRUE), big.mark = \",\"))\n  )\n)\n\nkable(demographics_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Demographics Data Quality Summary\",\n      align = c(\"l\", \"l\"))\n\n\nDemographics Data Quality Summary\n\n\nMetric\nValue\n\n\n\n\nMissing Income Data\n63 tracts\n\n\nMedian Income (All Tracts)\n$ 70,188\n\n\n\n\n\nQuestions to answer:\n\nWhat year of ACS data are you using? 2022\nHow many tracts have missing income data? 63 tracts\nWhat is the median income across all PA census tracts? $70,188\n\n\n\nStep 3: Define Vulnerable Populations\nIdentify census tracts with vulnerable populations based on TWO criteria: 1. Low median household income (choose an appropriate threshold) 2. Significant elderly population (choose an appropriate threshold)\nYour Task:\n\n# Filter for vulnerable tracts based on your criteria\n# Define thresholds for vulnerability\nincome_threshold &lt;- 60000  # Median household income below $60,000 (85% of PA median)\nelderly_threshold &lt;- 15    # Elderly population above 15% (typical baseline threshold)\n\n# Create vulnerable population indicator\nvulnerable_tracts &lt;- tracts_with_demographics %&gt;%\n  filter(!is.na(median_income)) %&gt;%  # Remove tracts with missing income data\n  mutate(\n    low_income = median_income &lt; income_threshold,\n    high_elderly = elderly_pct &gt; elderly_threshold,\n    vulnerable = low_income | high_elderly  # OR logic: either low income OR high elderly\n  )\n\n# Create summary table of vulnerability criteria and results\nvulnerability_summary &lt;- data.frame(\n  Metric = c(\n    \"Income Threshold\",\n    \"PA Median Income\",\n    \"Elderly Threshold\",\n    \"Low Income Tracts\",\n    \"High Elderly Tracts\",\n    \"Vulnerable Tracts (Either)\",\n    \"Percentage Vulnerable\"\n  ),\n  Value = c(\n    paste(\"$\", format(income_threshold, big.mark = \",\")),\n    paste(\"$\", format(median(tracts_with_demographics$median_income, na.rm = TRUE), big.mark = \",\")),\n    paste(elderly_threshold, \"%\"),\n    sum(vulnerable_tracts$low_income),\n    sum(vulnerable_tracts$high_elderly),\n    sum(vulnerable_tracts$vulnerable),\n    paste(round(sum(vulnerable_tracts$vulnerable) / nrow(vulnerable_tracts) * 100, 1), \"%\")\n  )\n)\n\nkable(vulnerability_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Vulnerability Criteria and Results Summary\",\n      align = c(\"l\", \"l\"))\n\n\nVulnerability Criteria and Results Summary\n\n\nMetric\nValue\n\n\n\n\nIncome Threshold\n$ 60,000\n\n\nPA Median Income\n$ 70,188\n\n\nElderly Threshold\n15 %\n\n\nLow Income Tracts\n1112\n\n\nHigh Elderly Tracts\n6\n\n\nVulnerable Tracts (Either)\n1116\n\n\nPercentage Vulnerable\n33 %\n\n\n\n\n\nQuestions to answer:\n\nWhat income threshold did you choose and why?\n$60,000 (85% of PA median), moderately low-income households\nWhat elderly population threshold did you choose and why?\n15% (above typical baseline). Used OR logic (low income OR high elderly) instead of AND, as both criteria together were too restrictive.\nHow many tracts meet your vulnerability criteria? 1,116 tracts\nWhat percentage of PA census tracts are considered vulnerable by your definition? 33%\n\n\n\n\nStep 4: Calculate Distance to Hospitals\nFor each vulnerable tract, calculate the distance to the nearest hospital.\nYour Task:\n\n# Transform to appropriate projected CRS\n# Use Pennsylvania State Plane South (EPSG:2272) for accurate distance calculations\npa_crs &lt;- 2272  # Pennsylvania State Plane South\n\n# Transform all datasets to the same CRS\nvulnerable_tracts_proj &lt;- st_transform(vulnerable_tracts, pa_crs)\nhospitals_proj &lt;- st_transform(hospitals, pa_crs)\n\n# Calculate distance from each tract centroid to nearest hospital\n# Get centroids of vulnerable tracts\ntract_centroids &lt;- st_centroid(vulnerable_tracts_proj)\n\n# Calculate distance matrix between tract centroids and hospitals\ndistances &lt;- st_distance(tract_centroids, hospitals_proj)\n\n# Find minimum distance to nearest hospital for each tract\nmin_distances &lt;- apply(distances, 1, min)\n\n# Convert from meters to miles (1 meter = 0.000621371 miles)\nmin_distances_miles &lt;- as.numeric(min_distances) * 0.000621371\n\n# Add distance information to vulnerable tracts\nvulnerable_tracts_with_distance &lt;- vulnerable_tracts_proj %&gt;%\n  mutate(\n    distance_to_hospital_miles = min_distances_miles\n  )\n\n# Create summary table of distance statistics\ndistance_summary &lt;- data.frame(\n  Metric = c(\n    \"Average Distance\",\n    \"Maximum Distance\",\n    \"Tracts &gt;15 miles from Hospital\"\n  ),\n  Value = c(\n    paste(round(mean(min_distances_miles), 2), \"miles\"),\n    paste(round(max(min_distances_miles), 2), \"miles\"),\n    sum(min_distances_miles &gt; 15)\n  )\n)\n\nkable(distance_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Distance to Nearest Hospital Summary\",\n      align = c(\"l\", \"l\"))\n\n\nDistance to Nearest Hospital Summary\n\n\nMetric\nValue\n\n\n\n\nAverage Distance\n14.54 miles\n\n\nMaximum Distance\n107.76 miles\n\n\nTracts &gt;15 miles from Hospital\n1094\n\n\n\n\n\nRequirements:\n\nUse an appropriate projected coordinate system for Pennsylvania\nCalculate distances in miles\nExplain why you chose your projection\n\nQuestions to answer:\n\nWhat is the average distance to the nearest hospital for vulnerable tracts? 14.54 miles\nWhat is the maximum distance? 107.76 miles\nHow many vulnerable tracts are more than 15 miles from the nearest hospital? 1,094 tracts\n\n\n\n\nStep 5: Identify Underserved Areas\nDefine “underserved” as vulnerable tracts that are more than 15 miles from the nearest hospital.\nYour Task:\n\n# Create underserved variable\n# Define \"underserved\" as vulnerable tracts more than 15 miles from nearest hospital\nunderserved_threshold &lt;- 15  # miles\n\n# Add underserved indicator\nvulnerable_tracts_final &lt;- vulnerable_tracts_with_distance %&gt;%\n  mutate(\n    underserved = vulnerable & (distance_to_hospital_miles &gt; underserved_threshold)\n  )\n\n# Create summary table of underserved analysis\ntotal_vulnerable &lt;- sum(vulnerable_tracts_final$vulnerable)\ntotal_underserved &lt;- sum(vulnerable_tracts_final$underserved)\n\nunderserved_summary &lt;- data.frame(\n  Metric = c(\n    \"Underserved Threshold\",\n    \"Number of Underserved Tracts\",\n    \"Percentage of Vulnerable Tracts Underserved\",\n    \"Assessment\"\n  ),\n  Value = c(\n    paste(underserved_threshold, \"miles\"),\n    total_underserved,\n    paste(round(total_underserved / total_vulnerable * 100, 1), \"%\"),\n    ifelse(total_underserved &gt; total_vulnerable * 0.3, \"Concerning\", \"Somewhat Expected\")\n  )\n)\n\nkable(underserved_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Underserved Population Analysis Summary\",\n      align = c(\"l\", \"l\"))\n\n\nUnderserved Population Analysis Summary\n\n\nMetric\nValue\n\n\n\n\nUnderserved Threshold\n15 miles\n\n\nNumber of Underserved Tracts\n251\n\n\nPercentage of Vulnerable Tracts Underserved\n22.5 %\n\n\nAssessment\nSomewhat Expected\n\n\n\n\n\nQuestions to answer:\n\nHow many tracts are underserved? 251 tracts\nWhat percentage of vulnerable tracts are underserved? 22.5%\nDoes this surprise you? Why or why not?\nSomewhat concerning. 22.5% of vulnerable tracts (251 tracts) are underserved (&gt;15 miles from hospital). Most vulnerable tracts have adequate access, but rural/mountainous areas show clear gaps. May need mobile clinics or telehealth for these areas.\n\n\n\n\nStep 6: Aggregate to County Level\nUse spatial joins and aggregation to calculate county-level statistics about vulnerable populations and hospital access.\nYour Task:\n\n# Spatial join tracts to counties\n# Transform counties to same CRS\npa_counties_proj &lt;- st_transform(pa_counties, pa_crs)\n\n# Spatial join tracts to counties\ntracts_with_counties &lt;- st_join(vulnerable_tracts_final, pa_counties_proj, join = st_within)\n\n# Aggregate statistics by county\ncounty_stats &lt;- tracts_with_counties %&gt;%\n  st_drop_geometry() %&gt;%  # Remove geometry for aggregation\n  group_by(COUNTY_NAM) %&gt;%\n  summarise(\n    total_tracts = n(),\n    vulnerable_tracts = sum(vulnerable, na.rm = TRUE),\n    underserved_tracts = sum(underserved, na.rm = TRUE),\n    pct_vulnerable_underserved = ifelse(vulnerable_tracts &gt; 0, \n                                       round(underserved_tracts / vulnerable_tracts * 100, 1), 0),\n    avg_distance_vulnerable = ifelse(vulnerable_tracts &gt; 0,\n                                    round(mean(distance_to_hospital_miles[vulnerable], na.rm = TRUE), 2), 0),\n    total_vulnerable_pop = sum(total_pop[vulnerable], na.rm = TRUE),\n    .groups = 'drop'\n  ) %&gt;%\n  filter(vulnerable_tracts &gt; 0) %&gt;%  # Only include counties with vulnerable tracts\n  arrange(desc(pct_vulnerable_underserved))\n\n# Create summary tables for top counties\ntop_5_underserved &lt;- head(county_stats, 5) %&gt;%\n  select(County = COUNTY_NAM, `% Underserved` = pct_vulnerable_underserved) %&gt;%\n  mutate(Rank = row_number())\n\ntop_5_population &lt;- county_stats %&gt;%\n  arrange(desc(total_vulnerable_pop)) %&gt;%\n  head(5) %&gt;%\n  select(County = COUNTY_NAM, `Vulnerable Population` = total_vulnerable_pop) %&gt;%\n  mutate(Rank = row_number(),\n         `Vulnerable Population` = format(`Vulnerable Population`, big.mark = \",\"))\n\nkable(top_5_underserved,\n      col.names = c(\"Rank\", \"County\", \"% Underserved\"),\n      caption = \"Top 5 Counties by Percentage of Underserved Vulnerable Tracts\",\n      align = c(\"c\", \"l\", \"c\"))\n\n\nTop 5 Counties by Percentage of Underserved Vulnerable Tracts\n\n\nRank\nCounty\n% Underserved\n\n\n\n\nCAMERON\n100\n1\n\n\nCHESTER\n100\n2\n\n\nCLINTON\n100\n3\n\n\nNORTHUMBERLAND\n100\n4\n\n\nPIKE\n100\n5\n\n\n\n\nkable(top_5_population,\n      col.names = c(\"Rank\", \"County\", \"Vulnerable Population\"),\n      caption = \"Top 5 Counties by Total Vulnerable Population\",\n      align = c(\"c\", \"l\", \"r\"))\n\n\nTop 5 Counties by Total Vulnerable Population\n\n\nRank\nCounty\nVulnerable Population\n\n\n\n\nPHILADELPHIA\n831,589\n1\n\n\nNA\n752,250\n2\n\n\nALLEGHENY\n364,981\n3\n\n\nLUZERNE\n134,345\n4\n\n\nLEHIGH\n106,336\n5\n\n\n\n\n\nRequired county-level statistics:\n\nNumber of vulnerable tracts\nNumber of underserved tracts\n\nPercentage of vulnerable tracts that are underserved\nAverage distance to nearest hospital for vulnerable tracts\nTotal vulnerable population\n\nQuestions to answer:\n\nWhich 5 counties have the highest percentage of underserved vulnerable tracts?\nCameron, Chester, Clinton, Northumberland, and Pike counties (all 100% underserved).\nWhich counties have the most vulnerable people living far from hospitals?\nPhiladelphia (831,589), Allegheny (364,981), Luzerne (134,345), Lehigh (106,336), and Lancaster (~100,000+).\nAre there any patterns in where underserved counties are located?\nClear rural-urban divide. Underserved counties are rural (Cameron, Clinton, Pike) with low density and mountainous terrain. Urban counties (Philadelphia, Allegheny) have better hospital coverage despite larger vulnerable populations.\n\n\n\n\nStep 7: Create Summary Table\nCreate a professional table showing the top 10 priority counties for healthcare investment.\nYour Task:\n\n# Create priority counties table with scoring\npriority_counties &lt;- county_stats %&gt;%\n  mutate(\n    priority_score = (pct_vulnerable_underserved * 0.6) + (log(total_vulnerable_pop + 1) * 0.4),\n    vulnerable_pop_formatted = format(total_vulnerable_pop, big.mark = \",\"),\n    avg_distance_formatted = paste0(avg_distance_vulnerable, \" mi\")\n  ) %&gt;%\n  arrange(desc(priority_score)) %&gt;%\n  head(10) %&gt;%\n  select(\n    County = COUNTY_NAM,\n    `Vulnerable Tracts` = vulnerable_tracts,\n    `Underserved Tracts` = underserved_tracts,\n    `% Underserved` = pct_vulnerable_underserved,\n    `Avg Distance (mi)` = avg_distance_formatted,\n    `Vulnerable Population` = vulnerable_pop_formatted\n  )\n\n# Create formatted table\nkable(priority_counties, \n      caption = \"Top 10 Priority Counties for Healthcare Investment in Pennsylvania\",\n      align = c(\"l\", \"c\", \"c\", \"c\", \"c\", \"r\")) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\", \"condensed\", \"responsive\"),\n                full_width = FALSE,\n                position = \"center\") %&gt;%\n  add_header_above(c(\"Healthcare Access Priority Counties\" = 6)) %&gt;%\n  footnote(\n    general = \"Priority score combines percentage of underserved vulnerable tracts (60%) and total vulnerable population (40%). Underserved = vulnerable tracts &gt;15 miles from nearest hospital.\",\n    general_title = \"Note: \",\n    footnote_as_chunk = TRUE\n  )\n\n\n\nTop 10 Priority Counties for Healthcare Investment in Pennsylvania\n\n\n\n\n\n\n\n\n\n\n\nHealthcare Access Priority Counties\n\n\n\nCounty\nVulnerable Tracts\nUnderserved Tracts\n% Underserved\nAvg Distance (mi)\nVulnerable Population\n\n\n\n\nNORTHUMBERLAND\n12\n12\n100.0\n36.45 mi\n32,947\n\n\nCHESTER\n4\n4\n100.0\n37.01 mi\n16,587\n\n\nCLINTON\n3\n3\n100.0\n29.86 mi\n11,433\n\n\nWYOMING\n1\n1\n100.0\n41.58 mi\n3,156\n\n\nCAMERON\n1\n1\n100.0\n61.26 mi\n1,988\n\n\nPIKE\n1\n1\n100.0\n51.68 mi\n696\n\n\nCUMBERLAND\n6\n5\n83.3\n32.19 mi\n18,604\n\n\nCLEARFIELD\n8\n6\n75.0\n45.03 mi\n28,455\n\n\nVENANGO\n7\n5\n71.4\n19.57 mi\n18,215\n\n\nELK\n3\n2\n66.7\n18.57 mi\n11,667\n\n\n\nNote:   Priority score combines percentage of underserved vulnerable tracts (60%) and total vulnerable population (40%). Underserved = vulnerable tracts &gt;15 miles from nearest hospital.\n\n\n\n\n\n\n\n\n\n\n\n\nRequirements:\n\nUse knitr::kable() or similar for formatting\nInclude descriptive column names\nFormat numbers appropriately (commas for population, percentages, etc.)\nAdd an informative caption\nSort by priority (you decide the metric)"
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-2-comprehensive-visualization",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-2-comprehensive-visualization",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "Part 2: Comprehensive Visualization",
    "text": "Part 2: Comprehensive Visualization\nUsing the skills from Week 3 (Data Visualization), create publication-quality maps and charts.\n\nMap 1: County-Level Choropleth\nCreate a choropleth map showing healthcare access challenges at the county level.\nYour Task:\n\n# Create county-level access map\n# Join county statistics to county boundaries\ncounties_with_stats &lt;- pa_counties_proj %&gt;%\n  left_join(county_stats, by = c(\"COUNTY_NAM\" = \"COUNTY_NAM\")) %&gt;%\n  mutate(\n    pct_vulnerable_underserved = ifelse(is.na(pct_vulnerable_underserved), 0, pct_vulnerable_underserved)\n  )\n\n# Create the choropleth map\nmap1 &lt;- ggplot() +\n  # County boundaries with fill based on underserved percentage\n  geom_sf(data = counties_with_stats, \n          aes(fill = pct_vulnerable_underserved), \n          color = \"white\", size = 0.3) +\n  # Hospital locations\n  geom_sf(data = hospitals_proj, \n          color = \"red\", size = 1.5, alpha = 0.8) +\n  # Color scale\n  scale_fill_viridis_c(\n    name = \"% Underserved\\nVulnerable Tracts\",\n    option = \"plasma\",\n    direction = 1,\n    na.value = \"grey90\",\n    labels = function(x) paste0(x, \"%\")\n  ) +\n  # Theme and labels\n  theme_void() +\n  labs(\n    title = \"Healthcare Access Challenges in Pennsylvania Counties\",\n    subtitle = \"Percentage of vulnerable tracts that are underserved (&gt;15 miles from nearest hospital)\",\n    caption = \"Red dots indicate hospital locations. Vulnerable = low-income + high elderly population.\\nData: ACS 2022, Pennsylvania Department of Health\",\n    fill = \"% Underserved\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),\n    plot.caption = element_text(size = 9, hjust = 0.5, margin = margin(t = 10)),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9)\n  ) +\n  # Add north arrow and scale bar\n  annotation_north_arrow(location = \"tr\", which_north = \"true\", \n                        style = north_arrow_fancy_orienteering) +\n  annotation_scale(location = \"bl\", width_hint = 0.3)\n\n# Display the map\nprint(map1)\n\n\n\n\n\n\n\n\nRequirements:\n\nFill counties by percentage of vulnerable tracts that are underserved\nInclude hospital locations as points\nUse an appropriate color scheme\nInclude clear title, subtitle, and caption\nUse theme_void() or similar clean theme\nAdd a legend with formatted labels\n\n\n\n\nMap 2: Detailed Vulnerability Map\nCreate a map highlighting underserved vulnerable tracts.\nYour Task:\n\n# Create detailed tract-level map\n# Create tract categories for visualization\ntract_categories &lt;- vulnerable_tracts_final %&gt;%\n  mutate(\n    tract_category = case_when(\n      underserved ~ \"Underserved Vulnerable\",\n      vulnerable ~ \"Vulnerable (Served)\",\n      TRUE ~ \"Non-vulnerable\"\n    ),\n    tract_category = factor(tract_category, \n                           levels = c(\"Non-vulnerable\", \"Vulnerable (Served)\", \"Underserved Vulnerable\"))\n  )\n\n# Create the detailed vulnerability map\nmap2 &lt;- ggplot() +\n  # All tracts (non-vulnerable) - light background\n  geom_sf(data = tract_categories %&gt;% filter(tract_category == \"Non-vulnerable\"), \n          fill = \"grey95\", color = \"grey80\", size = 0.1) +\n  # Vulnerable but served tracts\n  geom_sf(data = tract_categories %&gt;% filter(tract_category == \"Vulnerable (Served)\"), \n          fill = \"lightblue\", color = \"grey60\", size = 0.2) +\n  # Underserved vulnerable tracts - highlight these\n  geom_sf(data = tract_categories %&gt;% filter(tract_category == \"Underserved Vulnerable\"), \n          fill = \"darkred\", color = \"white\", size = 0.3) +\n  # County boundaries for context\n  geom_sf(data = pa_counties_proj, \n          fill = NA, color = \"black\", size = 0.5) +\n  # Hospital locations\n  geom_sf(data = hospitals_proj, \n          color = \"darkgreen\", size = 2, shape = 17, alpha = 0.8) +\n  # Color scale for legend\n  scale_fill_manual(\n    name = \"Tract Category\",\n    values = c(\"Non-vulnerable\" = \"grey95\", \n               \"Vulnerable (Served)\" = \"lightblue\", \n               \"Underserved Vulnerable\" = \"darkred\"),\n    guide = guide_legend(override.aes = list(size = 0.5))\n  ) +\n  # Theme and labels\n  theme_void() +\n  labs(\n    title = \"Detailed View: Underserved Vulnerable Populations in Pennsylvania\",\n    subtitle = \"Census tracts with vulnerable populations and their access to healthcare\",\n    caption = \"Red tracts: Underserved vulnerable populations (&gt;15 miles from hospital)\\nBlue tracts: Vulnerable populations with adequate access\\nGreen triangles: Hospital locations\\nData: ACS 2022, Pennsylvania Department of Health\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5, margin = margin(b = 20)),\n    plot.caption = element_text(size = 9, hjust = 0.5, margin = margin(t = 10)),\n    legend.position = \"bottom\",\n    legend.title = element_text(size = 10, face = \"bold\"),\n    legend.text = element_text(size = 9)\n  ) +\n  # Add north arrow and scale bar\n  annotation_north_arrow(location = \"tr\", which_north = \"true\", \n                        style = north_arrow_fancy_orienteering) +\n  annotation_scale(location = \"bl\", width_hint = 0.3)\n\n# Display the map\nprint(map2)\n\n\n\n\n\n\n\n\nRequirements:\n\nShow underserved vulnerable tracts in a contrasting color\nInclude county boundaries for context\nShow hospital locations\nUse appropriate visual hierarchy (what should stand out?)\nInclude informative title and subtitle\n\n\n\n\nChart: Distribution Analysis\nCreate a visualization showing the distribution of distances to hospitals for vulnerable populations.\nYour Task:\n\n# Create distribution visualization\n# Create a combined histogram and box plot showing distance distribution\nlibrary(patchwork)\n\n# Prepare data for visualization\nchart_data &lt;- vulnerable_tracts_final %&gt;%\n  filter(vulnerable) %&gt;%  # Only show vulnerable tracts\n  mutate(\n    category = ifelse(underserved, \"Underserved\", \"Adequate Access\"),\n    category = factor(category, levels = c(\"Adequate Access\", \"Underserved\"))\n  )\n\n# Create histogram\nhist_plot &lt;- ggplot(chart_data, aes(x = distance_to_hospital_miles, fill = category)) +\n  geom_histogram(bins = 30, alpha = 0.7, position = \"identity\") +\n  geom_vline(xintercept = 15, linetype = \"dashed\", color = \"red\", size = 1) +\n  scale_fill_manual(values = c(\"Adequate Access\" = \"lightblue\", \"Underserved\" = \"darkred\")) +\n  labs(\n    title = \"Distribution of Distance to Nearest Hospital\",\n    subtitle = \"For vulnerable census tracts in Pennsylvania\",\n    x = \"Distance to Nearest Hospital (miles)\",\n    y = \"Number of Census Tracts\",\n    fill = \"Access Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.position = \"bottom\"\n  ) +\n  annotate(\"text\", x = 15, y = Inf, label = \"15-mile threshold\", \n           hjust = -0.1, vjust = 1.5, color = \"red\", size = 3)\n\n# Create box plot by category\nbox_plot &lt;- ggplot(chart_data, aes(x = category, y = distance_to_hospital_miles, fill = category)) +\n  geom_boxplot(alpha = 0.7) +\n  geom_hline(yintercept = 15, linetype = \"dashed\", color = \"red\", size = 1) +\n  scale_fill_manual(values = c(\"Adequate Access\" = \"lightblue\", \"Underserved\" = \"darkred\")) +\n  labs(\n    title = \"Distance Distribution by Access Category\",\n    x = \"Access Category\",\n    y = \"Distance to Nearest Hospital (miles)\",\n    fill = \"Access Category\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    legend.position = \"none\"\n  ) +\n  coord_flip()\n\n# Combine plots\ncombined_chart &lt;- hist_plot / box_plot +\n  plot_annotation(\n    title = \"Healthcare Access Analysis: Distance to Hospitals for Vulnerable Populations\",\n    caption = \"Data: ACS 2022, Pennsylvania Department of Health. Vulnerable = low-income + high elderly population.\",\n    theme = theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5))\n  )\n\n# Display the combined chart\nprint(combined_chart)\n\n\n\n\n\n\n\n# Summary statistics for interpretation\ncat(\"Underserved tracts median distance:\", \n    round(median(chart_data$distance_to_hospital_miles[chart_data$underserved]), 1), \"miles\\n\")\n\nUnderserved tracts median distance: 30.8 miles\n\ncat(\"Adequate access tracts median distance:\", round(median(chart_data$distance_to_hospital_miles[!chart_data$underserved]), 1), \n    \"miles\\n\")\n\nAdequate access tracts median distance: 4.4 miles\n\n\nSuggested chart types:\n\nHistogram or density plot of distances\nBox plot comparing distances across regions\nBar chart of underserved tracts by county\nScatter plot of distance vs. vulnerable population size\n\nRequirements:\n\nClear axes labels with units\nAppropriate title\nProfessional formatting\nBrief interpretation (1-2 sentences as a caption or in text)"
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-3-bring-your-own-data-analysis",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html#part-3-bring-your-own-data-analysis",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "Part 3: Bring Your Own Data Analysis",
    "text": "Part 3: Bring Your Own Data Analysis\nChoose your own additional spatial dataset and conduct a supplementary analysis.\n\nChallenge Options\nChoose ONE of the following challenge exercises, or propose your own research question using OpenDataPhilly data (https://opendataphilly.org/datasets/).\nNote these are just loose suggestions to spark ideas - follow or make your own as the data permits and as your ideas evolve. This analysis should include bringing in your own dataset, ensuring the projection/CRS of your layers align and are appropriate for the analysis (not lat/long or geodetic coordinate systems). The analysis portion should include some combination of spatial and attribute operations to answer a relatively straightforward question\n\n\nEducation & Youth Services\nOption A: Educational Desert Analysis - Data: Schools, Libraries, Recreation Centers, Census tracts (child population) - Question: “Which neighborhoods lack adequate educational infrastructure for children?” - Operations: Buffer schools/libraries (0.5 mile walking distance), identify coverage gaps, overlay with child population density - Policy relevance: School district planning, library placement, after-school program siting\nOption B: School Safety Zones - Data: Schools, Crime Incidents, Bike Network - Question: “Are school zones safe for walking/biking, or are they crime hotspots?” - Operations: Buffer schools (1000ft safety zone), spatial join with crime incidents, assess bike infrastructure coverage - Policy relevance: Safe Routes to School programs, crossing guard placement\n\n\n\nEnvironmental Justice\nOption C: Green Space Equity - Data: Parks, Street Trees, Census tracts (race/income demographics) - Question: “Do low-income and minority neighborhoods have equitable access to green space?” - Operations: Buffer parks (10-minute walk = 0.5 mile), calculate tree canopy or park acreage per capita, compare by demographics - Policy relevance: Climate resilience, environmental justice, urban forestry investment —\n\n\nPublic Safety & Justice\nOption D: Crime & Community Resources - Data: Crime Incidents, Recreation Centers, Libraries, Street Lights - Question: “Are high-crime areas underserved by community resources?” - Operations: Aggregate crime counts to census tracts or neighborhoods, count community resources per area, spatial correlation analysis - Policy relevance: Community investment, violence prevention strategies —\n\n\nInfrastructure & Services\nOption E: Polling Place Accessibility - Data: Polling Places, SEPTA stops, Census tracts (elderly population, disability rates) - Question: “Are polling places accessible for elderly and disabled voters?” - Operations: Buffer polling places and transit stops, identify vulnerable populations, find areas lacking access - Policy relevance: Voting rights, election infrastructure, ADA compliance\n\n\n\nHealth & Wellness\nOption F: Recreation & Population Health - Data: Recreation Centers, Playgrounds, Parks, Census tracts (demographics) - Question: “Is lack of recreation access associated with vulnerable populations?” - Operations: Calculate recreation facilities per capita by neighborhood, buffer facilities for walking access, overlay with demographic indicators - Policy relevance: Public health investment, recreation programming, obesity prevention\n\n\n\nEmergency Services\nOption G: EMS Response Coverage - Data: Fire Stations, EMS stations, Population density, High-rise buildings - Question: “Are population-dense areas adequately covered by emergency services?” - Operations: Create service area buffers (5-minute drive = ~2 miles), assess population coverage, identify gaps in high-density areas - Policy relevance: Emergency preparedness, station siting decisions\n\n\n\nArts & Culture\nOption H: Cultural Asset Distribution - Data: Public Art, Museums, Historic sites/markers, Neighborhoods - Question: “Do all neighborhoods have equitable access to cultural amenities?” - Operations: Count cultural assets per neighborhood, normalize by population, compare distribution across demographic groups - Policy relevance: Cultural equity, tourism, quality of life, neighborhood identity\n\n\n\n\nData Sources\nOpenDataPhilly: https://opendataphilly.org/datasets/ - Most datasets available as GeoJSON, Shapefile, or CSV with coordinates - Always check the Metadata for a data dictionary of the fields.\nAdditional Sources: - Pennsylvania Open Data: https://data.pa.gov/ - Census Bureau (via tidycensus): Demographics, economic indicators, commute patterns - TIGER/Line (via tigris): Geographic boundaries\n\n\nRecommended Starting Points\nIf you’re feeling confident: Choose an advanced challenge with multiple data layers. If you are a beginner, choose something more manageable that helps you understand the basics\nIf you have a different idea: Propose your own question! Just make sure: - You can access the spatial data - You can perform at least 2 spatial operations\n\n\nYour Analysis\nYour Task:\n\nFind and load additional data\n\nDocument your data source\nCheck and standardize the CRS\nProvide basic summary statistics\n\n\n\n# Load your additional dataset\n# For this analysis, I'll use Philadelphia Bus Transit Shelters data from OpenDataPhilly\n# This will help us understand if vulnerable populations have adequate public transit access to hospitals\n\n# Load Bus Transit Shelters data\nbus_shelters &lt;- st_read(here(\"assignments\", \"assignment_2\", \"data\", \"bus_transit_shelters.geojson\"), quiet = TRUE)\n\n# Transform to Pennsylvania State Plane South CRS to match our analysis\nbus_shelters &lt;- st_transform(bus_shelters, pa_crs)\n\n# Create summary table of bus shelter data\nbus_shelter_summary &lt;- data.frame(\n  Metric = c(\"Number of Bus Shelters\", \"CRS\"),\n  Value = c(nrow(bus_shelters), st_crs(bus_shelters)$input)\n)\n\nkable(bus_shelter_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Bus Shelter Dataset Summary\",\n      align = c(\"l\", \"l\"))\n\n\nBus Shelter Dataset Summary\n\n\nMetric\nValue\n\n\n\n\nNumber of Bus Shelters\n487\n\n\nCRS\nEPSG:2272\n\n\n\n\n# Show summary of shelter types\nshelter_types &lt;- table(bus_shelters$productgroup)\nshelter_types_df &lt;- data.frame(\n  Product_Group = names(shelter_types),\n  Count = as.numeric(shelter_types)\n)\n\nkable(shelter_types_df,\n      col.names = c(\"Product Group\", \"Count\"),\n      caption = \"Bus Shelter Types Distribution\",\n      align = c(\"l\", \"c\"))\n\n\nBus Shelter Types Distribution\n\n\nProduct Group\nCount\n\n\n\n\nDigital\n60\n\n\nStatic\n427\n\n\n\n\n# Show first few shelter locations\nshelter_sample &lt;- bus_shelters %&gt;% \n  st_drop_geometry() %&gt;% \n  select(site, siteid, productgroup) %&gt;%\n  head(6)\n\nkable(shelter_sample,\n      col.names = c(\"Site\", \"Site ID\", \"Product Group\"),\n      caption = \"Sample Bus Shelter Locations\",\n      align = c(\"l\", \"l\", \"l\"))\n\n\nSample Bus Shelter Locations\n\n\nSite\nSite ID\nProduct Group\n\n\n\n\nChestnut St & 60th St -\npa-002294\nStatic\n\n\nRoosevelt Blvd & Broad St NE\npa-002180\nStatic\n\n\nRoosevelt Blvd & Broad St - FS SE\npa-002181\nStatic\n\n\n35th & Grays Ferry NE\npa-002338\nStatic\n\n\n60th St & Haverford Av NW\npa-001485\nStatic\n\n\nGrays Ferry Av & 35th St -\npa-002284\nStatic\n\n\n\n\n\nQuestions to answer:\n\nWhat dataset did you choose and why?\nPhiladelphia Bus Transit Shelters - public transit affects healthcare access for vulnerable populations without cars.\nWhat is the data source and date?\nOpenDataPhilly (Philadelphia city open data), 2025\nHow many features does it contain? 487 bus shelters\nWhat CRS is it in? Did you need to transform it?\nOriginal: WGS 84. Transformed to PA State Plane South (EPSG:2272) for distance calculations.\n\n\n\nPose a research question\n\nResearch Question: “Do vulnerable populations in Philadelphia have adequate access to bus transit shelters, and how does this relate to hospital access?”\nThis analysis examines the spatial relationship between vulnerable tracts (low-income OR high elderly), bus shelters, and hospitals in Philadelphia.\n\n\nConduct spatial analysis\n\nUse at least TWO spatial operations to answer your research question.\nRequired operations (choose 2+):\n\nBuffers\nSpatial joins\nSpatial filtering with predicates\nDistance calculations\nIntersections or unions\nPoint-in-polygon aggregation\n\nYour Task:\n\n# Filter for Philadelphia area tracts (bus shelters are concentrated in Philadelphia)\nphilly_tracts &lt;- vulnerable_tracts_final %&gt;%\n  filter(str_detect(NAME, \"Philadelphia\"))\n\n# Create summary table for Philadelphia analysis\nphilly_summary &lt;- data.frame(\n  Metric = c(\"Vulnerable Tracts in Philadelphia\", \"Underserved Tracts in Philadelphia\"),\n  Count = c(sum(philly_tracts$vulnerable), sum(philly_tracts$underserved))\n)\n\nkable(philly_summary,\n      col.names = c(\"Metric\", \"Count\"),\n      caption = \"Philadelphia Vulnerable Population Summary\",\n      align = c(\"l\", \"c\"))\n\n\nPhiladelphia Vulnerable Population Summary\n\n\nMetric\nCount\n\n\n\n\nVulnerable Tracts in Philadelphia\n208\n\n\nUnderserved Tracts in Philadelphia\n0\n\n\n\n\n# Calculate distance from vulnerable tracts to nearest bus shelter\nphilly_vulnerable &lt;- philly_tracts %&gt;% filter(vulnerable)\nphilly_centroids &lt;- st_centroid(philly_vulnerable)\nshelter_distances &lt;- st_distance(philly_centroids, bus_shelters)\nmin_shelter_distances &lt;- apply(shelter_distances, 1, min)\nmin_shelter_distances_miles &lt;- as.numeric(min_shelter_distances) * 0.000621371\n\n# Add transit access information (0.25 mile = typical walking distance)\nphilly_vulnerable_with_transit &lt;- philly_vulnerable %&gt;%\n  mutate(\n    distance_to_shelter_miles = min_shelter_distances_miles,\n    has_transit_access = distance_to_shelter_miles &lt;= 0.25,\n    transit_accessible = vulnerable & has_transit_access\n  )\n\n# Create summary table for transit access analysis\ntransit_access_summary &lt;- data.frame(\n  Metric = c(\n    \"Average Distance to Bus Shelter\",\n    \"Tracts within 0.25 miles of Shelter\",\n    \"Percentage with Transit Access\"\n  ),\n  Value = c(\n    paste(round(mean(min_shelter_distances_miles), 2), \"miles\"),\n    sum(philly_vulnerable_with_transit$has_transit_access),\n    paste(round(sum(philly_vulnerable_with_transit$has_transit_access) / nrow(philly_vulnerable_with_transit) * 100, 1), \"%\")\n  )\n)\n\nkable(transit_access_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Transit Access Analysis Summary\",\n      align = c(\"l\", \"l\"))\n\n\nTransit Access Analysis Summary\n\n\nMetric\nValue\n\n\n\n\nAverage Distance to Bus Shelter\n0.87 miles\n\n\nTracts within 0.25 miles of Shelter\n10\n\n\nPercentage with Transit Access\n4.8 %\n\n\n\n\n# Buffer analysis: 0.25 mile buffers around bus shelters\nshelter_buffers &lt;- st_buffer(bus_shelters, dist = 402.34)  # 0.25 mile in meters\ntracts_in_shelter_buffer &lt;- st_join(philly_vulnerable, shelter_buffers, \n                                    join = st_intersects, left = FALSE)\n\n# Create summary table for buffer analysis\nbuffer_summary &lt;- data.frame(\n  Metric = c(\"Vulnerable Tracts Intersecting Shelter Buffers\"),\n  Count = c(length(unique(tracts_in_shelter_buffer$GEOID)))\n)\n\nkable(buffer_summary,\n      col.names = c(\"Metric\", \"Count\"),\n      caption = \"Buffer Analysis Summary\",\n      align = c(\"l\", \"c\"))\n\n\nBuffer Analysis Summary\n\n\nMetric\nCount\n\n\n\n\nVulnerable Tracts Intersecting Shelter Buffers\n173\n\n\n\n\n# Cross-tabulation of transit and hospital access\naccess_crosstab &lt;- philly_vulnerable_with_transit %&gt;%\n  st_drop_geometry() %&gt;%\n  mutate(\n    transit_status = ifelse(has_transit_access, \"Has Transit\", \"No Transit\"),\n    hospital_status = ifelse(underserved, \"Underserved\", \"Has Hospital Access\")\n  ) %&gt;%\n  group_by(transit_status, hospital_status) %&gt;%\n  summarise(count = n(), .groups = 'drop')\n\nkable(access_crosstab,\n      col.names = c(\"Transit Status\", \"Hospital Status\", \"Count\"),\n      caption = \"Cross-tabulation: Transit Access vs Hospital Access\",\n      align = c(\"l\", \"l\", \"c\"))\n\n\nCross-tabulation: Transit Access vs Hospital Access\n\n\nTransit Status\nHospital Status\nCount\n\n\n\n\nHas Transit\nHas Hospital Access\n10\n\n\nNo Transit\nHas Hospital Access\n198\n\n\n\n\n# Create visualization map\ntransit_map &lt;- ggplot() +\n  geom_sf(data = philly_tracts, fill = \"gray95\", color = \"gray70\", size = 0.2) +\n  geom_sf(data = philly_vulnerable_with_transit, \n          aes(fill = distance_to_shelter_miles), color = \"white\", size = 0.1) +\n  geom_sf(data = shelter_buffers, fill = \"lightblue\", alpha = 0.15, color = NA) +\n  geom_sf(data = bus_shelters, color = \"blue\", size = 1.5, shape = 16, alpha = 0.7) +\n  geom_sf(data = hospitals_proj %&gt;% \n            filter(st_intersects(geometry, st_union(philly_tracts), sparse = FALSE)), \n          color = \"red\", size = 3, shape = 17, alpha = 0.8) +\n  scale_fill_viridis_c(\n    name = \"Distance to\\nBus Shelter\\n(miles)\",\n    option = \"plasma\",\n    direction = -1,\n    breaks = c(0, 0.25, 0.5, 0.75, 1.0),\n    limits = c(0, max(min_shelter_distances_miles))\n  ) +\n  theme_void() +\n  labs(\n    title = \"Public Transit Access for Vulnerable Populations in Philadelphia\",\n    subtitle = \"Distance from vulnerable tracts to nearest bus shelter with 0.25-mile walking buffers\",\n    caption = \"Blue circles: Bus shelters with 0.25-mile buffers\\nRed triangles: Hospitals\\nData: ACS 2022, OpenDataPhilly 2025\"\n  ) +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, hjust = 0.5),\n    plot.caption = element_text(size = 9, hjust = 0.5),\n    legend.position = \"right\",\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  )\n\nprint(transit_map)\n\n\n\n\n\n\n\n# Create final summary statistics table\nfinal_summary &lt;- data.frame(\n  Metric = c(\n    \"Tracts with Transit Access (&lt;0.25 mi)\",\n    \"Average Distance to Bus Shelter\",\n    \"Maximum Distance to Bus Shelter\"\n  ),\n  Value = c(\n    paste(sum(philly_vulnerable_with_transit$has_transit_access), \n          \"(\", round(sum(philly_vulnerable_with_transit$has_transit_access) / nrow(philly_vulnerable_with_transit) * 100, 1), \"%)\"),\n    paste(round(mean(min_shelter_distances_miles), 2), \"miles\"),\n    paste(round(max(min_shelter_distances_miles), 2), \"miles\")\n  )\n)\n\nkable(final_summary,\n      col.names = c(\"Metric\", \"Value\"),\n      caption = \"Final Transit Access Summary Statistics\",\n      align = c(\"l\", \"l\"))\n\n\nFinal Transit Access Summary Statistics\n\n\nMetric\nValue\n\n\n\n\nTracts with Transit Access (&lt;0.25 mi)\n10 ( 4.8 %)\n\n\nAverage Distance to Bus Shelter\n0.87 miles\n\n\nMaximum Distance to Bus Shelter\n3.53 miles\n\n\n\n\n\nAnalysis requirements:\n\nClear code comments explaining each step\nAppropriate CRS transformations\nSummary statistics or counts\nAt least one map showing your findings\nBrief interpretation of results (3-5 sentences)\n\nYour interpretation:\nPhiladelphia has 487 bus shelters covering 208 vulnerable tracts. Only 4.8% of vulnerable tracts are within 0.25 miles of a shelter (average distance: 0.87 miles). The cross-tabulation shows 10 tracts have both transit and hospital access, while 198 have hospital access but no nearby shelter.\nThis suggests two issues: (1) Philadelphia’s hospital coverage is good—all vulnerable tracts can reach a hospital within 15 miles; (2) bus shelter distribution may not align well with vulnerable populations’ locations. Many vulnerable residents likely rely on bus stops without shelters.\nI think this analysis only captures shelters, not all bus stops. Many areas have bus service without shelters, which could underestimate actual transit access."
  },
  {
    "objectID": "assignments/assignment_2/Fan_Yang_Assignment2.html#improvements-from-assignment-1",
    "href": "assignments/assignment_2/Fan_Yang_Assignment2.html#improvements-from-assignment-1",
    "title": "Assignment 2: Spatial Analysis and Visualization",
    "section": "Improvements from Assignment 1",
    "text": "Improvements from Assignment 1\nBased on feedback from Assignment 1, I have implemented the following key improvements:\n\nProtected Census API Key - Hidden the actual API key from the output\nEnhanced Table Visualizations - Replaced raw outputs with professional kable() tables\n\nImproved Code Documentation - Added comprehensive comments and better organization\nProfessional Presentation - Consistent formatting and clear analysis explanations"
  },
  {
    "objectID": "instructions_week1.html",
    "href": "instructions_week1.html",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Welcome to MUSA 5080! This guide will help you set up your personal portfolio repository for the semester.\n\n\nBy the end of this setup, you’ll have: - Your own portfolio repository on GitHub - live website showcasing your work - A place to document your learning journey\n\n\n\n\nThis is what you are building: Dr. Delmelle’s sample portfolio\n\n\n\n\nBefore starting, make sure you have: - [ ] A GitHub account (create one here if needed) - [ ] Quarto installed on your computer (download here) - [ ] R and RStudio installed\n\n\n\n\n\nYou should already be in your personal repository (created when you accepted the GitHub Classroom assignment). Now let’s personalize it!\n\n\n\nClick on the _quarto.yml file\nClick the pencil icon (✏️) to edit\nChange \"Your Name - MUSA 5080 Portfolio\" to include your actual name\nExample: \"Jane Smith - MUSA 5080 Portfolio\"\nClick “Commit changes” at the bottom\n\n\n\n\n\nClick on the index.qmd file\nClick the pencil icon (✏️) to edit\nUpdate the “About Me” section with your information:\n\nYour name and background\nYour email address\nYour GitHub username\nWhy you’re taking this course\n\nClick “Commit changes”\n\n\n\n\n\nNavigate to the weekly-notes folder\nClick on week-01-notes.qmd\nClick the pencil icon (✏️) to edit\nFill in your notes from the first class\nClick “Commit changes”\n\n\n\n\n\nThis step makes your portfolio visible as a live website!\n\nGo to Settings: Click the “Settings” tab at the top of your repository\nFind Pages: Scroll down and click “Pages” in the left sidebar\nConfigure Source:\n\nSource: Select “Deploy from a branch”\nBranch: Select “main”\nFolder: Select “/ docs”\n\nSave: Click “Save”\nWait: GitHub will show a message that your site is being built (this takes 1-5 minutes)\n\n\n\n\n\nFind Your URL: After a few minutes, GitHub will show your website URL at the top of the Pages settings\n\nIt will look like: https://yourusername.github.io/repository-name\n\nVisit Your Site: Click the link to see your live portfolio!\nBookmark It: Save this URL - you’ll submit it to Canvas\n\n\n\n\n\nCopy your live website URL\nGo to the Canvas assignment\nSubmit your URL\n\n\n\n\n\nIf you want to work on your computer and see changes before publishing:\n\n\n# Replace [your-repo-url] with your actual repository URL\ngit clone [your-repo-url]\ncd [your-repository-name]\n\n\n\n# Edit your files using RStudio\n# Preview your changes:\nquarto render\nquarto preview\n\n# When ready, save your changes:\ngit add .\ngit commit -m \"Update portfolio\"\ngit push\nYour live website will automatically update when you push changes!\n\n\n\n\nEach week you’ll: 1. Create a new file: weekly-notes/week-XX-notes.qmd 2. Copy the template from week-01-notes.qmd 3. Fill in your reflections and key concepts 4. Commit and push your changes\n\n\n\n\n\n\nWait longer: GitHub Pages can take up to 10 minutes to build\nCheck Actions tab: Look for any red X marks indicating build failures\nVerify Pages settings: Make sure you selected “main” branch and “/docs” folder\n\n\n\n\n\nCheck permissions: Make sure you’re in YOUR repository, not the template\nSign in: Ensure you’re signed into GitHub\n\n\n\n\n\nCheck YAML syntax: Make sure your _quarto.yml file has proper formatting\nVerify file names: Files should end in .qmd not .md\nLook at error messages: The Actions tab will show specific error details\n\n\n\n\n\nDon’t panic! Every change is tracked in Git\nSee history: Click the “History” button on any file to see previous versions\nRevert changes: You can always go back to a previous version\n\n\n\n\n\n\nCommit often: Save your work frequently with descriptive commit messages\nUse branches: For major changes, create a new branch and merge when ready\nPreview locally: Use quarto preview to see changes before publishing\nKeep it professional: This portfolio can be shared with future employers!\nDocument everything: Good documentation is as important as good analysis\n\n\n\n\n\nQuarto Documentation\nGitHub Docs\nMarkdown Guide\nGit Tutorial\n\n\n\n\nDuring Class: - Raise your hand for immediate help - Work with classmates - collaboration is encouraged for setup!\nOutside Class: - Office Hours: Mondays 1:30-3:00 PM - Email: delmelle@design.upenn.edu - GitHub Issues: Create an issue in your repository for technical problems - Canvas Discussion: Post questions others might have too\n\n\n\nBefore submitting, make sure you’ve: - [ ] Customized _quarto.yml with your name - [ ] Updated index.qmd with your information - [ ] Completed Week 1 notes - [ ] Enabled GitHub Pages - [ ] Verified your website loads correctly - [ ] Submitted your URL to Canvas\n\nNeed help? Don’t struggle alone - reach out during office hours (mine + TAs) or in class!"
  },
  {
    "objectID": "instructions_week1.html#what-youre-building",
    "href": "instructions_week1.html#what-youre-building",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "By the end of this setup, you’ll have: - Your own portfolio repository on GitHub - live website showcasing your work - A place to document your learning journey"
  },
  {
    "objectID": "instructions_week1.html#example",
    "href": "instructions_week1.html#example",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "This is what you are building: Dr. Delmelle’s sample portfolio"
  },
  {
    "objectID": "instructions_week1.html#prerequisites",
    "href": "instructions_week1.html#prerequisites",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Before starting, make sure you have: - [ ] A GitHub account (create one here if needed) - [ ] Quarto installed on your computer (download here) - [ ] R and RStudio installed"
  },
  {
    "objectID": "instructions_week1.html#step-by-step-setup",
    "href": "instructions_week1.html#step-by-step-setup",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "You should already be in your personal repository (created when you accepted the GitHub Classroom assignment). Now let’s personalize it!\n\n\n\nClick on the _quarto.yml file\nClick the pencil icon (✏️) to edit\nChange \"Your Name - MUSA 5080 Portfolio\" to include your actual name\nExample: \"Jane Smith - MUSA 5080 Portfolio\"\nClick “Commit changes” at the bottom\n\n\n\n\n\nClick on the index.qmd file\nClick the pencil icon (✏️) to edit\nUpdate the “About Me” section with your information:\n\nYour name and background\nYour email address\nYour GitHub username\nWhy you’re taking this course\n\nClick “Commit changes”\n\n\n\n\n\nNavigate to the weekly-notes folder\nClick on week-01-notes.qmd\nClick the pencil icon (✏️) to edit\nFill in your notes from the first class\nClick “Commit changes”\n\n\n\n\n\nThis step makes your portfolio visible as a live website!\n\nGo to Settings: Click the “Settings” tab at the top of your repository\nFind Pages: Scroll down and click “Pages” in the left sidebar\nConfigure Source:\n\nSource: Select “Deploy from a branch”\nBranch: Select “main”\nFolder: Select “/ docs”\n\nSave: Click “Save”\nWait: GitHub will show a message that your site is being built (this takes 1-5 minutes)\n\n\n\n\n\nFind Your URL: After a few minutes, GitHub will show your website URL at the top of the Pages settings\n\nIt will look like: https://yourusername.github.io/repository-name\n\nVisit Your Site: Click the link to see your live portfolio!\nBookmark It: Save this URL - you’ll submit it to Canvas\n\n\n\n\n\nCopy your live website URL\nGo to the Canvas assignment\nSubmit your URL"
  },
  {
    "objectID": "instructions_week1.html#working-on-your-portfolio-locally-optional-but-recommended",
    "href": "instructions_week1.html#working-on-your-portfolio-locally-optional-but-recommended",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "If you want to work on your computer and see changes before publishing:\n\n\n# Replace [your-repo-url] with your actual repository URL\ngit clone [your-repo-url]\ncd [your-repository-name]\n\n\n\n# Edit your files using RStudio\n# Preview your changes:\nquarto render\nquarto preview\n\n# When ready, save your changes:\ngit add .\ngit commit -m \"Update portfolio\"\ngit push\nYour live website will automatically update when you push changes!"
  },
  {
    "objectID": "instructions_week1.html#weekly-workflow",
    "href": "instructions_week1.html#weekly-workflow",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Each week you’ll: 1. Create a new file: weekly-notes/week-XX-notes.qmd 2. Copy the template from week-01-notes.qmd 3. Fill in your reflections and key concepts 4. Commit and push your changes"
  },
  {
    "objectID": "instructions_week1.html#troubleshooting",
    "href": "instructions_week1.html#troubleshooting",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Wait longer: GitHub Pages can take up to 10 minutes to build\nCheck Actions tab: Look for any red X marks indicating build failures\nVerify Pages settings: Make sure you selected “main” branch and “/docs” folder\n\n\n\n\n\nCheck permissions: Make sure you’re in YOUR repository, not the template\nSign in: Ensure you’re signed into GitHub\n\n\n\n\n\nCheck YAML syntax: Make sure your _quarto.yml file has proper formatting\nVerify file names: Files should end in .qmd not .md\nLook at error messages: The Actions tab will show specific error details\n\n\n\n\n\nDon’t panic! Every change is tracked in Git\nSee history: Click the “History” button on any file to see previous versions\nRevert changes: You can always go back to a previous version"
  },
  {
    "objectID": "instructions_week1.html#pro-tips",
    "href": "instructions_week1.html#pro-tips",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Commit often: Save your work frequently with descriptive commit messages\nUse branches: For major changes, create a new branch and merge when ready\nPreview locally: Use quarto preview to see changes before publishing\nKeep it professional: This portfolio can be shared with future employers!\nDocument everything: Good documentation is as important as good analysis"
  },
  {
    "objectID": "instructions_week1.html#additional-resources",
    "href": "instructions_week1.html#additional-resources",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Quarto Documentation\nGitHub Docs\nMarkdown Guide\nGit Tutorial"
  },
  {
    "objectID": "instructions_week1.html#getting-help",
    "href": "instructions_week1.html#getting-help",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "During Class: - Raise your hand for immediate help - Work with classmates - collaboration is encouraged for setup!\nOutside Class: - Office Hours: Mondays 1:30-3:00 PM - Email: delmelle@design.upenn.edu - GitHub Issues: Create an issue in your repository for technical problems - Canvas Discussion: Post questions others might have too"
  },
  {
    "objectID": "instructions_week1.html#checklist",
    "href": "instructions_week1.html#checklist",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Before submitting, make sure you’ve: - [ ] Customized _quarto.yml with your name - [ ] Updated index.qmd with your information - [ ] Completed Week 1 notes - [ ] Enabled GitHub Pages - [ ] Verified your website loads correctly - [ ] Submitted your URL to Canvas\n\nNeed help? Don’t struggle alone - reach out during office hours (mine + TAs) or in class!"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html",
    "href": "labs/lab_3/week3_lab_exercise.html",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "",
    "text": "# Load required packages\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(RColorBrewer)\n# Set your Census API key if you haven't already\ncensus_api_key(Sys.getenv(\"86993dedbe98d77b9d79db6b8ba21a7fde55cb91\"))\n\n# We'll use Pennsylvania data for consistency with previous weeks\nstate_choice &lt;- \"PA\""
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#setup-and-data-loading",
    "href": "labs/lab_3/week3_lab_exercise.html#setup-and-data-loading",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "",
    "text": "# Load required packages\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(RColorBrewer)\n# Set your Census API key if you haven't already\ncensus_api_key(Sys.getenv(\"86993dedbe98d77b9d79db6b8ba21a7fde55cb91\"))\n\n# We'll use Pennsylvania data for consistency with previous weeks\nstate_choice &lt;- \"PA\""
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-0-finding-census-variable-codes",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-0-finding-census-variable-codes",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 0: Finding Census Variable Codes",
    "text": "Exercise 0: Finding Census Variable Codes\nThe Challenge: You know you want data on total population, median income, and median age, but you don’t know the specific Census variable codes. How do you find them?\n\n0.1 Load the Variable Dictionary\n\n# Load all available variables for ACS 5-year 2022\nacs_vars_2022 &lt;- load_variables(2022, \"acs5\", cache = TRUE)\n\n# Look at the structure\nglimpse(acs_vars_2022)\n\nRows: 28,152\nColumns: 4\n$ name      &lt;chr&gt; \"B01001A_001\", \"B01001A_002\", \"B01001A_003\", \"B01001A_004\", …\n$ label     &lt;chr&gt; \"Estimate!!Total:\", \"Estimate!!Total:!!Male:\", \"Estimate!!To…\n$ concept   &lt;chr&gt; \"Sex by Age (White Alone)\", \"Sex by Age (White Alone)\", \"Sex…\n$ geography &lt;chr&gt; \"tract\", \"tract\", \"tract\", \"tract\", \"tract\", \"tract\", \"tract…\n\nhead(acs_vars_2022)\n\n# A tibble: 6 × 4\n  name        label                                   concept          geography\n  &lt;chr&gt;       &lt;chr&gt;                                   &lt;chr&gt;            &lt;chr&gt;    \n1 B01001A_001 Estimate!!Total:                        Sex by Age (Whi… tract    \n2 B01001A_002 Estimate!!Total:!!Male:                 Sex by Age (Whi… tract    \n3 B01001A_003 Estimate!!Total:!!Male:!!Under 5 years  Sex by Age (Whi… tract    \n4 B01001A_004 Estimate!!Total:!!Male:!!5 to 9 years   Sex by Age (Whi… tract    \n5 B01001A_005 Estimate!!Total:!!Male:!!10 to 14 years Sex by Age (Whi… tract    \n6 B01001A_006 Estimate!!Total:!!Male:!!15 to 17 years Sex by Age (Whi… tract    \n\n\nWhat you see:\n\nname: The variable code (e.g., “B01003_001”)\nlabel: Human-readable description\nconcept: The broader table this variable belongs to\n\n\n\n0.2 Search for Population Variables\nYour Task: Find the variable code for total population.\n\n# Search for population-related variables\npopulation_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"Total.*population\"))\n\n# Look at the results\nhead(population_vars, 10)\n\n# A tibble: 10 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B16008_002 \"Estimate!!Total:!!Native population:\"           Citize… tract    \n 2 B16008_003 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 3 B16008_004 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 4 B16008_005 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 5 B16008_006 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 6 B16008_007 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 7 B16008_008 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 8 B16008_009 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 9 B16008_010 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n10 B16008_011 \"Estimate!!Total:!!Native population:!!18 years… Citize… tract    \n\n# Or search in the concept field\npop_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Total Population\"))\n\nhead(pop_concept)\n\n# A tibble: 6 × 4\n  name        label                             concept                geography\n  &lt;chr&gt;       &lt;chr&gt;                             &lt;chr&gt;                  &lt;chr&gt;    \n1 B01003_001  Estimate!!Total                   Total Population       block gr…\n2 B25008A_001 Estimate!!Total:                  Total Population in O… block gr…\n3 B25008A_002 Estimate!!Total:!!Owner occupied  Total Population in O… block gr…\n4 B25008A_003 Estimate!!Total:!!Renter occupied Total Population in O… block gr…\n5 B25008B_001 Estimate!!Total:                  Total Population in O… block gr…\n6 B25008B_002 Estimate!!Total:!!Owner occupied  Total Population in O… block gr…\n\n\nTip: Look for “Total” followed by “population” - usually B01003_001\n\n\n0.3 Search for Income Variables\nYour Task: Find median household income variables.\n\n# Search for median income\nincome_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*income\"))\n\n# Look specifically for household income\nhousehold_income &lt;- income_vars %&gt;%\n  filter(str_detect(label, \"household\"))\n\nprint(\"Household income variables:\")\n\n[1] \"Household income variables:\"\n\nhead(household_income)\n\n# A tibble: 6 × 4\n  name        label                                            concept geography\n  &lt;chr&gt;       &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n1 B10010_002  Estimate!!Median family income in the past 12 m… Median… tract    \n2 B10010_003  Estimate!!Median family income in the past 12 m… Median… tract    \n3 B19013A_001 Estimate!!Median household income in the past 1… Median… tract    \n4 B19013B_001 Estimate!!Median household income in the past 1… Median… tract    \n5 B19013C_001 Estimate!!Median household income in the past 1… Median… tract    \n6 B19013D_001 Estimate!!Median household income in the past 1… Median… tract    \n\n# Alternative: search by concept\nincome_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Median Household Income\"))\n\nhead(income_concept)\n\n# A tibble: 6 × 4\n  name        label                                            concept geography\n  &lt;chr&gt;       &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n1 B19013A_001 Estimate!!Median household income in the past 1… Median… tract    \n2 B19013B_001 Estimate!!Median household income in the past 1… Median… tract    \n3 B19013C_001 Estimate!!Median household income in the past 1… Median… tract    \n4 B19013D_001 Estimate!!Median household income in the past 1… Median… tract    \n5 B19013E_001 Estimate!!Median household income in the past 1… Median… county   \n6 B19013F_001 Estimate!!Median household income in the past 1… Median… tract    \n\n\nPattern Recognition: Median household income is typically B19013_001\n\n\n0.4 Search for Age Variables\nYour Task: Find median age variables.\n\n# Search for median age variables\nage_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*age\"))\n\nprint(\"Median age variables found:\")\n\n[1] \"Median age variables found:\"\n\nhead(age_vars, 10)\n\n# A tibble: 10 × 4\n   name        label                           concept                 geography\n   &lt;chr&gt;       &lt;chr&gt;                           &lt;chr&gt;                   &lt;chr&gt;    \n 1 B01002A_001 Estimate!!Median age --!!Total: Median Age by Sex (Whi… block gr…\n 2 B01002A_002 Estimate!!Median age --!!Male   Median Age by Sex (Whi… block gr…\n 3 B01002A_003 Estimate!!Median age --!!Female Median Age by Sex (Whi… block gr…\n 4 B01002B_001 Estimate!!Median age --!!Total: Median Age by Sex (Bla… block gr…\n 5 B01002B_002 Estimate!!Median age --!!Male   Median Age by Sex (Bla… block gr…\n 6 B01002B_003 Estimate!!Median age --!!Female Median Age by Sex (Bla… block gr…\n 7 B01002C_001 Estimate!!Median age --!!Total: Median Age by Sex (Ame… block gr…\n 8 B01002C_002 Estimate!!Median age --!!Male   Median Age by Sex (Ame… block gr…\n 9 B01002C_003 Estimate!!Median age --!!Female Median Age by Sex (Ame… block gr…\n10 B01002D_001 Estimate!!Median age --!!Total: Median Age by Sex (Asi… block gr…\n\n# Alternative: search by concept field\nage_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Median Age\"))\n\nprint(\"Median age variables (from concept search):\")\n\n[1] \"Median age variables (from concept search):\"\n\nhead(age_concept)\n\n# A tibble: 6 × 4\n  name        label                           concept                  geography\n  &lt;chr&gt;       &lt;chr&gt;                           &lt;chr&gt;                    &lt;chr&gt;    \n1 B01002A_001 Estimate!!Median age --!!Total: Median Age by Sex (Whit… block gr…\n2 B01002A_002 Estimate!!Median age --!!Male   Median Age by Sex (Whit… block gr…\n3 B01002A_003 Estimate!!Median age --!!Female Median Age by Sex (Whit… block gr…\n4 B01002B_001 Estimate!!Median age --!!Total: Median Age by Sex (Blac… block gr…\n5 B01002B_002 Estimate!!Median age --!!Male   Median Age by Sex (Blac… block gr…\n6 B01002B_003 Estimate!!Median age --!!Female Median Age by Sex (Blac… block gr…\n\n\n\n\n0.5 Advanced Search Techniques\nYour Task: Learn more sophisticated search methods.\n\n# Search for multiple terms at once\nhousing_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*(rent|value)\"))\n\nprint(\"Housing cost variables:\")\n\n[1] \"Housing cost variables:\"\n\nhead(housing_vars, 10)\n\n# A tibble: 10 × 4\n   name         label                                          concept geography\n   &lt;chr&gt;        &lt;chr&gt;                                          &lt;chr&gt;   &lt;chr&gt;    \n 1 B07002PR_004 Estimate!!Median age --!!Total:!!Moved from d… Median… &lt;NA&gt;     \n 2 B07002_004   Estimate!!Median age --!!Total:!!Moved from d… Median… tract    \n 3 B07002_005   Estimate!!Median age --!!Total:!!Moved from d… Median… tract    \n 4 B07011PR_004 Estimate!!Median income in the past 12 months… Median… &lt;NA&gt;     \n 5 B07011_004   Estimate!!Median income in the past 12 months… Median… tract    \n 6 B07011_005   Estimate!!Median income in the past 12 months… Median… tract    \n 7 B07402PR_004 Estimate!!Median age --!!Total living in area… Median… &lt;NA&gt;     \n 8 B07402_004   Estimate!!Median age --!!Total living in area… Median… county   \n 9 B07402_005   Estimate!!Median age --!!Total living in area… Median… county   \n10 B07411PR_004 Estimate!!Median income in the past 12 months… Median… &lt;NA&gt;     \n\n# Search excluding certain terms\nincome_not_family &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*income\") & \n         !str_detect(label, \"family\"))\n\nprint(\"Income variables (not family income):\")\n\n[1] \"Income variables (not family income):\"\n\nhead(income_not_family)\n\n# A tibble: 6 × 4\n  name         label                                           concept geography\n  &lt;chr&gt;        &lt;chr&gt;                                           &lt;chr&gt;   &lt;chr&gt;    \n1 B06011PR_001 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n2 B06011PR_002 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n3 B06011PR_003 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n4 B06011PR_004 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n5 B06011PR_005 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n6 B06011_001   Estimate!!Median income in the past 12 months … Median… tract    \n\n# Case-insensitive search using regex\neducation_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, regex(\"bachelor\", ignore_case = TRUE)))\n\nprint(\"Education variables:\")\n\n[1] \"Education variables:\"\n\nhead(education_vars, 5)\n\n# A tibble: 5 × 4\n  name         label                                           concept geography\n  &lt;chr&gt;        &lt;chr&gt;                                           &lt;chr&gt;   &lt;chr&gt;    \n1 B06009PR_005 Estimate!!Total:!!Bachelor's degree             Place … &lt;NA&gt;     \n2 B06009PR_011 Estimate!!Total:!!Born in Puerto Rico:!!Bachel… Place … &lt;NA&gt;     \n3 B06009PR_017 Estimate!!Total:!!Born in the United States:!!… Place … &lt;NA&gt;     \n4 B06009PR_023 Estimate!!Total:!!Native; born elsewhere:!!Bac… Place … &lt;NA&gt;     \n5 B06009PR_029 Estimate!!Total:!!Foreign born:!!Bachelor's de… Place … &lt;NA&gt;     \n\n\n\n\n0.6 Interactive Exploration\nYour Task: Use RStudio’s viewer for easier searching.\n\n# Open the full variable list in RStudio viewer\n# This opens a searchable data table\nView(acs_vars_2022)\n\n# Pro tip: You can also search specific table groups\n# B01 = Age and Sex\n# B19 = Income  \n# B25 = Housing\ntable_b19 &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(name, \"^B19\"))  # ^ means \"starts with\"\n\nprint(\"All B19 (Income) table variables:\")\n\n[1] \"All B19 (Income) table variables:\"\n\nhead(table_b19, 10)\n\n# A tibble: 10 × 4\n   name        label                                concept            geography\n   &lt;chr&gt;       &lt;chr&gt;                                &lt;chr&gt;              &lt;chr&gt;    \n 1 B19001A_001 Estimate!!Total:                     Household Income … tract    \n 2 B19001A_002 Estimate!!Total:!!Less than $10,000  Household Income … tract    \n 3 B19001A_003 Estimate!!Total:!!$10,000 to $14,999 Household Income … tract    \n 4 B19001A_004 Estimate!!Total:!!$15,000 to $19,999 Household Income … tract    \n 5 B19001A_005 Estimate!!Total:!!$20,000 to $24,999 Household Income … tract    \n 6 B19001A_006 Estimate!!Total:!!$25,000 to $29,999 Household Income … tract    \n 7 B19001A_007 Estimate!!Total:!!$30,000 to $34,999 Household Income … tract    \n 8 B19001A_008 Estimate!!Total:!!$35,000 to $39,999 Household Income … tract    \n 9 B19001A_009 Estimate!!Total:!!$40,000 to $44,999 Household Income … tract    \n10 B19001A_010 Estimate!!Total:!!$45,000 to $49,999 Household Income … tract    \n\n\n\n\n0.7 Verify Your Variable Choices\nYour Task: Test your variables by getting a small sample of data.\n\n# Test the variables you found\ntest_vars &lt;- c(\n  total_pop = \"B01003_001\",      # Total population\n  median_income = \"B19013_001\",  # Median household income\n  median_age = \"B01002_001\"      # Median age\n)\n\n# Get data for just one state to test\ntest_data &lt;- get_acs(\n  geography = \"state\",\n  variables = test_vars,\n  state = \"PA\",\n  year = 2022\n)\n\n# Check that you got what you expected\ntest_data\n\n# A tibble: 3 × 5\n  GEOID NAME         variable        estimate   moe\n  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 42    Pennsylvania median_age          40.8   0.1\n2 42    Pennsylvania total_pop     12989208    NA  \n3 42    Pennsylvania median_income    73170   347  \n\n\n\n\n0.8 Common Variable Patterns\nReference guide for future use:\n\n# Common patterns to remember:\ncommon_variables &lt;- tribble(\n  ~concept, ~typical_code, ~description,\n  \"Total Population\", \"B01003_001\", \"Total population\",\n  \"Median Age\", \"B01002_001\", \"Median age of population\", \n  \"Median HH Income\", \"B19013_001\", \"Median household income\",\n  \"White Population\", \"B03002_003\", \"White alone population\",\n  \"Black Population\", \"B03002_004\", \"Black/African American alone\",\n  \"Hispanic Population\", \"B03002_012\", \"Hispanic or Latino population\",\n  \"Bachelor's Degree\", \"B15003_022\", \"Bachelor's degree or higher\",\n  \"Median Rent\", \"B25058_001\", \"Median contract rent\",\n  \"Median Home Value\", \"B25077_001\", \"Median value owner-occupied\"\n)\n\nprint(\"Common Census Variables:\")\n\n[1] \"Common Census Variables:\"\n\ncommon_variables\n\n# A tibble: 9 × 3\n  concept             typical_code description                  \n  &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;                        \n1 Total Population    B01003_001   Total population             \n2 Median Age          B01002_001   Median age of population     \n3 Median HH Income    B19013_001   Median household income      \n4 White Population    B03002_003   White alone population       \n5 Black Population    B03002_004   Black/African American alone \n6 Hispanic Population B03002_012   Hispanic or Latino population\n7 Bachelor's Degree   B15003_022   Bachelor's degree or higher  \n8 Median Rent         B25058_001   Median contract rent         \n9 Median Home Value   B25077_001   Median value owner-occupied  \n\n\nKey Tips for Variable Hunting:\n\nStart with concepts - search for the topic you want (income, age, housing)\nLook for “Median” vs “Mean” - median is usually more policy-relevant\nCheck the universe - some variables are for “households,” others for “population”\nTest with small data before running large queries\nBookmark useful variables for future projects (type them in your weekly notes!)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-1-single-variable-eda",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-1-single-variable-eda",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 1: Single Variable EDA",
    "text": "Exercise 1: Single Variable EDA\n\n1.1 Load and Inspect Data\n\n# Get county-level data for your state\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_pop = \"B01003_001\",       # Total population\n    median_income = \"B19013_001\",   # Median household income\n    median_age = \"B01002_001\"       # Median age\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n)\n\n# Clean county names\ncounty_data &lt;- county_data %&gt;%\n  mutate(county_name = str_remove(NAME, paste0(\", \", state_choice)))\n\n# Basic inspection\nglimpse(county_data)\n\nRows: 67\nColumns: 9\n$ GEOID          &lt;chr&gt; \"42001\", \"42003\", \"42005\", \"42007\", \"42009\", \"42011\", \"…\n$ NAME           &lt;chr&gt; \"Adams County, Pennsylvania\", \"Allegheny County, Pennsy…\n$ total_popE     &lt;dbl&gt; 104604, 1245310, 65538, 167629, 47613, 428483, 122640, …\n$ total_popM     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ median_incomeE &lt;dbl&gt; 78975, 72537, 61011, 67194, 58337, 74617, 59386, 60650,…\n$ median_incomeM &lt;dbl&gt; 3334, 869, 2202, 1531, 2606, 1191, 2058, 2167, 1516, 21…\n$ median_ageE    &lt;dbl&gt; 43.8, 40.6, 47.0, 44.9, 47.3, 39.9, 42.9, 43.9, 44.0, 4…\n$ median_ageM    &lt;dbl&gt; 0.2, 0.1, 0.2, 0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, …\n$ county_name    &lt;chr&gt; \"Adams County, Pennsylvania\", \"Allegheny County, Pennsy…\n\n\n\n\n1.2 Explore Income Distribution\nYour Task: Create a histogram of median household income and describe what you see.\n\n# Create histogram of median income\nggplot(county_data) +\n  aes(x = median_incomeE) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Median Household Income\",\n    x = \"Median Household Income ($)\",\n    y = \"Number of Counties\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n1.3 Box Plot for Outlier Detection\nYour Task: Create a boxplot to identify specific outlier counties.\n\n# Box plot to see outliers clearly\nggplot(county_data) +\n  aes(y = median_incomeE) +\n  geom_boxplot(fill = \"lightblue\", width = 0.5) +\n  labs(\n    title = \"Median Income Distribution with Outliers\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Identify the outlier counties\nincome_outliers &lt;- county_data %&gt;%\n  mutate(\n    Q1 = quantile(median_incomeE, 0.25, na.rm = TRUE),\n    Q3 = quantile(median_incomeE, 0.75, na.rm = TRUE),\n    IQR = Q3 - Q1,\n    outlier = median_incomeE &lt; (Q1 - 1.5 * IQR) | median_incomeE &gt; (Q3 + 1.5 * IQR)\n  ) %&gt;%\n  filter(outlier) %&gt;%\n  select(county_name, median_incomeE)\n\nprint(\"Outlier counties:\")\n\n[1] \"Outlier counties:\"\n\nincome_outliers\n\n# A tibble: 3 × 2\n  county_name                     median_incomeE\n  &lt;chr&gt;                                    &lt;dbl&gt;\n1 Bucks County, Pennsylvania              107826\n2 Chester County, Pennsylvania            118574\n3 Montgomery County, Pennsylvania         107441\n\n\n\n\n1.4 Challenge Exercise: Population Distribution\nYour Task: Create your own visualization of population distribution and identify outliers.\nRequirements:\n\nCreate a histogram of total population (total_popE)\nUse a different color than the income example (try “darkgreen” or “purple”)\nAdd appropriate labels and title\nCreate a boxplot to identify population outliers\nFind and list the 3 most populous and 3 least populous counties\n\n\n# Histogram of total population\nlibrary(scales)\n\nggplot(county_data) +\n  aes(x = total_popE) +\n  geom_histogram(bins = 15, fill = \"darkgreen\", color = \"white\", alpha = 0.75) +\n  labs(\n    title = \"Distribution of Total Population (Counties in PA)\",\n    x = \"Total Population\",\n    y = \"Number of Counties\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_minimal()\n\n\n\n\n\n\n\n# Boxplot to identify population outliers\nggplot(county_data) +\n  aes(y = total_popE) +\n  geom_boxplot(fill = \"purple\", width = 0.5, alpha = 0.7) +\n  labs(\n    title = \"County Population with Outliers Highlighted\",\n    y = \"Total Population\"\n  ) +\n  scale_y_continuous(labels = comma) +\n  theme_minimal()\n\n\n\n\n\n\n\n# Identify outliers using the 1.5 * IQR rule\npop_outliers &lt;- county_data %&gt;%\n  mutate(\n    Q1 = quantile(total_popE, 0.25, na.rm = TRUE),\n    Q3 = quantile(total_popE, 0.75, na.rm = TRUE),\n    IQR = Q3 - Q1,\n    outlier = total_popE &lt; (Q1 - 1.5 * IQR) | total_popE &gt; (Q3 + 1.5 * IQR)\n  ) %&gt;%\n  filter(outlier) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  arrange(desc(total_popE))\n\ncat(\"Population outlier counties (by 1.5*IQR rule):\\n\")\n\nPopulation outlier counties (by 1.5*IQR rule):\n\npop_outliers %&gt;%\n  mutate(total_popE = comma(total_popE)) %&gt;%\n  print(n = Inf)\n\n# A tibble: 7 × 2\n  county_name                       total_popE\n  &lt;chr&gt;                             &lt;chr&gt;     \n1 Philadelphia County, Pennsylvania 1,593,208 \n2 Allegheny County, Pennsylvania    1,245,310 \n3 Montgomery County, Pennsylvania   856,399   \n4 Bucks County, Pennsylvania        645,163   \n5 Delaware County, Pennsylvania     575,312   \n6 Lancaster County, Pennsylvania    553,202   \n7 Chester County, Pennsylvania      536,474   \n\n# Top 3 most populous and bottom 3 least populous counties\ntop3_populous &lt;- county_data %&gt;%\n  arrange(desc(total_popE)) %&gt;%\n  slice_head(n = 3) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  mutate(rank = \"Most Populous (Top 3)\")\n\nbottom3_populous &lt;- county_data %&gt;%\n  arrange(total_popE) %&gt;%\n  slice_head(n = 3) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  mutate(rank = \"Least Populous (Bottom 3)\")\n\npop_summary &lt;- bind_rows(top3_populous, bottom3_populous) %&gt;%\n  mutate(total_popE = comma(total_popE))\n\ncat(\"\\nTop/Bottom population summary:\\n\")\n\n\nTop/Bottom population summary:\n\npop_summary\n\n# A tibble: 6 × 3\n  county_name                       total_popE rank                     \n  &lt;chr&gt;                             &lt;chr&gt;      &lt;chr&gt;                    \n1 Philadelphia County, Pennsylvania 1,593,208  Most Populous (Top 3)    \n2 Allegheny County, Pennsylvania    1,245,310  Most Populous (Top 3)    \n3 Montgomery County, Pennsylvania   856,399    Most Populous (Top 3)    \n4 Cameron County, Pennsylvania      4,536      Least Populous (Bottom 3)\n5 Sullivan County, Pennsylvania     5,880      Least Populous (Bottom 3)\n6 Forest County, Pennsylvania       6,959      Least Populous (Bottom 3)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-2-two-variable-relationships",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-2-two-variable-relationships",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 2: Two Variable Relationships",
    "text": "Exercise 2: Two Variable Relationships\n\n2.1 Population vs Income Scatter Plot\nYour Task: Explore the relationship between population size and median income.\n\n# Basic scatter plot\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point() +\n  labs(\n    title = \"Population vs Median Income\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n2.2 Add Trend Line and Labels\nYour Task: Improve the plot by adding a trend line and labeling interesting points.\n\n# Enhanced scatter plot with trend line\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n  labs(\n    title = \"Population vs Median Income in Pennsylvania Counties\",\n    subtitle = \"2018-2022 ACS 5-Year Estimates\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\",\n    caption = \"Source: U.S. Census Bureau\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Calculate correlation\ncorrelation &lt;- cor(county_data$total_popE, county_data$median_incomeE, use = \"complete.obs\")\nprint(paste(\"Correlation coefficient:\", round(correlation, 3)))\n\n[1] \"Correlation coefficient: 0.457\"\n\n\n\n\n2.3 Deal with Skewed Data\nYour Task: The population data is highly skewed. Try a log transformation.\n\n# Log-transformed scatter plot\nggplot(county_data) +\n  aes(x = log(total_popE), y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(\n    title = \"Log(Population) vs Median Income\",\n    x = \"Log(Total Population)\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\nQuestion: Does the log transformation reveal a clearer relationship?\n\n\n2.4 Challenge Exercise: Age vs Income Relationship\nYour Task: Explore the relationship between median age and median income using different visualization techniques.\nRequirements:\n\nCreate a scatter plot with median age on x-axis and median income on y-axis\nUse red points (color = \"red\") with 50% transparency (alpha = 0.5)\nAdd a smooth trend line using method = \"loess\" instead of “lm”\nUse the “dark” theme (theme_dark())\nFormat the y-axis with dollar signs\nAdd a title that mentions both variables\n\n\n# Scatter plot with median age vs median income\nggplot(county_data) +\n  aes(x = median_ageE, y = median_incomeE) +\n  geom_point(color = \"red\", alpha = 0.5, size = 2) + \n  geom_smooth(method = \"loess\", se = TRUE, color = \"blue\") +\n  labs(\n    title = \"Median Age vs Median Household Income in Pennsylvania Counties\",\n    subtitle = \"2018-2022 ACS 5-Year Estimates\",\n    x = \"Median Age (years)\",\n    y = \"Median Household Income ($)\",\n    caption = \"Source: U.S. Census Bureau\"\n  ) +\n  theme_dark() +\n  scale_y_continuous(labels = dollar)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-3-data-quality-visualization",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-3-data-quality-visualization",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 3: Data Quality Visualization",
    "text": "Exercise 3: Data Quality Visualization\n\n3.1 Visualize Margins of Error\nYour Task: Create a visualization showing how data reliability varies across counties.\n\n# Calculate MOE percentages\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    income_moe_pct = (median_incomeM / median_incomeE) * 100,\n    pop_category = case_when(\n      total_popE &lt; 50000 ~ \"Small (&lt;50K)\",\n      total_popE &lt; 200000 ~ \"Medium (50K-200K)\",\n      TRUE ~ \"Large (200K+)\"\n    )\n  )\n\n# MOE by population size\nggplot(county_reliability) +\n  aes(x = total_popE, y = income_moe_pct) +\n  geom_point(alpha = 0.7) +\n  geom_hline(yintercept = 10, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Data Reliability Decreases with Population Size\",\n    x = \"Total Population\",\n    y = \"Margin of Error (%)\",\n    caption = \"Red line = 10% reliability threshold\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma)\n\n\n\n\n\n\n\n\n\n\n3.2 Compare Reliability by County Size\nYour Task: Use box plots to compare MOE across county size categories.\n\n# Box plots by population category\nggplot(county_reliability) +\n  aes(x = pop_category, y = income_moe_pct, fill = pop_category) +\n  geom_boxplot() +\n  labs(\n    title = \"Data Reliability by County Size Category\",\n    x = \"Population Category\",\n    y = \"Margin of Error (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")  # Remove legend since x-axis is clear\n\n\n\n\n\n\n\n\n\n\n3.3 Challenge Exercise: Age Data Reliability\nYour Task: Analyze the reliability of median age data across counties.\nRequirements:\n\nCalculate MOE percentage for median age (median_ageM / median_ageE * 100)\nCreate a scatter plot showing population vs age MOE percentage\nUse purple points (color = \"purple\") with size = 2\nAdd a horizontal line at 5% MOE using geom_hline() with a blue dashed line\nUse theme_classic()instead of theme_minimal()\nCreate a boxplot comparing age MOE across the three population categories\n\n\n# Calculate MOE percentage for median age\ncounty_age_reliability &lt;- county_data %&gt;%\n  mutate(\n    age_moe_pct = (median_ageM / median_ageE) * 100,\n    pop_category = case_when(\n      total_popE &lt; 50000 ~ \"Small (&lt;50K)\",\n      total_popE &lt; 200000 ~ \"Medium (50K-200K)\",\n      TRUE ~ \"Large (200K+)\"\n    )\n  )\n\n# Scatter plot: population vs age MOE %\nggplot(county_age_reliability) +\n  aes(x = total_popE, y = age_moe_pct) +\n  geom_point(color = \"purple\", size = 2, alpha = 0.7) +\n  geom_hline(yintercept = 5, color = \"blue\", linetype = \"dashed\") +\n  labs(\n    title = \"Reliability of Median Age Estimates Across Counties\",\n    x = \"Total Population\",\n    y = \"Median Age Margin of Error (%)\",\n    caption = \"Blue dashed line = 5% threshold\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_classic()\n\n\n\n\n\n\n\n# Boxplot comparing age MOE across population categories\nggplot(county_age_reliability) +\n  aes(x = pop_category, y = age_moe_pct, fill = pop_category) +\n  geom_boxplot() +\n  labs(\n    title = \"Median Age Reliability by County Size Category\",\n    x = \"Population Category\",\n    y = \"Median Age Margin of Error (%)\"\n  ) +\n  theme_classic() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-4-multiple-variables-with-color-and-faceting",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-4-multiple-variables-with-color-and-faceting",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 4: Multiple Variables with Color and Faceting",
    "text": "Exercise 4: Multiple Variables with Color and Faceting\n\n4.1 Three-Variable Scatter Plot\nYour Task: Add median age as a color dimension to the population-income relationship.\n\n# Three-variable scatter plot\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE, color = median_ageE) +\n  geom_point(size = 2, alpha = 0.7) +\n  scale_color_viridis_c(name = \"Median\\nAge\") +\n  labs(\n    title = \"Population, Income, and Age Patterns\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n4.2 Create Categories for Faceting\nYour Task: Create age categories and use faceting to compare patterns.\n\n# Create age categories and faceted plot\ncounty_faceted &lt;- county_data %&gt;%\n  mutate(\n    age_category = case_when(\n      median_ageE &lt; 40 ~ \"Young (&lt; 40)\",\n      median_ageE &lt; 45 ~ \"Middle-aged (40-45)\",\n      TRUE ~ \"Older (45+)\"\n    )\n  )\n\nggplot(county_faceted) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~age_category) +\n  labs(\n    title = \"Population-Income Relationship by Age Profile\",\n    x = \"Total Population\",\n    y = \"Median Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\nQuestion: Do the relationships between population and income differ by age profile?\nYour Task: Create a visualization using income categories and multiple aesthetic mappings.\nRequirements:\n\nCreate income categories: “Low” (&lt;$50k), “Middle” ($50k-$80k), “High” (&gt;$80k)\nMake a scatter plot with population (x) vs median age (y) - Color points by income category\nSize points by the margin of error for income (median_incomeM)\nUse the “Set2” color palette: scale_color_brewer(palette = \"Set2\") **note: you’ll need to load the RColorBrewer package for this`\nFacet by income category using facet_wrap()\nUse theme_bw() theme\n\n\n# Create income categories\ncounty_income_cats &lt;- county_data %&gt;%\n  mutate(\n    income_category = case_when(\n      median_incomeE &lt; 50000 ~ \"Low (&lt;$50k)\",\n      median_incomeE &lt; 80000 ~ \"Middle ($50k-$80k)\",\n      TRUE ~ \"High (&gt;$80k)\"\n    )\n  )\n\n# Scatter plot with multiple aesthetics\nggplot(county_income_cats) +\n  aes(\n    x = total_popE,\n    y = median_ageE,\n    color = income_category,\n    size = median_incomeM\n  ) +\n  geom_point(alpha = 0.7) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Population vs Median Age by Income Category\",\n    x = \"Total Population\",\n    y = \"Median Age (years)\",\n    color = \"Income Category\",\n    size = \"Income Margin of Error\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_bw() +\n  facet_wrap(~income_category)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-5-data-joins-and-integration",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-5-data-joins-and-integration",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 5: Data Joins and Integration",
    "text": "Exercise 5: Data Joins and Integration\n\n5.1 Get Additional Census Data\nYour Task: Load educational attainment data and join it with our existing data.\n\n# Get educational attainment data\neducation_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_25plus = \"B15003_001\",    # Total population 25 years and over\n    bachelor_plus = \"B15003_022\"    # Bachelor's degree or higher\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  mutate(\n    pct_college = (bachelor_plusE / total_25plusE) * 100,\n    county_name = str_remove(NAME, paste0(\", \", state_choice))\n  ) %&gt;%\n  select(GEOID, county_name, pct_college)\n\n# Check the data\nhead(education_data)\n\n# A tibble: 6 × 3\n  GEOID county_name                    pct_college\n  &lt;chr&gt; &lt;chr&gt;                                &lt;dbl&gt;\n1 42001 Adams County, Pennsylvania           13.9 \n2 42003 Allegheny County, Pennsylvania       25.4 \n3 42005 Armstrong County, Pennsylvania       12.7 \n4 42007 Beaver County, Pennsylvania          18.3 \n5 42009 Bedford County, Pennsylvania          9.73\n6 42011 Berks County, Pennsylvania           17.2 \n\n\n\n\n5.2 Join the Datasets\nYour Task: Join the education data with our main county dataset.\n\n# Perform the join\ncombined_data &lt;- county_data %&gt;%\n  left_join(education_data, by = \"GEOID\")\n\n# Check the join worked\ncat(\"Original data rows:\", nrow(county_data), \"\\n\")\n\nOriginal data rows: 67 \n\ncat(\"Combined data rows:\", nrow(combined_data), \"\\n\")\n\nCombined data rows: 67 \n\ncat(\"Missing education data:\", sum(is.na(combined_data$pct_college)), \"\\n\")\n\nMissing education data: 0 \n\n# View the combined data\nhead(combined_data)\n\n# A tibble: 6 × 11\n  GEOID NAME     total_popE total_popM median_incomeE median_incomeM median_ageE\n  &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt;\n1 42001 Adams C…     104604         NA          78975           3334        43.8\n2 42003 Alleghe…    1245310         NA          72537            869        40.6\n3 42005 Armstro…      65538         NA          61011           2202        47  \n4 42007 Beaver …     167629         NA          67194           1531        44.9\n5 42009 Bedford…      47613         NA          58337           2606        47.3\n6 42011 Berks C…     428483         NA          74617           1191        39.9\n# ℹ 4 more variables: median_ageM &lt;dbl&gt;, county_name.x &lt;chr&gt;,\n#   county_name.y &lt;chr&gt;, pct_college &lt;dbl&gt;\n\n\n\n\n5.3 Analyze the New Relationship\nYour Task: Explore the relationship between education and income.\n\n# Education vs Income scatter plot\nggplot(combined_data) +\n  aes(x = pct_college, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(\n    title = \"Education vs Income Across Counties\",\n    x = \"Percent with Bachelor's Degree or Higher\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Calculate correlation\nedu_income_cor &lt;- cor(combined_data$pct_college, combined_data$median_incomeE, use = \"complete.obs\")\nprint(paste(\"Education-Income Correlation:\", round(edu_income_cor, 3)))\n\n[1] \"Education-Income Correlation: 0.811\"\n\n\n\n\n5.4 Get Housing Data and Triple Join\nYour Task: Add housing cost data to create a three-way analysis.\n\n# Get housing cost data\nhousing_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_rent = \"B25058_001\",     # Median contract rent\n    median_home_value = \"B25077_001\" # Median value of owner-occupied units\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  select(GEOID, median_rent = median_rentE, median_home_value = median_home_valueE)\n\n# Join all three datasets\nfull_data &lt;- combined_data %&gt;%\n  left_join(housing_data, by = \"GEOID\")\n\n# Create a housing affordability measure\nfull_data &lt;- full_data %&gt;%\n  mutate(\n    rent_to_income = (median_rent * 12) / median_incomeE * 100,\n    income_category = case_when(\n      median_incomeE &lt; 50000 ~ \"Low Income\",\n      median_incomeE &lt; 80000 ~ \"Middle Income\",\n      TRUE ~ \"High Income\"\n    )\n  )\n\nhead(full_data)\n\n# A tibble: 6 × 15\n  GEOID NAME     total_popE total_popM median_incomeE median_incomeM median_ageE\n  &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt;\n1 42001 Adams C…     104604         NA          78975           3334        43.8\n2 42003 Alleghe…    1245310         NA          72537            869        40.6\n3 42005 Armstro…      65538         NA          61011           2202        47  \n4 42007 Beaver …     167629         NA          67194           1531        44.9\n5 42009 Bedford…      47613         NA          58337           2606        47.3\n6 42011 Berks C…     428483         NA          74617           1191        39.9\n# ℹ 8 more variables: median_ageM &lt;dbl&gt;, county_name.x &lt;chr&gt;,\n#   county_name.y &lt;chr&gt;, pct_college &lt;dbl&gt;, median_rent &lt;dbl&gt;,\n#   median_home_value &lt;dbl&gt;, rent_to_income &lt;dbl&gt;, income_category &lt;chr&gt;\n\n\n\n\n5.5 Advanced Multi-Variable Analysis\nYour Task: Create a comprehensive visualization showing multiple relationships.\n\n# Complex multi-variable plot\nggplot(full_data) +\n  aes(x = pct_college, y = rent_to_income, \n      color = income_category, size = total_popE) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Education, Housing Affordability, and Income Patterns\",\n    subtitle = \"Larger points = larger population\",\n    x = \"Percent with Bachelor's Degree or Higher\",\n    y = \"Annual Rent as % of Median Income\",\n    color = \"Income Category\",\n    size = \"Population\"\n  ) +\n  theme_minimal() +\n  guides(size = guide_legend(override.aes = list(alpha = 1)))"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-6-publication-ready-visualization",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-6-publication-ready-visualization",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 6: Publication-Ready Visualization",
    "text": "Exercise 6: Publication-Ready Visualization\n\n6.1 Create a Policy-Focused Visualization\nYour Task: Combine multiple visualizations to tell a more complete story about county characteristics.\n\n# Create a multi-panel figure\nlibrary(patchwork)  # For combining plots\n\n# Plot 1: Income distribution\np1 &lt;- ggplot(full_data) +\n  aes(x = median_incomeE) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(title = \"A) Income Distribution\", \n       x = \"Median Income ($)\", y = \"Counties\") +\n  scale_x_continuous(labels = dollar) +\n  theme_minimal()\n\n# Plot 2: Education vs Income\np2 &lt;- ggplot(full_data) +\n  aes(x = pct_college, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"B) Education vs Income\",\n       x = \"% College Educated\", y = \"Median Income ($)\") +\n  scale_y_continuous(labels = dollar) +\n  theme_minimal()\n\n# Plot 3: Housing affordability by income category\np3 &lt;- ggplot(full_data) +\n  aes(x = income_category, y = rent_to_income, fill = income_category) +\n  geom_boxplot() +\n  labs(title = \"C) Housing Affordability by Income\",\n       x = \"Income Category\", y = \"Rent as % of Income\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Plot 4: Data reliability by population\np4 &lt;- ggplot(county_reliability) +\n  aes(x = total_popE, y = income_moe_pct) +\n  geom_point(alpha = 0.7) +\n  geom_hline(yintercept = 10, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"D) Data Reliability\",\n       x = \"Population\", y = \"MOE (%)\") +\n  scale_x_continuous(labels = comma) +\n  theme_minimal()\n\n# Combine all plots\ncombined_plot &lt;- (p1 | p2) / (p3 | p4)\ncombined_plot + plot_annotation(\n  title = \"Pennsylvania County Analysis: Income, Education, and Housing Patterns\",\n  caption = \"Source: American Community Survey 2018-2022\"\n)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-7-ethical-data-communication---implementing-research-recommendations",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-7-ethical-data-communication---implementing-research-recommendations",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 7: Ethical Data Communication - Implementing Research Recommendations",
    "text": "Exercise 7: Ethical Data Communication - Implementing Research Recommendations\nBackground: Research by Jurjevich et al. (2018) found that only 27% of planners warn users about unreliable ACS data, violating AICP ethical standards. In this exercise, you’ll practice the five research-based guidelines for ethical ACS data communication.\n\n7.1 Create Professional Data Tables with Uncertainty\nYour Task: Follow the Jurjevich et al. guidelines to create an ethical data presentation.\n\n# Get comprehensive data for ethical analysis\nethical_demo_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_income = \"B19013_001\",   # Median household income\n    total_25plus = \"B15003_001\",    # Total population 25 years and over\n    bachelor_plus = \"B15003_022\",   # Bachelor's degree or higher\n    total_pop = \"B01003_001\"        # Total population\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  mutate(\n    # Calculate derived statistics\n    pct_college = (bachelor_plusE / total_25plusE) * 100,\n    \n    # Calculate MOE for percentage using error propagation\n    pct_college_moe = pct_college * sqrt((bachelor_plusM/bachelor_plusE)^2 + (total_25plusM/total_25plusE)^2),\n    \n    # Calculate coefficient of variation for all key variables\n    income_cv = (median_incomeM / median_incomeE) * 100,\n    education_cv = (pct_college_moe / pct_college) * 100,\n    \n    # Create reliability categories based on CV\n    income_reliability = case_when(\n      income_cv &lt; 12 ~ \"High\",\n      income_cv &lt;= 40 ~ \"Moderate\", \n      TRUE ~ \"Low\"\n    ),\n    \n    education_reliability = case_when(\n      education_cv &lt; 12 ~ \"High\",\n      education_cv &lt;= 40 ~ \"Moderate\",\n      TRUE ~ \"Low\"\n    ),\n    \n    # Create color coding for reliability\n    income_color = case_when(\n      income_reliability == \"High\" ~ \"🟢\",\n      income_reliability == \"Moderate\" ~ \"🟡\",\n      TRUE ~ \"🔴\"\n    ),\n    \n    education_color = case_when(\n      education_reliability == \"High\" ~ \"🟢\",\n      education_reliability == \"Moderate\" ~ \"🟡\", \n      TRUE ~ \"🔴\"\n    ),\n    \n    # Clean county names\n    county_name = str_remove(NAME, paste0(\", \", state_choice))\n  )\n\n# Create ethical data table focusing on least reliable estimates\nethical_data_table &lt;- ethical_demo_data %&gt;%\n  select(county_name, median_incomeE, median_incomeM, income_cv, income_color,\n         pct_college, pct_college_moe, education_cv, education_color) %&gt;%\n  arrange(desc(income_cv)) %&gt;%  # Show least reliable first\n  slice_head(n = 10)\n\n# Create professional table following guidelines\nlibrary(knitr)\nlibrary(kableExtra)\n\nethical_data_table %&gt;%\n  select(county_name, median_incomeE, median_incomeM, income_cv, income_color) %&gt;%\n  kable(\n    col.names = c(\"County\", \"Median Income\", \"Margin of Error\", \n                  \"CV (%)\", \"Reliability\"),\n    caption = \"Pennsylvania Counties: Median Household Income with Statistical Uncertainty\",\n    format.args = list(big.mark = \",\")\n  ) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  footnote(\n    general = c(\"Coefficient of Variation (CV) indicates reliability:\",\n                \"🟢 High reliability (CV &lt; 12%)\",\n                \"🟡 Moderate reliability (CV 12-40%)\", \n                \"🔴 Low reliability (CV &gt; 40%)\",\n                \"Following Jurjevich et al. (2018) research recommendations\",\n                \"Source: American Community Survey 2018-2022 5-Year Estimates\"),\n    general_title = \"Notes:\"\n  )\n\n\nPennsylvania Counties: Median Household Income with Statistical Uncertainty\n\n\nCounty\nMedian Income\nMargin of Error\nCV (%)\nReliability\n\n\n\n\nForest County, Pennsylvania\n46,188\n4,612\n9.985278\n🟢 |\n\n\nSullivan County, Pennsylvania\n62,910\n5,821\n9.252901\n🟢 |\n\n\nUnion County, Pennsylvania\n64,914\n4,753\n7.321995\n🟢 |\n\n\nMontour County, Pennsylvania\n72,626\n5,146\n7.085617\n🟢 |\n\n\nElk County, Pennsylvania\n61,672\n4,091\n6.633480\n🟢 |\n\n\nGreene County, Pennsylvania\n66,283\n4,247\n6.407374\n🟢 |\n\n\nCameron County, Pennsylvania\n46,186\n2,605\n5.640237\n🟢 |\n\n\nSnyder County, Pennsylvania\n65,914\n3,666\n5.561793\n🟢 |\n\n\nCarbon County, Pennsylvania\n64,538\n3,424\n5.305402\n🟢 |\n\n\nWarren County, Pennsylvania\n57,925\n3,005\n5.187743\n🟢 |\n\n\n\nNotes:\n\n\n\n\n\n\n Coefficient of Variation (CV) indicates reliability:\n\n\n\n\n\n\n 🟢 High reliability (CV &lt; 12%)\n\n\n\n\n\n\n 🟡 Moderate reliability (CV 12-40%)\n\n\n\n\n\n\n 🔴 Low reliability (CV &gt; 40%)\n\n\n\n\n\n\n Following Jurjevich et al. (2018) research recommendations\n\n\n\n\n\n\n Source: American Community Survey 2018-2022 5-Year Estimates\n\n\n\n\n\n\n\n\n\n\n\n\n7.3 Now try Census Tracts\n\n# Get census tract poverty data for Philadelphia\nphilly_poverty &lt;- get_acs(\n    geography = \"tract\",\n    variables = c(\n      poverty_pop = \"B17001_001\",     \n      poverty_below = \"B17001_002\"    \n    ),\n    state = \"PA\",\n    county = \"101\",\n    year = 2022,\n    output = \"wide\"\n  ) %&gt;%\n  filter(poverty_popE &gt; 0) %&gt;%  # Remove tracts with no poverty data\n  mutate(\n    # Calculate poverty rate and its MOE\n    poverty_rate = (poverty_belowE / poverty_popE) * 100,\n    \n    # MOE for derived percentage using error propagation\n    poverty_rate_moe = poverty_rate * sqrt((poverty_belowM/poverty_belowE)^2 + (poverty_popM/poverty_popE)^2),\n    \n    # Coefficient of variation\n    poverty_cv = (poverty_rate_moe / poverty_rate) * 100,\n    \n    # Reliability assessment\n    reliability = case_when(\n      poverty_cv &lt; 12 ~ \"High\",\n      poverty_cv &lt;= 40 ~ \"Moderate\",\n      poverty_cv &lt;= 75 ~ \"Low\",\n      TRUE ~ \"Very Low\"\n    ),\n    \n    # Color coding\n    reliability_color = case_when(\n      reliability == \"High\" ~ \"🟢\",\n      reliability == \"Moderate\" ~ \"🟡\",\n      reliability == \"Low\" ~ \"🟠\",\n      TRUE ~ \"🔴\"\n    ),\n    \n    # Population size categories\n    pop_category = case_when(\n      poverty_popE &lt; 500 ~ \"Very Small (&lt;500)\",\n      poverty_popE &lt; 1000 ~ \"Small (500-1000)\",\n      poverty_popE &lt; 1500 ~ \"Medium (1000-1500)\",\n      TRUE ~ \"Large (1500+)\"\n    )\n  )\n\n# Check the data quality crisis at tracts\nreliability_summary &lt;- philly_poverty %&gt;%\n  count(reliability) %&gt;%\n  mutate(\n    percentage = round(n / sum(n) * 100, 1),\n    total_bg = sum(n)\n  )\n\nprint(\"Philadelphia Census Tract Poverty Data Reliability:\")\n\n[1] \"Philadelphia Census Tract Poverty Data Reliability:\"\n\nreliability_summary %&gt;%\n  kable(\n    col.names = c(\"Data Quality\", \"Number of Tracts\", \"Percentage\", \"Total\"),\n    caption = \"The Data Quality Crisis: Philadelphia Census Tract Poverty Estimates\"\n  ) %&gt;%\n  kable_styling()\n\n\nThe Data Quality Crisis: Philadelphia Census Tract Poverty Estimates\n\n\nData Quality\nNumber of Tracts\nPercentage\nTotal\n\n\n\n\nLow\n295\n75.8\n389\n\n\nModerate\n53\n13.6\n389\n\n\nVery Low\n41\n10.5\n389\n\n\n\n\n\n\n# Show the most problematic estimates (following Guideline 3: provide context)\nworst_estimates &lt;- philly_poverty %&gt;%\n  filter(reliability %in% c(\"Low\", \"Very Low\")) %&gt;%\n  arrange(desc(poverty_cv)) %&gt;%\n  slice_head(n = 10)\n\nworst_estimates %&gt;%\n  select(GEOID, poverty_rate, poverty_rate_moe, poverty_cv, reliability_color, poverty_popE) %&gt;%\n  kable(\n    col.names = c(\"Tract\", \"Poverty Rate (%)\", \"MOE\", \"CV (%)\", \"Quality\", \"Pop Size\"),\n    caption = \"Guideline 3: Tracts with Least Reliable Poverty Estimates\",\n    digits = c(0, 1, 1, 1, 0, 0)\n  ) %&gt;%\n  kable_styling() %&gt;%\n  footnote(\n    general = c(\"These estimates should NOT be used for policy decisions\",\n                \"CV &gt; 75% indicates very low reliability\",\n                \"Recommend aggregation or alternative data sources\")\n  )\n\n\nGuideline 3: Tracts with Least Reliable Poverty Estimates\n\n\nTract\nPoverty Rate (%)\nMOE\nCV (%)\nQuality\nPop Size\n\n\n\n\n42101989100\n15.8\n45.2\n286.1\n🔴 |\n38|\n\n\n42101000101\n0.7\n1.1\n157.9\n🔴 |\n1947|\n\n\n42101980200\n37.9\n45.2\n119.4\n🔴 |\n66|\n\n\n42101023100\n3.8\n4.5\n119.4\n🔴 |\n1573|\n\n\n42101025600\n1.7\n2.0\n114.2\n🔴 |\n2642|\n\n\n42101014202\n1.7\n1.8\n107.0\n🔴 |\n2273|\n\n\n42101000403\n6.6\n6.7\n101.8\n🔴 |\n1047|\n\n\n42101026100\n4.7\n4.4\n95.0\n🔴 |\n2842|\n\n\n42101036502\n4.9\n4.7\n94.9\n🔴 |\n4284|\n\n\n42101032000\n21.8\n20.6\n94.8\n🔴 |\n7873|\n\n\n\nNote: \n\n\n\n\n\n\n\n These estimates should NOT be used for policy decisions\n\n\n\n\n\n\n\n CV &gt; 75% indicates very low reliability\n\n\n\n\n\n\n\n Recommend aggregation or alternative data sources"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#key-references-and-acknowledgments",
    "href": "labs/lab_3/week3_lab_exercise.html#key-references-and-acknowledgments",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Key References and Acknowledgments",
    "text": "Key References and Acknowledgments\nJurjevich, J. R., Griffin, A. L., Spielman, S. E., Folch, D. C., Merrick, M., & Nagle, N. N. (2018). Navigating statistical uncertainty: How urban and regional planners understand and work with American community survey (ACS) data for guiding policy. Journal of the American Planning Association, 84(2), 112-126.\nWalker, K. (2023). Analyzing US Census Data: Methods, Maps, and Models in R. Available at: https://walker-data.com/census-r/\nAI Acknowledgments: This lab was developed with coding assistance from Claude AI. I have run, reviewed, and edited the final version. Any remaining errors are my own."
  },
  {
    "objectID": "labs/lab_setup_instructions.html",
    "href": "labs/lab_setup_instructions.html",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Each week, you’ll complete lab assignments and add them to your portfolio website. This document explains the one-time setup process and the weekly workflow you’ll follow all semester.\n\n\n\n\n\nFirst, clone the course repository (you only need to do this once):\n\nOpen Terminal/Command Prompt\nNavigate to where you want to store course materials:\ncd ~/Desktop  # or wherever you keep school folders\nClone the course repository:\ngit clone https://github.com/MUSA-5080-Fall-2025/MUSA-5080-Fall-2025.git\n\nImportant: This creates a separate folder from your portfolio repository.\n\n\n\nIn your portfolio repository, create this folder structure:\nyour-portfolio/\n├── _quarto.yml           # You'll edit this\n├── index.qmd            # Your home page  \n├── weekly-notes/        # Already exists\n├── labs/                # CREATE THIS FOLDER\n│   └── lab_0/           # CREATE THIS FOLDER\n│       ├── lab_0_template.qmd    # You'll copy this file here\n│       └── data/        # CREATE THIS FOLDER (copy data folder)\n└── ... (other files)\nIn RStudio: 1. In the Files pane, click “New Folder” 2. Name it labs 3. Inside labs, create another folder called lab_0 4. Inside lab_0, create a folder called data\n\n\n\nOpen your _quarto.yml file and modify the navbar section to add a Labs menu:\nReplace this section:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\nWith this:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\nImportant: Make sure the indentation matches exactly! YAML is sensitive to spacing.\n\n\n\n\nSave your _quarto.yml file\nIn RStudio, go to Build → Render Website\nCheck that you now see a “Labs” dropdown in your navigation menu\n\n\n\n\n\n\n\n\nGo to the course repository\nNavigate to labs/lab_X/ (where X is the lab number)\nDownload or copy the lab template files\n\n\n\n\n\nIn your portfolio, create a new folder: labs/lab_X/\nCopy the template .qmd file into this folder\nCopy any data files into labs/lab_X/data/\n\n\n\n\n\nOpen the lab .qmd file\nUpdate the author field with your name\nComplete all the exercises\nFill in all the “[YOUR ANSWER]” sections\n\n\n\n\nAdd the new lab to your _quarto.yml file:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\n        - href: labs/lab_1/           # ADD NEW LABS HERE\n          text: Lab 1: [Lab Title]\n\n\n\n\nBuild your site: Build → Render Website\nCheck locally: Make sure everything looks good\nCommit your changes:\ngit add .\ngit commit -m \"Complete Lab X: [brief description]\"\nPush to GitHub:\ngit push origin main\nCheck your live site: Your portfolio should update automatically\n\n\n\n\n\n\n\n\nCheck your _quarto.yml indentation\nMake sure all file paths are correct\nLook for typos in file names\n\n\n\n\n\nVerify you added it to _quarto.yml\nCheck that the href: path matches your folder structure\nMake sure you rendered the website after making changes\n\n\n\n\n\nCheck that data files are in the right location\nVerify you’re using relative paths: \"data/filename.csv\"\nMake sure you’re working within your R project\n\n\n\n\n\nConfirm you committed and pushed all changes\nCheck that GitHub Actions completed successfully (green checkmark)\nWait a few minutes - updates can take time\n\n\n\n\n\n\nWork incrementally: Complete one exercise at a time, render frequently\nUse descriptive commit messages: “Complete filtering exercises for Lab 0”\nKeep files organized: Don’t put data files in wrong folders\nTest locally first: Always render and check before pushing\nAsk for help: Use office hours or discussion board if stuck\n\n\n\n\nyour-portfolio/\n├── _quarto.yml\n├── index.qmd\n├── weekly-notes/\n│   ├── index.qmd\n│   ├── week_01.qmd\n│   └── week_02.qmd\n├── labs/\n│   ├── lab_0/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── car_sales_data.csv\n│   ├── lab_1/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── census_data.csv\n│   └── lab_2/\n│       ├── index.qmd\n│       └── data/\n│           └── housing_data.csv\n└── docs/                    # Generated by Quarto\n    ├── index.html\n    ├── weekly-notes/\n    ├── labs/\n    └── ...\nBy the end of the semester, you’ll have a professional portfolio showcasing all your data analysis work!\n\n\n\n\nTechnical issues: Post on Canvas discussion board\nConceptual questions: Come to office hours\nGitHub problems: Include error messages in your questions"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#overview",
    "href": "labs/lab_setup_instructions.html#overview",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Each week, you’ll complete lab assignments and add them to your portfolio website. This document explains the one-time setup process and the weekly workflow you’ll follow all semester."
  },
  {
    "objectID": "labs/lab_setup_instructions.html#one-time-setup-week-1-only",
    "href": "labs/lab_setup_instructions.html#one-time-setup-week-1-only",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "First, clone the course repository (you only need to do this once):\n\nOpen Terminal/Command Prompt\nNavigate to where you want to store course materials:\ncd ~/Desktop  # or wherever you keep school folders\nClone the course repository:\ngit clone https://github.com/MUSA-5080-Fall-2025/MUSA-5080-Fall-2025.git\n\nImportant: This creates a separate folder from your portfolio repository.\n\n\n\nIn your portfolio repository, create this folder structure:\nyour-portfolio/\n├── _quarto.yml           # You'll edit this\n├── index.qmd            # Your home page  \n├── weekly-notes/        # Already exists\n├── labs/                # CREATE THIS FOLDER\n│   └── lab_0/           # CREATE THIS FOLDER\n│       ├── lab_0_template.qmd    # You'll copy this file here\n│       └── data/        # CREATE THIS FOLDER (copy data folder)\n└── ... (other files)\nIn RStudio: 1. In the Files pane, click “New Folder” 2. Name it labs 3. Inside labs, create another folder called lab_0 4. Inside lab_0, create a folder called data\n\n\n\nOpen your _quarto.yml file and modify the navbar section to add a Labs menu:\nReplace this section:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\nWith this:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\nImportant: Make sure the indentation matches exactly! YAML is sensitive to spacing.\n\n\n\n\nSave your _quarto.yml file\nIn RStudio, go to Build → Render Website\nCheck that you now see a “Labs” dropdown in your navigation menu"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#weekly-workflow-every-lab",
    "href": "labs/lab_setup_instructions.html#weekly-workflow-every-lab",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Go to the course repository\nNavigate to labs/lab_X/ (where X is the lab number)\nDownload or copy the lab template files\n\n\n\n\n\nIn your portfolio, create a new folder: labs/lab_X/\nCopy the template .qmd file into this folder\nCopy any data files into labs/lab_X/data/\n\n\n\n\n\nOpen the lab .qmd file\nUpdate the author field with your name\nComplete all the exercises\nFill in all the “[YOUR ANSWER]” sections\n\n\n\n\nAdd the new lab to your _quarto.yml file:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\n        - href: labs/lab_1/           # ADD NEW LABS HERE\n          text: Lab 1: [Lab Title]\n\n\n\n\nBuild your site: Build → Render Website\nCheck locally: Make sure everything looks good\nCommit your changes:\ngit add .\ngit commit -m \"Complete Lab X: [brief description]\"\nPush to GitHub:\ngit push origin main\nCheck your live site: Your portfolio should update automatically"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#troubleshooting",
    "href": "labs/lab_setup_instructions.html#troubleshooting",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Check your _quarto.yml indentation\nMake sure all file paths are correct\nLook for typos in file names\n\n\n\n\n\nVerify you added it to _quarto.yml\nCheck that the href: path matches your folder structure\nMake sure you rendered the website after making changes\n\n\n\n\n\nCheck that data files are in the right location\nVerify you’re using relative paths: \"data/filename.csv\"\nMake sure you’re working within your R project\n\n\n\n\n\nConfirm you committed and pushed all changes\nCheck that GitHub Actions completed successfully (green checkmark)\nWait a few minutes - updates can take time"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#tips-for-success",
    "href": "labs/lab_setup_instructions.html#tips-for-success",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Work incrementally: Complete one exercise at a time, render frequently\nUse descriptive commit messages: “Complete filtering exercises for Lab 0”\nKeep files organized: Don’t put data files in wrong folders\nTest locally first: Always render and check before pushing\nAsk for help: Use office hours or discussion board if stuck"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#example-portfolio-structure-after-several-labs",
    "href": "labs/lab_setup_instructions.html#example-portfolio-structure-after-several-labs",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "your-portfolio/\n├── _quarto.yml\n├── index.qmd\n├── weekly-notes/\n│   ├── index.qmd\n│   ├── week_01.qmd\n│   └── week_02.qmd\n├── labs/\n│   ├── lab_0/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── car_sales_data.csv\n│   ├── lab_1/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── census_data.csv\n│   └── lab_2/\n│       ├── index.qmd\n│       └── data/\n│           └── housing_data.csv\n└── docs/                    # Generated by Quarto\n    ├── index.html\n    ├── weekly-notes/\n    ├── labs/\n    └── ...\nBy the end of the semester, you’ll have a professional portfolio showcasing all your data analysis work!"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#questions",
    "href": "labs/lab_setup_instructions.html#questions",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Technical issues: Post on Canvas discussion board\nConceptual questions: Come to office hours\nGitHub problems: Include error messages in your questions"
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#are-current-property-tax-assessments-in-philadelphia-fair-and-accurate",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#are-current-property-tax-assessments-in-philadelphia-fair-and-accurate",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Are current property tax assessments in Philadelphia fair and accurate?",
    "text": "Are current property tax assessments in Philadelphia fair and accurate?\n\n\n\nProperty taxes depend on OPA’s assessed values.\n\nAssessments often deviate from actual sale prices.\n\nSome areas are consistently over- or under-assessed.\n\nUnequal assessments create unfair tax burdens.\n\n\n\n\nSource: Reinvestment Fund, Examining the Accuracy, Uniformity & Equity of Philadelphia’s 2023 Real Estate Assessments (Apr 2024)."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#motivations",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#motivations",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Motivations",
    "text": "Motivations\nFairness: Ensure residents pay taxes aligned with true property values.\nTransparency: Build trust through objective, data-based methods.\nEfficiency: Improve city revenue stability and policy planning.\n\nTraditional assessments rely on outdated, manual approaches.\n\n\nMachine learning models can better capture local market dynamics."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#data-sources",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#data-sources",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Data Sources",
    "text": "Data Sources\n\nPhiladelphia Property Sales (n= 24023,2023-2024)\nCensus ACS (Income, Education, Poverty)\nOpenDataPhilly (Number and Distance: Crime, Park&Recreation, Transportation, Hospital,School )"
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#spatial-distribution-of-housing-and-prices",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#spatial-distribution-of-housing-and-prices",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Spatial Distribution of Housing and Prices",
    "text": "Spatial Distribution of Housing and Prices\n\n\nWhere Are the Houses?\n\n\nWhere Are the Expensive Houses?"
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#larger-homes-higher-neighborhood-income-and-more-bathrooms-increase-prices-while-older-properties-tend-to-sell-for-less.",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#larger-homes-higher-neighborhood-income-and-more-bathrooms-increase-prices-while-older-properties-tend-to-sell-for-less.",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Larger homes, higher neighborhood income, and more bathrooms increase prices — while older properties tend to sell for less.",
    "text": "Larger homes, higher neighborhood income, and more bathrooms increase prices — while older properties tend to sell for less."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#adding-more-real-world-data-to-build-a-more-fair-and-accurate-housing-price-model",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#adding-more-real-world-data-to-build-a-more-fair-and-accurate-housing-price-model",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Adding more real-world data to build a more fair and accurate housing price model",
    "text": "Adding more real-world data to build a more fair and accurate housing price model\nM1: Basic home features (size, age) → simple but limited\nM2: + Census data → adds community context\nM3: + Spatial data → captures location effects\nM4: + Interactions → reflects real neighborhood differences"
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#home-size-and-bathrooms-remain-important-across-all-models-while-neighborhood-and-location-features-gain-influence-after-improving.",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#home-size-and-bathrooms-remain-important-across-all-models-while-neighborhood-and-location-features-gain-influence-after-improving.",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Home size and bathrooms remain important across all models, while neighborhood and location features gain influence after improving.",
    "text": "Home size and bathrooms remain important across all models, while neighborhood and location features gain influence after improving.\n\n\n\nBathrooms and Livable area stay top-ranked across all models\n\nIncome and Census tract rise in importance as they’re added\n\nFinal model shows Location Effects becoming dominant predictors of price"
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#model-performance-the-predicted-prices-from-our-final-model-align-strongly-with-actual-sales.",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#model-performance-the-predicted-prices-from-our-final-model-align-strongly-with-actual-sales.",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Model Performance: The predicted prices from our final model align strongly with actual sales.",
    "text": "Model Performance: The predicted prices from our final model align strongly with actual sales.\n   &gt; “Average Error($)” shows the average gap between predicted and actual prices (lower = more accurate)."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#the-map-highlights-neighborhoods-where-predicted-prices-differ-most-from-actual-sales.",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#the-map-highlights-neighborhoods-where-predicted-prices-differ-most-from-actual-sales.",
    "title": "Philadelphia Housing Price Prediction",
    "section": "The map highlights neighborhoods where predicted prices differ most from actual sales.",
    "text": "The map highlights neighborhoods where predicted prices differ most from actual sales.\n\n\nInterpretation\nBlue areas: Homes undervalued by the model → may face under-assessment\nRed areas: Homes overvalued → may face over-assessment\nCentral & southern zones: show the largest mismatches — indicating uneven market patterns\n &gt; The areas, shown in deep red or blue, are likely where property assessments are least accurate, and where tax fairness may be at greatest risk.\n &gt; These “hard-to-predict” areas should be prioritized for review in future assessment updates."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#three-evidence-based-recommendations",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#three-evidence-based-recommendations",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Three Evidence-Based Recommendations",
    "text": "Three Evidence-Based Recommendations\nReview Where the Model Shows the Largest Gaps → Our residual analysis pinpoints neighborhoods with the highest prediction errors — the same areas where assessments are likely least fair. Prioritize these zones for reassessment and data verification.\nUse the Model as a Fairness Benchmark → Instead of replacing official assessments, use the model as a cross-check tool to flag properties with unusually high or low assessed-to-predicted ratios.\nInstitutionalize Annual Model Updates → Retrain the model each year using new sales and census data so assessments stay current with real market trends, preventing future inequities."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#limitations-improvements",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#limitations-improvements",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Limitations & Improvements",
    "text": "Limitations & Improvements\nData gaps: Some neighborhoods have limited or inconsistent sales data, and important local factors like school quality or public amenities are not fully represented.\nSpatial variation: The model’s accuracy differs across regions — it performs very well in some areas but less so in others, suggesting that geography strongly influences results.\nSpatial modeling: Next, we will apply models that explicitly account for spatial relationships and neighborhood effects to improve prediction accuracy.\nData enhancement: We plan to expand data coverage in underrepresented areas to reduce bias and strengthen fairness across communities."
  },
  {
    "objectID": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#thank-you",
    "href": "Midterm/Yang_Chen_Fang_Gao_Xiang_Zhao_Presentation.html#thank-you",
    "title": "Philadelphia Housing Price Prediction",
    "section": "Thank You",
    "text": "Thank You\nTurning Data into Fairer Assessments\n\n\nProject Team\nXiaoqing Chen\nZicheng Xiang\nLingxuan Gao\nZhiyuan Zhao\nFan Yang\nZhe Fang\n\nContact\nSixers Consulting 6ers@upenn.edu|www.6ers.com\n\n\n\nPrepared for the City of Philadelphia — Office of Property Assessment (OPA)"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html",
    "href": "weekly-notes/week-02-notes.html",
    "title": "MUSA 5080 Notes #2",
    "section": "",
    "text": "Note\n\n\n\nWeek 2: Algorithmic Decision Making & Census Data\nDate: 09/15/2025"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-1-algorithmic-decision-making",
    "href": "weekly-notes/week-02-notes.html#part-1-algorithmic-decision-making",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 1: Algorithmic Decision Making",
    "text": "Part 1: Algorithmic Decision Making\n\nWhat Is An Algorithm?\n\n\nDefinition: A set of rules or instructions for solving a problem or completing a task\n\nExamples: - Recipe for cooking - Directions to get somewhere - Decision tree for hiring - Computer program that processes data to make predictions\n\n\n\n\nAlgorithmic Decision Making in Government\nSystems used to assist or replace human decision-makers\nBased on predictions from models that process historical data containing: - Inputs (“features”, “predictors”, “independent variables”, “x”) - Outputs (“labels”, “outcome”, “dependent variable”, “y”)\n\n\nReal-World Examples\n\n\nCriminal Justice Recidivism risk scores for bail and sentencing decisions\n\nHousing & Finance Mortgage lending and tenant screening algorithms\n\nHealthcare Patient care prioritization and resource allocation\n\n\n\n\nWhy Government Uses Algorithms\nGovernments have limited budgets and need to serve everyone\nAlgorithmic decision making promises: - Efficiency - process more cases faster - Consistency - same rules applied to everyone - Objectivity - removes human bias - Cost savings - fewer staff needed"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#when-algorithms-go-wrong",
    "href": "weekly-notes/week-02-notes.html#when-algorithms-go-wrong",
    "title": "MUSA 5080 Notes #2",
    "section": "When Algorithms Go Wrong",
    "text": "When Algorithms Go Wrong\n\nRemember: Data Analytics Is Subjective\nEvery step involves human choices: - Data cleaning decisions - Data coding or classification - Data collection - use of imperfect proxies - How I interpret results - What variables I put in the model\n\n\n\n\n\n\nImportant\n\n\n\nThese choices embed human values and biases\n\n\n\n\nCase Study 1: Healthcare Algorithm Bias\nThe Problem: Algorithm used to identify high-risk patients for additional care systematically discriminated against Black patients\nWhat Went Wrong: - Algorithm used healthcare costs as a proxy for need - Black patients typically incur lower costs due to systemic inequities in access - Result: Black patients under-prioritized despite equivalent levels of illness\nScale: Used by hospitals and insurers for over 200 million people annually\n\n\nCase Study 2: Criminal Justice Algorithm Bias\nCOMPAS Recidivism Prediction:\nThe Problem: - Algorithm 2x as likely to falsely flag Black defendants as high risk - White defendants often rated low risk even when they do reoffend\nWhy This Happens: - Historical arrest data reflects biased policing patterns - Socioeconomic proxies correlate with race - “Objective” data contains subjective human decisions\n\n\nCase Study 3: Dutch Welfare Fraud Detection\nThe Problem: - “Black box” system operated in secrecy - Impossible for individuals to understand or challenge decisions - Disproportionately targeted vulnerable populations\nCourt Ruling: - Breached privacy rights under European Convention on Human Rights - Highlighted unfair profiling and discrimination - System eventually shut down"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#key-lesson-designing-ethical-algorithms",
    "href": "weekly-notes/week-02-notes.html#key-lesson-designing-ethical-algorithms",
    "title": "MUSA 5080 Notes #2",
    "section": "Key Lesson: Designing Ethical Algorithms",
    "text": "Key Lesson: Designing Ethical Algorithms\n\nCritical Questions to Ask\nWhen designing algorithmic systems, consider:\n\nProxy: What would I use to stand in for what I want?\nBlind spot: What data gap or historical bias could skew results?\nHarm + Guardrail: Who could be harmed, and what’s one simple safeguard?\n\n\n\nExample: Emergency Response\n\nProxy: 911 call volume → stand-in for “need”\nBlind spot: Under-calling where trust/connectivity is low\nHarm + Guardrail: Wealthier areas over-prioritized → add a vulnerability boost (age/disability) and a minimum-service floor per zone\n\n\n\nPotential Guardrails\n\nPrioritize vulnerable groups\nCap disparities across areas (simple rule)\nHuman review + appeals for edge cases\nReplace a bad proxy (collect the right thing)\nPublish criteria & run a periodic bias check"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-2-census-data-foundations",
    "href": "weekly-notes/week-02-notes.html#part-2-census-data-foundations",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 2: Census Data Foundations",
    "text": "Part 2: Census Data Foundations\n\nWhy Census Data Matters\nCensus data is the foundation for: - Understanding community demographics - Allocating government resources - Tracking neighborhood change - Designing fair algorithms (like those we just discussed)\n\n\nCensus vs. American Community Survey\n\n\nDecennial Census (2020) - Everyone counted every 10 years - 9 basic questions: age, race, sex, housing - Constitutional requirement - Determines political representation\n\nAmerican Community Survey (ACS) - 3% of households surveyed annually - Detailed questions: income, education, employment, housing costs - Replaced the old “long form” in 2005 - A big source of data I’ll use this semester\n\n\n\n\nACS Estimates: What I Need to Know\n1-Year Estimates (areas &gt; 65,000 people) - Most current data, smallest sample\n5-Year Estimates (all areas including census tracts) - Most reliable data, largest sample - What I’ll use most often\n\n\n\n\n\n\nTip\n\n\n\nKey Point: All ACS data comes with margins of error - I need to learn to work with uncertainty\n\n\n\n\nCensus Geography Hierarchy\nNation\n├── Regions  \n├── States\n│   ├── Counties\n│   │   ├── Census Tracts (1,500-8,000 people)\n│   │   │   ├── Block Groups (600-3,000 people)  \n│   │   │   │   └── Blocks (≈85 people, Decennial only)\nMost policy analysis happens at: - County level - state and regional planning - Census tract level - neighborhood analysis - Block group level - very local analysis (tempting, but big MOEs)"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-3-working-with-census-data-in-r",
    "href": "weekly-notes/week-02-notes.html#part-3-working-with-census-data-in-r",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 3: Working with Census Data in R",
    "text": "Part 3: Working with Census Data in R\n\nBasic get_acs() Function\nMost important function I’ll use:\nlibrary(tidycensus)\n\n# Get state population data\nget_acs(\n  geography = \"state\",\n  variables = \"B01003_001\",\n  year = 2022,\n  survey = \"acs5\"\n)\nKey parameters: geography, variables, year, survey\n\n\nUnderstanding the Output\nEvery ACS result includes: - GEOID - Geographic identifier - NAME - Human-readable location name - variable - Census variable code - estimate - The actual value - moe - Margin of error\n\n\nWorking with Multiple Variables\n# Get county data with multiple variables\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_pop = \"B01003_001\",\n    median_income = \"B19013_001\"\n  ),\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n\nData Cleaning Essentials\n# Clean up messy geographic names\ncounty_data &lt;- county_data %&gt;%\n  mutate(\n    county_name = str_remove(NAME, \", Pennsylvania\"),\n    county_name = str_remove(county_name, \" County\")\n  )\n\n\nCalculating Data Reliability\n# Calculate MOE percentage and reliability categories\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    reliability = case_when(\n      moe_percentage &lt; 5 ~ \"High Confidence\",\n      moe_percentage &gt;= 5 & moe_percentage &lt;= 10 ~ \"Moderate\",\n      moe_percentage &gt; 10 ~ \"Low Confidence\"\n    )\n  )\n\n\nWorking with Margins of Error\nEvery ACS estimate comes with uncertainty\nRule of thumb: - Large MOE relative to estimate = less reliable - Small MOE relative to estimate = more reliable\nIn my analysis: - Always report MOE alongside estimates - Be cautious comparing estimates with overlapping error margins - Consider using 5-year estimates for greater reliability"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#connecting-the-dots",
    "href": "weekly-notes/week-02-notes.html#connecting-the-dots",
    "title": "MUSA 5080 Notes #2",
    "section": "Connecting the Dots",
    "text": "Connecting the Dots\n\nFrom Algorithms to Analysis\nToday’s key connections:\n\nAlgorithmic Decision Making → Understanding why my analysis matters for real policy decisions\nData Subjectivity → Why I need to emphasize transparent, reproducible methods in my work\nCensus Data → The foundation for most urban planning and policy analysis\nR Skills → The tools I need to do this work professionally and ethically\n\n\n\nQuestions for Reflection\nAs I work with data this semester, I should ask:\n\nWhat assumptions am I making in my data choices?\nWho might be excluded from my analysis?\nHow could my findings be misused if taken out of context?\nWhat would I want policymakers to understand about my methods?\n\n\n\n\n\n\n\nTip\n\n\n\nThese questions will make me a more thoughtful analyst and better future policymaker"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#summary",
    "href": "weekly-notes/week-02-notes.html#summary",
    "title": "MUSA 5080 Notes #2",
    "section": "Summary",
    "text": "Summary\nThis week I learned about the critical intersection between technical skills and ethical responsibility in data analysis. My key takeaways:\n\nAlgorithms are not neutral - they embed human choices and biases at every step\nReal-world consequences - algorithmic bias can systematically harm vulnerable populations\nCensus data is foundational but comes with inherent uncertainties that I must acknowledge\nTechnical competence must be paired with ethical awareness to create fair and effective policy tools\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember: Every data analysis decision I make has potential policy implications. I need to approach my work with both technical rigor and ethical consideration."
  },
  {
    "objectID": "weekly-notes/week-04-notes.html",
    "href": "weekly-notes/week-04-notes.html",
    "title": "MUSA 5080 Notes #4",
    "section": "",
    "text": "Note\n\n\n\nWeek 4: Spatial Data & GIS Operations in R\nDate: 09/29/2025"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#key-learning-objectives",
    "href": "weekly-notes/week-04-notes.html#key-learning-objectives",
    "title": "MUSA 5080 Notes #4",
    "section": "Key Learning Objectives",
    "text": "Key Learning Objectives\n\nUnderstand the vector data model and spatial data structures\nLearn to perform spatial operations (filtering, joining, distance calculations)\nMaster geometry operations (buffers, intersections, unions)\nUnderstand coordinate reference systems and projections\nApply spatial analysis to policy questions"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#connecting-to-previous-weeks",
    "href": "weekly-notes/week-04-notes.html#connecting-to-previous-weeks",
    "title": "MUSA 5080 Notes #4",
    "section": "Connecting to Previous Weeks",
    "text": "Connecting to Previous Weeks\nFrom our census data work, we’ve been analyzing: - County-level demographic patterns - Income, education, and population distributions - Data quality and reliability issues\nMissing piece: WHERE are these patterns occurring?"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#real-policy-questions-need-spatial-answers",
    "href": "weekly-notes/week-04-notes.html#real-policy-questions-need-spatial-answers",
    "title": "MUSA 5080 Notes #4",
    "section": "Real Policy Questions Need Spatial Answers",
    "text": "Real Policy Questions Need Spatial Answers\n\n\n\n\n\n\n\nQuestion\nSpatial Component\n\n\n\n\n“Which communities have the lowest income?”\nAre they clustered? Isolated? Near resources?\n\n\n“Where should we locate a new health clinic?”\nOptimize access for underserved populations\n\n\n“How do school districts compare?”\nAccount for geographic boundaries and spillovers\n\n\n“Is there environmental justice concern?”\nDo pollution sources cluster near vulnerable communities?"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-analysis-and-algorithmic-bias",
    "href": "weekly-notes/week-04-notes.html#spatial-analysis-and-algorithmic-bias",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Analysis and Algorithmic Bias",
    "text": "Spatial Analysis and Algorithmic Bias\nGeographic bias in algorithms: - Training data may under-represent certain areas - Spatial autocorrelation violates independence assumptions - Service delivery algorithms may reinforce geographic inequities\nExamples: - Rideshare algorithms avoiding certain neighborhoods - Crime prediction concentrating enforcement in specific areas - Social service algorithms missing rural communities\nOur role: Understand spatial patterns to design fairer systems"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#vector-data-model",
    "href": "weekly-notes/week-04-notes.html#vector-data-model",
    "title": "MUSA 5080 Notes #4",
    "section": "Vector Data Model",
    "text": "Vector Data Model\nReal world → Simplified geometric representations\nThree basic types: - Points → Locations (schools, hospitals, crime incidents) - Lines → Linear features (roads, rivers, transit routes)\n- Polygons → Areas (census tracts, neighborhoods, service areas)\nEach feature has: - Geometry → Shape and location - Attributes → Data about that feature (population, income, etc.)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#the-sf-package-simple-features-for-r",
    "href": "weekly-notes/week-04-notes.html#the-sf-package-simple-features-for-r",
    "title": "MUSA 5080 Notes #4",
    "section": "The sf Package: Simple Features for R",
    "text": "The sf Package: Simple Features for R\nWhy sf? - Modern replacement for older spatial packages - Integrates with tidyverse workflows - Follows international standards - Fast and reliable\nKey principle: Spatial data is just data.frame + geometry column"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#loading-spatial-data",
    "href": "weekly-notes/week-04-notes.html#loading-spatial-data",
    "title": "MUSA 5080 Notes #4",
    "section": "Loading Spatial Data",
    "text": "Loading Spatial Data\nCommon spatial data formats: - Shapefiles (.shp + supporting files) - GeoJSON (.geojson) - KML/KMZ (Google Earth) - Database connections (PostGIS)\n# Loading spatial data\nlibrary(sf)\nlibrary(tidyverse)\n\n# Load shapefile\ncounties &lt;- st_read(\"data/counties.shp\")\n\n# Load GeoJSON\nhospitals &lt;- st_read(\"data/hospitals.geojson\")\n\n# Load from tigris package\ntracts &lt;- tracts(\"PA\", year = 2022, cb = TRUE)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-subsetting",
    "href": "weekly-notes/week-04-notes.html#spatial-subsetting",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Subsetting",
    "text": "Spatial Subsetting\nExtract features based on spatial relationships\n# Basic spatial filtering\nlibrary(sf)\n\n# Filter counties that intersect with a study area\nstudy_area &lt;- st_read(\"data/study_area.shp\")\nfiltered_counties &lt;- st_filter(counties, study_area)\n\n# Filter using specific spatial relationships\nneighboring_counties &lt;- st_filter(counties, allegheny_county, .predicate = st_touches)\nKey functions: st_filter(), st_intersects(), st_touches(), st_within()"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#understanding-the-.predicate-parameter",
    "href": "weekly-notes/week-04-notes.html#understanding-the-.predicate-parameter",
    "title": "MUSA 5080 Notes #4",
    "section": "Understanding the .predicate Parameter",
    "text": "Understanding the .predicate Parameter\nThe .predicate tells st_filter() what spatial relationship to look for:\n# Basic structure:\nst_filter(data_to_filter, reference_geometry, .predicate = relationship)\nDifferent questions need different relationships:\n\n\n\n\n\n\n\n\nQuestion\nPredicate\nUse Case\n\n\n\n\n“Which counties border Allegheny?”\nst_touches\nNeighboring counties\n\n\n“Which tracts are IN Allegheny?”\nst_within\nComplete containment\n\n\n“Which tracts overlap a metro area?”\nst_intersects\nAny overlap\n\n\n\nDefault: If no .predicate specified, uses st_intersects"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-relationships-when-to-use-each",
    "href": "weekly-notes/week-04-notes.html#spatial-relationships-when-to-use-each",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Relationships: When to Use Each",
    "text": "Spatial Relationships: When to Use Each\n\n\n\n\n\n\n\n\nPredicate\nDefinition\nPolicy Use Case\n\n\n\n\nst_intersects()\nAny overlap at all\n“Counties affected by flooding”\n\n\nst_touches()\nShare boundary, no interior overlap\n“Neighboring counties”\n\n\nst_within()\nCompletely inside\n“Schools within district boundaries”\n\n\nst_contains()\nCompletely contains\n“Districts containing hospitals”\n\n\nst_overlaps()\nPartial overlap\n“Overlapping service areas”\n\n\nst_disjoint()\nNo spatial relationship\n“Counties separate from urban areas”\n\n\n\nMost common: st_intersects() (any overlap) and st_touches() (neighbors)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-joins",
    "href": "weekly-notes/week-04-notes.html#spatial-joins",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Joins",
    "text": "Spatial Joins\nCombine datasets based on spatial relationships\n# Spatial join: add county information to hospitals\nhospitals_with_county &lt;- st_join(hospitals, counties, join = st_within)\n\n# Count hospitals per county\nhospital_counts &lt;- counties %&gt;%\n  st_join(hospitals, join = st_contains) %&gt;%\n  group_by(NAME) %&gt;%\n  summarise(hospital_count = n())"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#distance-calculations",
    "href": "weekly-notes/week-04-notes.html#distance-calculations",
    "title": "MUSA 5080 Notes #4",
    "section": "Distance Calculations",
    "text": "Distance Calculations\n# Calculate distance from each tract centroid to nearest hospital\ntract_centroids &lt;- st_centroid(tracts)\ndistances &lt;- st_distance(tract_centroids, hospitals)\n\n# Find minimum distance to nearest hospital\nmin_distances &lt;- apply(distances, 1, min)\n\n# Convert to miles (if in meters)\nmin_distances_miles &lt;- as.numeric(min_distances) * 0.000621371"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#area-calculations",
    "href": "weekly-notes/week-04-notes.html#area-calculations",
    "title": "MUSA 5080 Notes #4",
    "section": "Area Calculations",
    "text": "Area Calculations\n# Calculate county areas\ncounties &lt;- counties %&gt;%\n  mutate(\n    area_sqkm = as.numeric(st_area(.)) / 1000000\n  )\nImportant: Units depend on coordinate reference system!\nNote about the dot (.): The dot represents the data being passed through the pipe (%&gt;%). So st_area(.) is equivalent to st_area(counties)."
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#buffer-operations",
    "href": "weekly-notes/week-04-notes.html#buffer-operations",
    "title": "MUSA 5080 Notes #4",
    "section": "Buffer Operations",
    "text": "Buffer Operations\nCreate zones around features\n# 10km buffer around all hospitals\nhospital_buffers &lt;- hospitals %&gt;%\n  st_buffer(dist = 10000)  # 10,000 meters\n\n# Different buffer sizes by hospital type\nhospital_buffers &lt;- hospitals %&gt;%\n  mutate(\n    buffer_size = case_when(\n      type == \"Major Medical Center\" ~ 15000,\n      type == \"Community Hospital\" ~ 10000,\n      type == \"Clinic\" ~ 5000\n    )\n  ) %&gt;%\n  st_buffer(dist = .$buffer_size)\nPolicy application: Service accessibility zones, environmental impact areas"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#intersection-operations",
    "href": "weekly-notes/week-04-notes.html#intersection-operations",
    "title": "MUSA 5080 Notes #4",
    "section": "Intersection Operations",
    "text": "Intersection Operations\nFind overlapping areas\nKey Difference: - st_filter() with predicates: Selects complete features (keeps or removes entire rows) - st_intersection() and st_union(): Modifies geometries (creates new shapes)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#when-to-use-each",
    "href": "weekly-notes/week-04-notes.html#when-to-use-each",
    "title": "MUSA 5080 Notes #4",
    "section": "When to Use Each",
    "text": "When to Use Each\nUse st_filter() when: - “Which census tracts touch hospital service areas?” - You want to select/identify features based on location - You need complete features with their original boundaries - You’re counting: “How many tracts are near hospitals?”\nUse st_intersection() when: - “What is the area of overlap between tracts and service zones?” - You need to calculate areas, populations, or other measures within specific boundaries - You’re doing spatial overlay analysis - You need to clip data to a study area\n# Example: Find overlapping areas\noverlap_areas &lt;- st_intersection(tracts, hospital_buffers)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#union-operations",
    "href": "weekly-notes/week-04-notes.html#union-operations",
    "title": "MUSA 5080 Notes #4",
    "section": "Union Operations",
    "text": "Union Operations\nCombine multiple features into one\n# Combine all hospital buffers into one service area\ntotal_service_area &lt;- st_union(hospital_buffers)\n\n# Union by group\ncounty_union &lt;- counties %&gt;%\n  group_by(STATE) %&gt;%\n  summarise(geometry = st_union(geometry))"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-aggregation",
    "href": "weekly-notes/week-04-notes.html#spatial-aggregation",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Aggregation",
    "text": "Spatial Aggregation\nSummarize data across spatial boundaries\n# Aggregate tract data to county level\ncounty_summary &lt;- tracts %&gt;%\n  st_drop_geometry() %&gt;%  # Remove geometry for aggregation\n  group_by(COUNTY) %&gt;%\n  summarise(\n    total_population = sum(population),\n    avg_income = mean(income, na.rm = TRUE)\n  )"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#why-projections-matter",
    "href": "weekly-notes/week-04-notes.html#why-projections-matter",
    "title": "MUSA 5080 Notes #4",
    "section": "Why Projections Matter",
    "text": "Why Projections Matter\nThe Earth is round, maps are flat\nProblems: - Can’t preserve area, distance, and angles simultaneously - Different projections optimize different properties - Wrong projection → wrong analysis results!\nExample: Measuring areas in latitude/longitude gives wrong answers"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#geographic-vs.-projected-coordinates",
    "href": "weekly-notes/week-04-notes.html#geographic-vs.-projected-coordinates",
    "title": "MUSA 5080 Notes #4",
    "section": "Geographic vs. Projected Coordinates",
    "text": "Geographic vs. Projected Coordinates\nGeographic Coordinate Systems (GCS): - Latitude/longitude coordinates - Units: decimal degrees - Good for: Global datasets, web mapping - Bad for: Area/distance calculations\nProjected Coordinate Systems (PCS): - X/Y coordinates on a flat plane - Units: meters, feet, etc. - Good for: Local analysis, accurate measurements - Bad for: Large areas, global datasets"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#common-coordinate-reference-systems",
    "href": "weekly-notes/week-04-notes.html#common-coordinate-reference-systems",
    "title": "MUSA 5080 Notes #4",
    "section": "Common Coordinate Reference Systems",
    "text": "Common Coordinate Reference Systems\n\n\n\n\n\n\n\n\n\nSystem\nEPSG Code\nUse Case\nCharacteristics\n\n\n\n\nWGS84\n4326\nGPS standard, global coverage\nGeographic (lat/lon), good for web mapping\n\n\nWeb Mercator\n3857\nWeb mapping standard\nProjected, heavily distorts areas near poles\n\n\nState Plane\nVarious\nLocal accuracy\nDifferent zones for different regions\n\n\nAlbers Equal Area\n5070\nDemographic analysis\nPreserves area, good for statistical analysis"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#checking-and-setting-crs",
    "href": "weekly-notes/week-04-notes.html#checking-and-setting-crs",
    "title": "MUSA 5080 Notes #4",
    "section": "Checking and Setting CRS",
    "text": "Checking and Setting CRS\n# Check current CRS\nst_crs(pa_counties)\n\n# Set CRS (ONLY if missing)\npa_counties &lt;- st_set_crs(pa_counties, 4326)\n\n# Transform to different CRS\n# Pennsylvania South State Plane (good for PA analysis)\npa_counties_projected &lt;- pa_counties %&gt;%\n  st_transform(crs = 3365)\n\n# Transform to Albers Equal Area (good for area calculations)\npa_counties_albers &lt;- pa_counties %&gt;%\n  st_transform(crs = 5070)"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#when-to-transform",
    "href": "weekly-notes/week-04-notes.html#when-to-transform",
    "title": "MUSA 5080 Notes #4",
    "section": "When to Transform",
    "text": "When to Transform\nTransform when: - Calculating areas or distances - Creating buffers - Doing geometric operations - Working with local/regional data"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#policy-analysis-workflow",
    "href": "weekly-notes/week-04-notes.html#policy-analysis-workflow",
    "title": "MUSA 5080 Notes #4",
    "section": "Policy Analysis Workflow",
    "text": "Policy Analysis Workflow\nTypical spatial analysis steps:\n\nLoad data → Get spatial boundaries and attribute data\nCheck projections → Transform to appropriate CRS\nJoin datasets → Combine spatial and non-spatial data\nSpatial operations → Buffers, intersections, distance calculations\nAggregation → Summarize across spatial units\nVisualization → Maps and charts\nInterpretation → Policy recommendations"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#example-healthcare-access-analysis",
    "href": "weekly-notes/week-04-notes.html#example-healthcare-access-analysis",
    "title": "MUSA 5080 Notes #4",
    "section": "Example: Healthcare Access Analysis",
    "text": "Example: Healthcare Access Analysis\nResearch question: Which communities have poor access to healthcare?\n# Step 1: Load data\ncounties &lt;- st_read(\"data/counties.shp\")\nhospitals &lt;- st_read(\"data/hospitals.geojson\")\n\n# Step 2: Transform to local projection\ncounties &lt;- st_transform(counties, 3365)\nhospitals &lt;- st_transform(hospitals, 3365)\n\n# Step 3: Calculate access\nhospital_buffers &lt;- hospitals %&gt;%\n  st_buffer(dist = 25000)  # 25km access zone\n\ncounty_access &lt;- counties %&gt;%\n  mutate(\n    has_hospital = st_intersects(., st_union(hospital_buffers), sparse = FALSE),\n    distance_to_nearest = as.numeric(st_distance(st_centroid(.), hospitals))\n  )\n\n# Step 4: Join with demographic data and analyze"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#spatial-analysis-skills",
    "href": "weekly-notes/week-04-notes.html#spatial-analysis-skills",
    "title": "MUSA 5080 Notes #4",
    "section": "Spatial Analysis Skills",
    "text": "Spatial Analysis Skills\n\nData Loading: Use st_read() for spatial data, tigris for census boundaries\nSpatial Filtering: Use st_filter() with appropriate predicates\nSpatial Joins: Use st_join() to combine datasets spatially\nDistance Calculations: Use st_distance() and st_centroid()\nGeometry Operations: Use st_buffer(), st_intersection(), st_union()\nCoordinate Systems: Always check and transform when needed"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#policy-applications",
    "href": "weekly-notes/week-04-notes.html#policy-applications",
    "title": "MUSA 5080 Notes #4",
    "section": "Policy Applications",
    "text": "Policy Applications\n\nService Access: Identify underserved areas\nEnvironmental Justice: Analyze spatial clustering of pollution and vulnerable populations\nResource Allocation: Optimize location of public facilities\nBoundary Analysis: Understand effects of administrative boundaries"
  },
  {
    "objectID": "weekly-notes/week-04-notes.html#next-steps",
    "href": "weekly-notes/week-04-notes.html#next-steps",
    "title": "MUSA 5080 Notes #4",
    "section": "Next Steps",
    "text": "Next Steps\n\nPractice with real datasets\nLearn to create maps with ggplot2 and geom_sf()\nUnderstand spatial autocorrelation and its implications\nApply spatial analysis to your research questions"
  }
]