[
  {
    "objectID": "weekly-notes/week-03-notes.html",
    "href": "weekly-notes/week-03-notes.html",
    "title": "MUSA 5080 Notes #3",
    "section": "",
    "text": "Note\n\n\n\nWeek 3: Data Visualization & Exploratory Analysis\nDate: 09/22/2025"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-1-why-visualization-matters",
    "href": "weekly-notes/week-03-notes.html#part-1-why-visualization-matters",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 1: Why Visualization Matters",
    "text": "Part 1: Why Visualization Matters\n\nThe Power of Visual Communication\nThis week I learned about the critical importance of data visualization, especially in policy contexts. When I think about Assignment 1, I created tables showing income reliability patterns across counties, but I realized that visual presentation could dramatically change the impact of my analysis when presenting to:\n\nThe state legislature (2-minute briefing)\nCommunity advocacy groups\n\nLocal news reporters\n\n\n\nAnscombe’s Quartet: The Famous Lesson\nFour datasets with identical summary statistics: - Same means (x̄ = 9, ȳ = 7.5) - Same variances - Same correlation (r = 0.816) - Same regression line\n\n\n\n\n\n\nImportant\n\n\n\nBut completely different patterns when visualized\n\n\n\n\nPolicy Implications I Need to Remember\nWhy this matters for my work: - Summary statistics can hide critical patterns - Outliers may represent important communities - Relationships aren’t always linear - Visual inspection reveals data quality issues\nExample: A county with “average” income might have extreme inequality that algorithms would miss without visualization.\n\n\nEthical Data Communication\nFrom last week’s algorithmic bias discussion:\nResearch finding: Only 27% of planners warn users about unreliable ACS data - Most planners don’t report margins of error - Many lack training on statistical uncertainty - This violates AICP Code of Ethics\nMy responsibility: - Create honest, transparent visualizations - Always assess and communicate data quality - Consider who might be harmed by uncertain data\n\n\nReal Consequences of Bad Visualizations\nCommon problems in government data presentation: - Misleading scales or axes - Cherry-picked time periods - Hidden or ignored uncertainty - Missing context about data reliability\n\n\n\n\n\n\nWarning\n\n\n\nReal impact: The Jurjevich et al. study found that 72% of Portland census tracts had unreliable child poverty estimates, yet planners rarely communicated this uncertainty.\nResult: Poor policy decisions based on misunderstood data"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-2-grammar-of-graphics",
    "href": "weekly-notes/week-03-notes.html#part-2-grammar-of-graphics",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 2: Grammar of Graphics",
    "text": "Part 2: Grammar of Graphics\n\nThe ggplot2 Philosophy\nGrammar of Graphics principles:\nData → Aesthetics → Geometries → Visual\n\nData: My dataset (census data, survey responses, etc.)\nAesthetics: What variables map to visual properties (x, y, color, size)\nGeometries: How to display the data (points, bars, lines)\nAdditional layers: Scales, themes, facets, annotations\n\n\n\nBasic ggplot2 Structure\nEvery ggplot I create has this pattern:\nggplot(data = my_data) +\n  aes(x = variable1, y = variable2) +\n  geom_something() +\n  additional_layers()\n\n\n\n\n\n\nTip\n\n\n\nI build plots by adding layers with +\n\n\n\n\nAesthetic Mappings: The Key to ggplot2\nAesthetics map data to visual properties: - x, y - position - color - point/line color - fill - area fill color - size - point/line size - shape - point shape - alpha - transparency\n\n\n\n\n\n\nImportant\n\n\n\nImportant: Aesthetics go inside aes(), constants go outside\n\n\n\n\nExample: Basic Scatter Plot\nlibrary(tidyverse)\n\n# Basic scatter plot\nggplot(county_data) +\n  aes(x = median_income, y = total_population) +\n  geom_point() +\n  labs(\n    title = \"Income vs Population in PA Counties\",\n    x = \"Median Household Income ($)\",\n    y = \"Total Population\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-3-exploratory-data-analysis",
    "href": "weekly-notes/week-03-notes.html#part-3-exploratory-data-analysis",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 3: Exploratory Data Analysis",
    "text": "Part 3: Exploratory Data Analysis\n\nThe EDA Mindset\nExploratory Data Analysis is detective work I need to master:\n\nWhat does the data look like? (distributions, missing values)\nWhat patterns exist? (relationships, clusters, trends)\nWhat’s unusual? (outliers, anomalies, data quality issues)\nWhat questions does this raise? (hypotheses for further investigation)\nHow reliable is this data?\n\nGoal: Understand my data before making decisions or building models\n\n\nEnhanced EDA Workflow for Policy Analysis\nMy enhanced process:\n\nLoad and inspect - dimensions, variable types, missing data\nAssess reliability - examine margins of error, calculate coefficients of variation\nVisualize distributions - histograms, boxplots for each variable\nExplore relationships - scatter plots, correlations\nIdentify patterns - grouping, clustering, geographical patterns\nQuestion anomalies - investigate outliers and unusual patterns\nDocument limitations - prepare honest communication about data quality\n\n\n\nUnderstanding Distributions\nWhy distribution shape matters:\n# Exploring income distribution\nggplot(county_data) +\n  aes(x = median_income) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Median Income Across PA Counties\",\n    x = \"Median Household Income ($)\",\n    y = \"Number of Counties\"\n  )\nWhat I should look for: Skewness, outliers, multiple peaks, gaps\n\n\nBoxplots for Quick Summaries\n# Boxplot to understand income distribution\nggplot(county_data) +\n  aes(y = median_income) +\n  geom_boxplot(fill = \"lightblue\") +\n  labs(\n    title = \"Income Distribution Summary\",\n    y = \"Median Household Income ($)\"\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#critical-data-quality-through-visualization",
    "href": "weekly-notes/week-03-notes.html#critical-data-quality-through-visualization",
    "title": "MUSA 5080 Notes #3",
    "section": "Critical: Data Quality Through Visualization",
    "text": "Critical: Data Quality Through Visualization\n\nResearch-Based Best Practices\nJurjevich et al. (2018): 5 Essential Guidelines I Must Follow:\n\nReport the corresponding MOEs of ACS estimates\n\nAlways include margin of error values\n\nInclude a footnote when not reporting MOEs\n\nExplicitly acknowledge omission\n\nProvide context for (un)reliability\n\nUse coefficient of variation (CV):\n\nCV &lt; 12% = reliable (green coding)\nCV 12-40% = somewhat reliable (yellow)\nCV &gt; 40% = unreliable (red coding)\n\n\nReduce statistical uncertainty\n\nCollapse data detail, aggregate geographies, use multi-year estimates\n\nAlways conduct statistical significance tests\n\nWhen comparing ACS estimates over time\n\n\n\n\n\n\n\n\nImportant\n\n\n\nKey insight: These practices are not just technical best practices—they are ethical requirements under the AICP Code of Ethics\n\n\n\n\nVisualizing Data Quality\n# Visualizing margin of error patterns\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    cv = moe_percentage / 1.645  # Convert MOE to CV\n  )\n\nggplot(county_reliability) +\n  aes(x = total_population, y = moe_percentage) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Data Quality vs Population Size\",\n    x = \"Total Population\",\n    y = \"Margin of Error (%)\",\n    subtitle = \"Smaller populations have higher uncertainty\"\n  ) +\n  theme_minimal()\nPattern I observed: Smaller populations have higher uncertainty\nEthical implication: These communities might be systematically undercounted"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#part-4-data-joins-integration",
    "href": "weekly-notes/week-03-notes.html#part-4-data-joins-integration",
    "title": "MUSA 5080 Notes #3",
    "section": "Part 4: Data Joins & Integration",
    "text": "Part 4: Data Joins & Integration\n\nWhy I Need to Join Data\nTo combine datasets effectively: - Census demographics + Economic indicators - Survey responses + Geographic boundaries - Current data + Historical trends - Administrative records + Survey data\n\n\nTypes of Joins in dplyr\nFour main types I’ll use: - left_join() - Keep all rows from left dataset - right_join() - Keep all rows from right dataset - inner_join() - Keep only rows that match in both - full_join() - Keep all rows from both datasets\nMost common: left_join() to add columns to my main dataset\n\n\nExample: Joining Census Tables\n# Get income data\nincome_data &lt;- get_acs(\n  geography = \"county\",\n  variables = \"B19013_001\",\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\"\n)\n\n# Get education data\neducation_data &lt;- get_acs(\n  geography = \"county\", \n  variables = \"B15003_022\",  # Bachelor's degree\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\"\n)\n\n# Join the datasets\ncombined_data &lt;- income_data %&gt;%\n  left_join(education_data, by = \"GEOID\")\n\n\nChecking Join Results and Data Quality\nI must always verify joins AND assess combined reliability:\n# Check dimensions\nnrow(income_data)      # Should match\nnrow(education_data)   # Should match  \nnrow(combined_data)    # Should match\n\n# Check for missing values\ncombined_data %&gt;%\n  summarize(\n    missing_income = sum(is.na(median_income)),\n    missing_education = sum(is.na(college_pop))\n  )\n\n# Calculate reliability for both variables\ncombined_data %&gt;%\n  mutate(\n    income_cv = (income_moe / median_income) * 100 / 1.645,\n    college_cv = (college_moe / college_pop) * 100 / 1.645\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#eda-for-policy-analysis",
    "href": "weekly-notes/week-03-notes.html#eda-for-policy-analysis",
    "title": "MUSA 5080 Notes #3",
    "section": "EDA for Policy Analysis",
    "text": "EDA for Policy Analysis\n\nKey Questions I Should Always Ask\nFor census data specifically: - Geographic patterns: Are problems concentrated in certain areas? - Population relationships: How does size affect data quality? - Demographic patterns: Are certain communities systematically different? - Temporal trends: How do patterns change over time? - Data integrity: Where might survey bias affect results? - Reliability assessment: Which estimates should I trust?\n\n\nProfessional Visualization Standards\n# Create publication-ready visualization\nggplot(combined_data) +\n  aes(x = median_income, y = college_percentage) +\n  geom_point(aes(size = total_population), alpha = 0.6) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  scale_size_continuous(name = \"Population\") +\n  scale_x_continuous(labels = scales::dollar_format()) +\n  scale_y_continuous(labels = scales::percent_format(scale = 1)) +\n  labs(\n    title = \"Education and Income Relationship in PA Counties\",\n    subtitle = \"Higher income counties tend to have more college graduates\",\n    x = \"Median Household Income\",\n    y = \"Percent with Bachelor's Degree\",\n    caption = \"Source: ACS 2018-2022 5-year estimates\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "weekly-notes/week-03-notes.html#summary",
    "href": "weekly-notes/week-03-notes.html#summary",
    "title": "MUSA 5080 Notes #3",
    "section": "Summary",
    "text": "Summary\nThis week I learned that visualization is not just about making pretty charts—it’s about ethical communication and uncovering patterns that summary statistics might hide. Key takeaways:\n\nAnscombe’s Quartet taught me that identical statistics can hide completely different patterns\nProfessional ethics require me to always assess and communicate data uncertainty\nggplot2’s Grammar of Graphics provides a systematic approach to building meaningful visualizations\nEnhanced EDA workflow helps me understand data quality before making policy decisions\nData joins allow me to combine multiple sources while maintaining quality standards\n\n\n\n\n\n\n\nImportant\n\n\n\nMost important lesson: As a future planner, I have an ethical obligation to communicate data uncertainty honestly. My visualizations should reveal, not hide, the limitations of my data.\n\n\n\nSkills I Practiced\nggplot2 fundamentals: - Scatter plots, histograms, boxplots - Aesthetic mappings and customization - Professional themes and labels\nEDA workflow: - Distribution analysis - Outlier detection - Pattern identification\nEthical data practice: - Visualizing and reporting margins of error - Using coefficient of variation to assess reliability - Creating honest, transparent communications\n\n\n\n\n\n\nTip\n\n\n\nMoving forward: I will always start my analysis with exploratory visualization and end with honest communication about data limitations. This is both a technical best practice and an ethical requirement."
  },
  {
    "objectID": "weekly-notes/week-01-notes.html",
    "href": "weekly-notes/week-01-notes.html",
    "title": "MUSA 5080 Notes #1",
    "section": "",
    "text": "Note\n\n\n\nWeek 1: Introduction to R and dplyr\nDate: 09/08/2025"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#git-github",
    "href": "weekly-notes/week-01-notes.html#git-github",
    "title": "MUSA 5080 Notes #1",
    "section": "Git & GitHub",
    "text": "Git & GitHub\n\n\n\nGit\n\n\nGitHub\n\n\n\n1. Git\nVersion control system that tracks changes in files\n\n“Track changes” for code projects\nTime machine for your work\nCollaboration tool for teams\n\n\n\n2. GitHub\nCloud hosting for Git repositories\n\nBackup your work in the cloud\nShare projects with others\nDeploy websites (like our portfolios)\nCollaborate on code projects\n\n\n\n3. Key GitHub Concepts\nRepository (repo): Folder containing your project files\n\nCommit: Snapshot of your work at a point in time\nPush: Send your changes to GitHub cloud\nPull: Get latest changes from GitHub cloud"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#markdown-basics",
    "href": "weekly-notes/week-01-notes.html#markdown-basics",
    "title": "MUSA 5080 Notes #1",
    "section": "Markdown Basics",
    "text": "Markdown Basics\n\n1. Text Formatting\n**Bold text**\n*Italic text*\n***Bold and italic***\n`code text`\n~~Strikethrough~~\n\n\n2. Headers\n# Main Header\n## Section Header\n### Subsection Header\n\n\n3. Lists\n## Unordered List\n- Item 1\n- Item 2\n  - Sub-item A\n  - Sub-item B\n\n## Ordered List  \n1. First item\n2. Second item\n3. Third item\n\n\n4. Links and Images\n[Link text](https://example.com)\n[Link to another page](about.qmd)\n![Alt text](path/to/image.png)"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#basic-r",
    "href": "weekly-notes/week-01-notes.html#basic-r",
    "title": "MUSA 5080 Notes #1",
    "section": "Basic R",
    "text": "Basic R\n\n1. Tibbles better?\n# Traditional Data Frame\nclass(data)\n# Convert to tibble\ncar_data &lt;- as_tibble(data)\nclass(car_data)\n\nShows first 10 rows by default\nDisplays column names\nFits nicely on a screen\n\n\n\n2. Dplyr\nlibrary(tidyverse)\n\n# Load car sales data\ncar_data &lt;- read_csv(\"data/car_sales_data.csv\")\n\n# Basic exploration\nglimpse(car_data)\nnames(car_data)\n# The power of pipes - read as \"then\"\ncar_summary &lt;- data %&gt;%\n  filter(`Year of manufacture` &gt;= 2020) %&gt;%      # Recent models only\n  select(Manufacturer, Model, Price, Mileage) %&gt;% # Key variables\n  mutate(price_k = Price / 1000) %&gt;%             # Convert to thousands\n  filter(Mileage &lt; 50000) %&gt;%                    # Low mileage cars\n  group_by(Manufacturer) %&gt;%                     # Group by brand\n  summarize(                                     # Calculate statistics\n    avg_price = mean(price_k, na.rm = TRUE),\n    count = n()\n  )"
  },
  {
    "objectID": "weekly-notes/week-01-notes.html#summary",
    "href": "weekly-notes/week-01-notes.html#summary",
    "title": "MUSA 5080 Notes #1",
    "section": "Summary",
    "text": "Summary\n\n\n\n\n\n\nTip\n\n\n\nThis week I mainly familiarized myself with several commonly used advanced tools (not limited to classroom use), and also learned the basic usage of R and dplyr functions. I need to reinforce the function usage in a timely manner."
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html",
    "href": "labs/lab_3/week3_lab_exercise.html",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "",
    "text": "# Load required packages\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(RColorBrewer)\n# Set your Census API key if you haven't already\ncensus_api_key(Sys.getenv(\"86993dedbe98d77b9d79db6b8ba21a7fde55cb91\"))\n\n# We'll use Pennsylvania data for consistency with previous weeks\nstate_choice &lt;- \"PA\""
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#setup-and-data-loading",
    "href": "labs/lab_3/week3_lab_exercise.html#setup-and-data-loading",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "",
    "text": "# Load required packages\nlibrary(tidyverse)\nlibrary(tidycensus)\nlibrary(scales)\nlibrary(RColorBrewer)\n# Set your Census API key if you haven't already\ncensus_api_key(Sys.getenv(\"86993dedbe98d77b9d79db6b8ba21a7fde55cb91\"))\n\n# We'll use Pennsylvania data for consistency with previous weeks\nstate_choice &lt;- \"PA\""
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-0-finding-census-variable-codes",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-0-finding-census-variable-codes",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 0: Finding Census Variable Codes",
    "text": "Exercise 0: Finding Census Variable Codes\nThe Challenge: You know you want data on total population, median income, and median age, but you don’t know the specific Census variable codes. How do you find them?\n\n0.1 Load the Variable Dictionary\n\n# Load all available variables for ACS 5-year 2022\nacs_vars_2022 &lt;- load_variables(2022, \"acs5\", cache = TRUE)\n\n# Look at the structure\nglimpse(acs_vars_2022)\n\nRows: 28,152\nColumns: 4\n$ name      &lt;chr&gt; \"B01001A_001\", \"B01001A_002\", \"B01001A_003\", \"B01001A_004\", …\n$ label     &lt;chr&gt; \"Estimate!!Total:\", \"Estimate!!Total:!!Male:\", \"Estimate!!To…\n$ concept   &lt;chr&gt; \"Sex by Age (White Alone)\", \"Sex by Age (White Alone)\", \"Sex…\n$ geography &lt;chr&gt; \"tract\", \"tract\", \"tract\", \"tract\", \"tract\", \"tract\", \"tract…\n\nhead(acs_vars_2022)\n\n# A tibble: 6 × 4\n  name        label                                   concept          geography\n  &lt;chr&gt;       &lt;chr&gt;                                   &lt;chr&gt;            &lt;chr&gt;    \n1 B01001A_001 Estimate!!Total:                        Sex by Age (Whi… tract    \n2 B01001A_002 Estimate!!Total:!!Male:                 Sex by Age (Whi… tract    \n3 B01001A_003 Estimate!!Total:!!Male:!!Under 5 years  Sex by Age (Whi… tract    \n4 B01001A_004 Estimate!!Total:!!Male:!!5 to 9 years   Sex by Age (Whi… tract    \n5 B01001A_005 Estimate!!Total:!!Male:!!10 to 14 years Sex by Age (Whi… tract    \n6 B01001A_006 Estimate!!Total:!!Male:!!15 to 17 years Sex by Age (Whi… tract    \n\n\nWhat you see:\n\nname: The variable code (e.g., “B01003_001”)\nlabel: Human-readable description\nconcept: The broader table this variable belongs to\n\n\n\n0.2 Search for Population Variables\nYour Task: Find the variable code for total population.\n\n# Search for population-related variables\npopulation_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"Total.*population\"))\n\n# Look at the results\nhead(population_vars, 10)\n\n# A tibble: 10 × 4\n   name       label                                            concept geography\n   &lt;chr&gt;      &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n 1 B16008_002 \"Estimate!!Total:!!Native population:\"           Citize… tract    \n 2 B16008_003 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 3 B16008_004 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 4 B16008_005 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 5 B16008_006 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 6 B16008_007 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 7 B16008_008 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 8 B16008_009 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n 9 B16008_010 \"Estimate!!Total:!!Native population:!!5 to 17 … Citize… tract    \n10 B16008_011 \"Estimate!!Total:!!Native population:!!18 years… Citize… tract    \n\n# Or search in the concept field\npop_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Total Population\"))\n\nhead(pop_concept)\n\n# A tibble: 6 × 4\n  name        label                             concept                geography\n  &lt;chr&gt;       &lt;chr&gt;                             &lt;chr&gt;                  &lt;chr&gt;    \n1 B01003_001  Estimate!!Total                   Total Population       block gr…\n2 B25008A_001 Estimate!!Total:                  Total Population in O… block gr…\n3 B25008A_002 Estimate!!Total:!!Owner occupied  Total Population in O… block gr…\n4 B25008A_003 Estimate!!Total:!!Renter occupied Total Population in O… block gr…\n5 B25008B_001 Estimate!!Total:                  Total Population in O… block gr…\n6 B25008B_002 Estimate!!Total:!!Owner occupied  Total Population in O… block gr…\n\n\nTip: Look for “Total” followed by “population” - usually B01003_001\n\n\n0.3 Search for Income Variables\nYour Task: Find median household income variables.\n\n# Search for median income\nincome_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*income\"))\n\n# Look specifically for household income\nhousehold_income &lt;- income_vars %&gt;%\n  filter(str_detect(label, \"household\"))\n\nprint(\"Household income variables:\")\n\n[1] \"Household income variables:\"\n\nhead(household_income)\n\n# A tibble: 6 × 4\n  name        label                                            concept geography\n  &lt;chr&gt;       &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n1 B10010_002  Estimate!!Median family income in the past 12 m… Median… tract    \n2 B10010_003  Estimate!!Median family income in the past 12 m… Median… tract    \n3 B19013A_001 Estimate!!Median household income in the past 1… Median… tract    \n4 B19013B_001 Estimate!!Median household income in the past 1… Median… tract    \n5 B19013C_001 Estimate!!Median household income in the past 1… Median… tract    \n6 B19013D_001 Estimate!!Median household income in the past 1… Median… tract    \n\n# Alternative: search by concept\nincome_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Median Household Income\"))\n\nhead(income_concept)\n\n# A tibble: 6 × 4\n  name        label                                            concept geography\n  &lt;chr&gt;       &lt;chr&gt;                                            &lt;chr&gt;   &lt;chr&gt;    \n1 B19013A_001 Estimate!!Median household income in the past 1… Median… tract    \n2 B19013B_001 Estimate!!Median household income in the past 1… Median… tract    \n3 B19013C_001 Estimate!!Median household income in the past 1… Median… tract    \n4 B19013D_001 Estimate!!Median household income in the past 1… Median… tract    \n5 B19013E_001 Estimate!!Median household income in the past 1… Median… county   \n6 B19013F_001 Estimate!!Median household income in the past 1… Median… tract    \n\n\nPattern Recognition: Median household income is typically B19013_001\n\n\n0.4 Search for Age Variables\nYour Task: Find median age variables.\n\n# Search for median age variables\nage_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*age\"))\n\nprint(\"Median age variables found:\")\n\n[1] \"Median age variables found:\"\n\nhead(age_vars, 10)\n\n# A tibble: 10 × 4\n   name        label                           concept                 geography\n   &lt;chr&gt;       &lt;chr&gt;                           &lt;chr&gt;                   &lt;chr&gt;    \n 1 B01002A_001 Estimate!!Median age --!!Total: Median Age by Sex (Whi… block gr…\n 2 B01002A_002 Estimate!!Median age --!!Male   Median Age by Sex (Whi… block gr…\n 3 B01002A_003 Estimate!!Median age --!!Female Median Age by Sex (Whi… block gr…\n 4 B01002B_001 Estimate!!Median age --!!Total: Median Age by Sex (Bla… block gr…\n 5 B01002B_002 Estimate!!Median age --!!Male   Median Age by Sex (Bla… block gr…\n 6 B01002B_003 Estimate!!Median age --!!Female Median Age by Sex (Bla… block gr…\n 7 B01002C_001 Estimate!!Median age --!!Total: Median Age by Sex (Ame… block gr…\n 8 B01002C_002 Estimate!!Median age --!!Male   Median Age by Sex (Ame… block gr…\n 9 B01002C_003 Estimate!!Median age --!!Female Median Age by Sex (Ame… block gr…\n10 B01002D_001 Estimate!!Median age --!!Total: Median Age by Sex (Asi… block gr…\n\n# Alternative: search by concept field\nage_concept &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(concept, \"Median Age\"))\n\nprint(\"Median age variables (from concept search):\")\n\n[1] \"Median age variables (from concept search):\"\n\nhead(age_concept)\n\n# A tibble: 6 × 4\n  name        label                           concept                  geography\n  &lt;chr&gt;       &lt;chr&gt;                           &lt;chr&gt;                    &lt;chr&gt;    \n1 B01002A_001 Estimate!!Median age --!!Total: Median Age by Sex (Whit… block gr…\n2 B01002A_002 Estimate!!Median age --!!Male   Median Age by Sex (Whit… block gr…\n3 B01002A_003 Estimate!!Median age --!!Female Median Age by Sex (Whit… block gr…\n4 B01002B_001 Estimate!!Median age --!!Total: Median Age by Sex (Blac… block gr…\n5 B01002B_002 Estimate!!Median age --!!Male   Median Age by Sex (Blac… block gr…\n6 B01002B_003 Estimate!!Median age --!!Female Median Age by Sex (Blac… block gr…\n\n\n\n\n0.5 Advanced Search Techniques\nYour Task: Learn more sophisticated search methods.\n\n# Search for multiple terms at once\nhousing_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*(rent|value)\"))\n\nprint(\"Housing cost variables:\")\n\n[1] \"Housing cost variables:\"\n\nhead(housing_vars, 10)\n\n# A tibble: 10 × 4\n   name         label                                          concept geography\n   &lt;chr&gt;        &lt;chr&gt;                                          &lt;chr&gt;   &lt;chr&gt;    \n 1 B07002PR_004 Estimate!!Median age --!!Total:!!Moved from d… Median… &lt;NA&gt;     \n 2 B07002_004   Estimate!!Median age --!!Total:!!Moved from d… Median… tract    \n 3 B07002_005   Estimate!!Median age --!!Total:!!Moved from d… Median… tract    \n 4 B07011PR_004 Estimate!!Median income in the past 12 months… Median… &lt;NA&gt;     \n 5 B07011_004   Estimate!!Median income in the past 12 months… Median… tract    \n 6 B07011_005   Estimate!!Median income in the past 12 months… Median… tract    \n 7 B07402PR_004 Estimate!!Median age --!!Total living in area… Median… &lt;NA&gt;     \n 8 B07402_004   Estimate!!Median age --!!Total living in area… Median… county   \n 9 B07402_005   Estimate!!Median age --!!Total living in area… Median… county   \n10 B07411PR_004 Estimate!!Median income in the past 12 months… Median… &lt;NA&gt;     \n\n# Search excluding certain terms\nincome_not_family &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, \"[Mm]edian.*income\") & \n         !str_detect(label, \"family\"))\n\nprint(\"Income variables (not family income):\")\n\n[1] \"Income variables (not family income):\"\n\nhead(income_not_family)\n\n# A tibble: 6 × 4\n  name         label                                           concept geography\n  &lt;chr&gt;        &lt;chr&gt;                                           &lt;chr&gt;   &lt;chr&gt;    \n1 B06011PR_001 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n2 B06011PR_002 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n3 B06011PR_003 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n4 B06011PR_004 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n5 B06011PR_005 Estimate!!Median income in the past 12 months … Median… &lt;NA&gt;     \n6 B06011_001   Estimate!!Median income in the past 12 months … Median… tract    \n\n# Case-insensitive search using regex\neducation_vars &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(label, regex(\"bachelor\", ignore_case = TRUE)))\n\nprint(\"Education variables:\")\n\n[1] \"Education variables:\"\n\nhead(education_vars, 5)\n\n# A tibble: 5 × 4\n  name         label                                           concept geography\n  &lt;chr&gt;        &lt;chr&gt;                                           &lt;chr&gt;   &lt;chr&gt;    \n1 B06009PR_005 Estimate!!Total:!!Bachelor's degree             Place … &lt;NA&gt;     \n2 B06009PR_011 Estimate!!Total:!!Born in Puerto Rico:!!Bachel… Place … &lt;NA&gt;     \n3 B06009PR_017 Estimate!!Total:!!Born in the United States:!!… Place … &lt;NA&gt;     \n4 B06009PR_023 Estimate!!Total:!!Native; born elsewhere:!!Bac… Place … &lt;NA&gt;     \n5 B06009PR_029 Estimate!!Total:!!Foreign born:!!Bachelor's de… Place … &lt;NA&gt;     \n\n\n\n\n0.6 Interactive Exploration\nYour Task: Use RStudio’s viewer for easier searching.\n\n# Open the full variable list in RStudio viewer\n# This opens a searchable data table\nView(acs_vars_2022)\n\n# Pro tip: You can also search specific table groups\n# B01 = Age and Sex\n# B19 = Income  \n# B25 = Housing\ntable_b19 &lt;- acs_vars_2022 %&gt;%\n  filter(str_detect(name, \"^B19\"))  # ^ means \"starts with\"\n\nprint(\"All B19 (Income) table variables:\")\n\n[1] \"All B19 (Income) table variables:\"\n\nhead(table_b19, 10)\n\n# A tibble: 10 × 4\n   name        label                                concept            geography\n   &lt;chr&gt;       &lt;chr&gt;                                &lt;chr&gt;              &lt;chr&gt;    \n 1 B19001A_001 Estimate!!Total:                     Household Income … tract    \n 2 B19001A_002 Estimate!!Total:!!Less than $10,000  Household Income … tract    \n 3 B19001A_003 Estimate!!Total:!!$10,000 to $14,999 Household Income … tract    \n 4 B19001A_004 Estimate!!Total:!!$15,000 to $19,999 Household Income … tract    \n 5 B19001A_005 Estimate!!Total:!!$20,000 to $24,999 Household Income … tract    \n 6 B19001A_006 Estimate!!Total:!!$25,000 to $29,999 Household Income … tract    \n 7 B19001A_007 Estimate!!Total:!!$30,000 to $34,999 Household Income … tract    \n 8 B19001A_008 Estimate!!Total:!!$35,000 to $39,999 Household Income … tract    \n 9 B19001A_009 Estimate!!Total:!!$40,000 to $44,999 Household Income … tract    \n10 B19001A_010 Estimate!!Total:!!$45,000 to $49,999 Household Income … tract    \n\n\n\n\n0.7 Verify Your Variable Choices\nYour Task: Test your variables by getting a small sample of data.\n\n# Test the variables you found\ntest_vars &lt;- c(\n  total_pop = \"B01003_001\",      # Total population\n  median_income = \"B19013_001\",  # Median household income\n  median_age = \"B01002_001\"      # Median age\n)\n\n# Get data for just one state to test\ntest_data &lt;- get_acs(\n  geography = \"state\",\n  variables = test_vars,\n  state = \"PA\",\n  year = 2022\n)\n\n# Check that you got what you expected\ntest_data\n\n# A tibble: 3 × 5\n  GEOID NAME         variable        estimate   moe\n  &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;dbl&gt;\n1 42    Pennsylvania median_age          40.8   0.1\n2 42    Pennsylvania total_pop     12989208    NA  \n3 42    Pennsylvania median_income    73170   347  \n\n\n\n\n0.8 Common Variable Patterns\nReference guide for future use:\n\n# Common patterns to remember:\ncommon_variables &lt;- tribble(\n  ~concept, ~typical_code, ~description,\n  \"Total Population\", \"B01003_001\", \"Total population\",\n  \"Median Age\", \"B01002_001\", \"Median age of population\", \n  \"Median HH Income\", \"B19013_001\", \"Median household income\",\n  \"White Population\", \"B03002_003\", \"White alone population\",\n  \"Black Population\", \"B03002_004\", \"Black/African American alone\",\n  \"Hispanic Population\", \"B03002_012\", \"Hispanic or Latino population\",\n  \"Bachelor's Degree\", \"B15003_022\", \"Bachelor's degree or higher\",\n  \"Median Rent\", \"B25058_001\", \"Median contract rent\",\n  \"Median Home Value\", \"B25077_001\", \"Median value owner-occupied\"\n)\n\nprint(\"Common Census Variables:\")\n\n[1] \"Common Census Variables:\"\n\ncommon_variables\n\n# A tibble: 9 × 3\n  concept             typical_code description                  \n  &lt;chr&gt;               &lt;chr&gt;        &lt;chr&gt;                        \n1 Total Population    B01003_001   Total population             \n2 Median Age          B01002_001   Median age of population     \n3 Median HH Income    B19013_001   Median household income      \n4 White Population    B03002_003   White alone population       \n5 Black Population    B03002_004   Black/African American alone \n6 Hispanic Population B03002_012   Hispanic or Latino population\n7 Bachelor's Degree   B15003_022   Bachelor's degree or higher  \n8 Median Rent         B25058_001   Median contract rent         \n9 Median Home Value   B25077_001   Median value owner-occupied  \n\n\nKey Tips for Variable Hunting:\n\nStart with concepts - search for the topic you want (income, age, housing)\nLook for “Median” vs “Mean” - median is usually more policy-relevant\nCheck the universe - some variables are for “households,” others for “population”\nTest with small data before running large queries\nBookmark useful variables for future projects (type them in your weekly notes!)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-1-single-variable-eda",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-1-single-variable-eda",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 1: Single Variable EDA",
    "text": "Exercise 1: Single Variable EDA\n\n1.1 Load and Inspect Data\n\n# Get county-level data for your state\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_pop = \"B01003_001\",       # Total population\n    median_income = \"B19013_001\",   # Median household income\n    median_age = \"B01002_001\"       # Median age\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n)\n\n# Clean county names\ncounty_data &lt;- county_data %&gt;%\n  mutate(county_name = str_remove(NAME, paste0(\", \", state_choice)))\n\n# Basic inspection\nglimpse(county_data)\n\nRows: 67\nColumns: 9\n$ GEOID          &lt;chr&gt; \"42001\", \"42003\", \"42005\", \"42007\", \"42009\", \"42011\", \"…\n$ NAME           &lt;chr&gt; \"Adams County, Pennsylvania\", \"Allegheny County, Pennsy…\n$ total_popE     &lt;dbl&gt; 104604, 1245310, 65538, 167629, 47613, 428483, 122640, …\n$ total_popM     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ median_incomeE &lt;dbl&gt; 78975, 72537, 61011, 67194, 58337, 74617, 59386, 60650,…\n$ median_incomeM &lt;dbl&gt; 3334, 869, 2202, 1531, 2606, 1191, 2058, 2167, 1516, 21…\n$ median_ageE    &lt;dbl&gt; 43.8, 40.6, 47.0, 44.9, 47.3, 39.9, 42.9, 43.9, 44.0, 4…\n$ median_ageM    &lt;dbl&gt; 0.2, 0.1, 0.2, 0.1, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, …\n$ county_name    &lt;chr&gt; \"Adams County, Pennsylvania\", \"Allegheny County, Pennsy…\n\n\n\n\n1.2 Explore Income Distribution\nYour Task: Create a histogram of median household income and describe what you see.\n\n# Create histogram of median income\nggplot(county_data) +\n  aes(x = median_incomeE) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(\n    title = \"Distribution of Median Household Income\",\n    x = \"Median Household Income ($)\",\n    y = \"Number of Counties\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n1.3 Box Plot for Outlier Detection\nYour Task: Create a boxplot to identify specific outlier counties.\n\n# Box plot to see outliers clearly\nggplot(county_data) +\n  aes(y = median_incomeE) +\n  geom_boxplot(fill = \"lightblue\", width = 0.5) +\n  labs(\n    title = \"Median Income Distribution with Outliers\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Identify the outlier counties\nincome_outliers &lt;- county_data %&gt;%\n  mutate(\n    Q1 = quantile(median_incomeE, 0.25, na.rm = TRUE),\n    Q3 = quantile(median_incomeE, 0.75, na.rm = TRUE),\n    IQR = Q3 - Q1,\n    outlier = median_incomeE &lt; (Q1 - 1.5 * IQR) | median_incomeE &gt; (Q3 + 1.5 * IQR)\n  ) %&gt;%\n  filter(outlier) %&gt;%\n  select(county_name, median_incomeE)\n\nprint(\"Outlier counties:\")\n\n[1] \"Outlier counties:\"\n\nincome_outliers\n\n# A tibble: 3 × 2\n  county_name                     median_incomeE\n  &lt;chr&gt;                                    &lt;dbl&gt;\n1 Bucks County, Pennsylvania              107826\n2 Chester County, Pennsylvania            118574\n3 Montgomery County, Pennsylvania         107441\n\n\n\n\n1.4 Challenge Exercise: Population Distribution\nYour Task: Create your own visualization of population distribution and identify outliers.\nRequirements:\n\nCreate a histogram of total population (total_popE)\nUse a different color than the income example (try “darkgreen” or “purple”)\nAdd appropriate labels and title\nCreate a boxplot to identify population outliers\nFind and list the 3 most populous and 3 least populous counties\n\n\n# Histogram of total population\nlibrary(scales)\n\nggplot(county_data) +\n  aes(x = total_popE) +\n  geom_histogram(bins = 15, fill = \"darkgreen\", color = \"white\", alpha = 0.75) +\n  labs(\n    title = \"Distribution of Total Population (Counties in PA)\",\n    x = \"Total Population\",\n    y = \"Number of Counties\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_minimal()\n\n\n\n\n\n\n\n# Boxplot to identify population outliers\nggplot(county_data) +\n  aes(y = total_popE) +\n  geom_boxplot(fill = \"purple\", width = 0.5, alpha = 0.7) +\n  labs(\n    title = \"County Population with Outliers Highlighted\",\n    y = \"Total Population\"\n  ) +\n  scale_y_continuous(labels = comma) +\n  theme_minimal()\n\n\n\n\n\n\n\n# Identify outliers using the 1.5 * IQR rule\npop_outliers &lt;- county_data %&gt;%\n  mutate(\n    Q1 = quantile(total_popE, 0.25, na.rm = TRUE),\n    Q3 = quantile(total_popE, 0.75, na.rm = TRUE),\n    IQR = Q3 - Q1,\n    outlier = total_popE &lt; (Q1 - 1.5 * IQR) | total_popE &gt; (Q3 + 1.5 * IQR)\n  ) %&gt;%\n  filter(outlier) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  arrange(desc(total_popE))\n\ncat(\"Population outlier counties (by 1.5*IQR rule):\\n\")\n\nPopulation outlier counties (by 1.5*IQR rule):\n\npop_outliers %&gt;%\n  mutate(total_popE = comma(total_popE)) %&gt;%\n  print(n = Inf)\n\n# A tibble: 7 × 2\n  county_name                       total_popE\n  &lt;chr&gt;                             &lt;chr&gt;     \n1 Philadelphia County, Pennsylvania 1,593,208 \n2 Allegheny County, Pennsylvania    1,245,310 \n3 Montgomery County, Pennsylvania   856,399   \n4 Bucks County, Pennsylvania        645,163   \n5 Delaware County, Pennsylvania     575,312   \n6 Lancaster County, Pennsylvania    553,202   \n7 Chester County, Pennsylvania      536,474   \n\n# Top 3 most populous and bottom 3 least populous counties\ntop3_populous &lt;- county_data %&gt;%\n  arrange(desc(total_popE)) %&gt;%\n  slice_head(n = 3) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  mutate(rank = \"Most Populous (Top 3)\")\n\nbottom3_populous &lt;- county_data %&gt;%\n  arrange(total_popE) %&gt;%\n  slice_head(n = 3) %&gt;%\n  select(county_name, total_popE) %&gt;%\n  mutate(rank = \"Least Populous (Bottom 3)\")\n\npop_summary &lt;- bind_rows(top3_populous, bottom3_populous) %&gt;%\n  mutate(total_popE = comma(total_popE))\n\ncat(\"\\nTop/Bottom population summary:\\n\")\n\n\nTop/Bottom population summary:\n\npop_summary\n\n# A tibble: 6 × 3\n  county_name                       total_popE rank                     \n  &lt;chr&gt;                             &lt;chr&gt;      &lt;chr&gt;                    \n1 Philadelphia County, Pennsylvania 1,593,208  Most Populous (Top 3)    \n2 Allegheny County, Pennsylvania    1,245,310  Most Populous (Top 3)    \n3 Montgomery County, Pennsylvania   856,399    Most Populous (Top 3)    \n4 Cameron County, Pennsylvania      4,536      Least Populous (Bottom 3)\n5 Sullivan County, Pennsylvania     5,880      Least Populous (Bottom 3)\n6 Forest County, Pennsylvania       6,959      Least Populous (Bottom 3)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-2-two-variable-relationships",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-2-two-variable-relationships",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 2: Two Variable Relationships",
    "text": "Exercise 2: Two Variable Relationships\n\n2.1 Population vs Income Scatter Plot\nYour Task: Explore the relationship between population size and median income.\n\n# Basic scatter plot\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point() +\n  labs(\n    title = \"Population vs Median Income\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n2.2 Add Trend Line and Labels\nYour Task: Improve the plot by adding a trend line and labeling interesting points.\n\n# Enhanced scatter plot with trend line\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\") +\n  labs(\n    title = \"Population vs Median Income in Pennsylvania Counties\",\n    subtitle = \"2018-2022 ACS 5-Year Estimates\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\",\n    caption = \"Source: U.S. Census Bureau\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Calculate correlation\ncorrelation &lt;- cor(county_data$total_popE, county_data$median_incomeE, use = \"complete.obs\")\nprint(paste(\"Correlation coefficient:\", round(correlation, 3)))\n\n[1] \"Correlation coefficient: 0.457\"\n\n\n\n\n2.3 Deal with Skewed Data\nYour Task: The population data is highly skewed. Try a log transformation.\n\n# Log-transformed scatter plot\nggplot(county_data) +\n  aes(x = log(total_popE), y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(\n    title = \"Log(Population) vs Median Income\",\n    x = \"Log(Total Population)\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\nQuestion: Does the log transformation reveal a clearer relationship?\n\n\n2.4 Challenge Exercise: Age vs Income Relationship\nYour Task: Explore the relationship between median age and median income using different visualization techniques.\nRequirements:\n\nCreate a scatter plot with median age on x-axis and median income on y-axis\nUse red points (color = \"red\") with 50% transparency (alpha = 0.5)\nAdd a smooth trend line using method = \"loess\" instead of “lm”\nUse the “dark” theme (theme_dark())\nFormat the y-axis with dollar signs\nAdd a title that mentions both variables\n\n\n# Scatter plot with median age vs median income\nggplot(county_data) +\n  aes(x = median_ageE, y = median_incomeE) +\n  geom_point(color = \"red\", alpha = 0.5, size = 2) + \n  geom_smooth(method = \"loess\", se = TRUE, color = \"blue\") +\n  labs(\n    title = \"Median Age vs Median Household Income in Pennsylvania Counties\",\n    subtitle = \"2018-2022 ACS 5-Year Estimates\",\n    x = \"Median Age (years)\",\n    y = \"Median Household Income ($)\",\n    caption = \"Source: U.S. Census Bureau\"\n  ) +\n  theme_dark() +\n  scale_y_continuous(labels = dollar)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-3-data-quality-visualization",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-3-data-quality-visualization",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 3: Data Quality Visualization",
    "text": "Exercise 3: Data Quality Visualization\n\n3.1 Visualize Margins of Error\nYour Task: Create a visualization showing how data reliability varies across counties.\n\n# Calculate MOE percentages\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    income_moe_pct = (median_incomeM / median_incomeE) * 100,\n    pop_category = case_when(\n      total_popE &lt; 50000 ~ \"Small (&lt;50K)\",\n      total_popE &lt; 200000 ~ \"Medium (50K-200K)\",\n      TRUE ~ \"Large (200K+)\"\n    )\n  )\n\n# MOE by population size\nggplot(county_reliability) +\n  aes(x = total_popE, y = income_moe_pct) +\n  geom_point(alpha = 0.7) +\n  geom_hline(yintercept = 10, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Data Reliability Decreases with Population Size\",\n    x = \"Total Population\",\n    y = \"Margin of Error (%)\",\n    caption = \"Red line = 10% reliability threshold\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma)\n\n\n\n\n\n\n\n\n\n\n3.2 Compare Reliability by County Size\nYour Task: Use box plots to compare MOE across county size categories.\n\n# Box plots by population category\nggplot(county_reliability) +\n  aes(x = pop_category, y = income_moe_pct, fill = pop_category) +\n  geom_boxplot() +\n  labs(\n    title = \"Data Reliability by County Size Category\",\n    x = \"Population Category\",\n    y = \"Margin of Error (%)\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"none\")  # Remove legend since x-axis is clear\n\n\n\n\n\n\n\n\n\n\n3.3 Challenge Exercise: Age Data Reliability\nYour Task: Analyze the reliability of median age data across counties.\nRequirements:\n\nCalculate MOE percentage for median age (median_ageM / median_ageE * 100)\nCreate a scatter plot showing population vs age MOE percentage\nUse purple points (color = \"purple\") with size = 2\nAdd a horizontal line at 5% MOE using geom_hline() with a blue dashed line\nUse theme_classic()instead of theme_minimal()\nCreate a boxplot comparing age MOE across the three population categories\n\n\n# Calculate MOE percentage for median age\ncounty_age_reliability &lt;- county_data %&gt;%\n  mutate(\n    age_moe_pct = (median_ageM / median_ageE) * 100,\n    pop_category = case_when(\n      total_popE &lt; 50000 ~ \"Small (&lt;50K)\",\n      total_popE &lt; 200000 ~ \"Medium (50K-200K)\",\n      TRUE ~ \"Large (200K+)\"\n    )\n  )\n\n# Scatter plot: population vs age MOE %\nggplot(county_age_reliability) +\n  aes(x = total_popE, y = age_moe_pct) +\n  geom_point(color = \"purple\", size = 2, alpha = 0.7) +\n  geom_hline(yintercept = 5, color = \"blue\", linetype = \"dashed\") +\n  labs(\n    title = \"Reliability of Median Age Estimates Across Counties\",\n    x = \"Total Population\",\n    y = \"Median Age Margin of Error (%)\",\n    caption = \"Blue dashed line = 5% threshold\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_classic()\n\n\n\n\n\n\n\n# Boxplot comparing age MOE across population categories\nggplot(county_age_reliability) +\n  aes(x = pop_category, y = age_moe_pct, fill = pop_category) +\n  geom_boxplot() +\n  labs(\n    title = \"Median Age Reliability by County Size Category\",\n    x = \"Population Category\",\n    y = \"Median Age Margin of Error (%)\"\n  ) +\n  theme_classic() +\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-4-multiple-variables-with-color-and-faceting",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-4-multiple-variables-with-color-and-faceting",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 4: Multiple Variables with Color and Faceting",
    "text": "Exercise 4: Multiple Variables with Color and Faceting\n\n4.1 Three-Variable Scatter Plot\nYour Task: Add median age as a color dimension to the population-income relationship.\n\n# Three-variable scatter plot\nggplot(county_data) +\n  aes(x = total_popE, y = median_incomeE, color = median_ageE) +\n  geom_point(size = 2, alpha = 0.7) +\n  scale_color_viridis_c(name = \"Median\\nAge\") +\n  labs(\n    title = \"Population, Income, and Age Patterns\",\n    x = \"Total Population\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\n\n\n4.2 Create Categories for Faceting\nYour Task: Create age categories and use faceting to compare patterns.\n\n# Create age categories and faceted plot\ncounty_faceted &lt;- county_data %&gt;%\n  mutate(\n    age_category = case_when(\n      median_ageE &lt; 40 ~ \"Young (&lt; 40)\",\n      median_ageE &lt; 45 ~ \"Middle-aged (40-45)\",\n      TRUE ~ \"Older (45+)\"\n    )\n  )\n\nggplot(county_faceted) +\n  aes(x = total_popE, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~age_category) +\n  labs(\n    title = \"Population-Income Relationship by Age Profile\",\n    x = \"Total Population\",\n    y = \"Median Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_x_continuous(labels = comma) +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n\nQuestion: Do the relationships between population and income differ by age profile?\nYour Task: Create a visualization using income categories and multiple aesthetic mappings.\nRequirements:\n\nCreate income categories: “Low” (&lt;$50k), “Middle” ($50k-$80k), “High” (&gt;$80k)\nMake a scatter plot with population (x) vs median age (y) - Color points by income category\nSize points by the margin of error for income (median_incomeM)\nUse the “Set2” color palette: scale_color_brewer(palette = \"Set2\") **note: you’ll need to load the RColorBrewer package for this`\nFacet by income category using facet_wrap()\nUse theme_bw() theme\n\n\n# Create income categories\ncounty_income_cats &lt;- county_data %&gt;%\n  mutate(\n    income_category = case_when(\n      median_incomeE &lt; 50000 ~ \"Low (&lt;$50k)\",\n      median_incomeE &lt; 80000 ~ \"Middle ($50k-$80k)\",\n      TRUE ~ \"High (&gt;$80k)\"\n    )\n  )\n\n# Scatter plot with multiple aesthetics\nggplot(county_income_cats) +\n  aes(\n    x = total_popE,\n    y = median_ageE,\n    color = income_category,\n    size = median_incomeM\n  ) +\n  geom_point(alpha = 0.7) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Population vs Median Age by Income Category\",\n    x = \"Total Population\",\n    y = \"Median Age (years)\",\n    color = \"Income Category\",\n    size = \"Income Margin of Error\"\n  ) +\n  scale_x_continuous(labels = comma) +\n  theme_bw() +\n  facet_wrap(~income_category)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-5-data-joins-and-integration",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-5-data-joins-and-integration",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 5: Data Joins and Integration",
    "text": "Exercise 5: Data Joins and Integration\n\n5.1 Get Additional Census Data\nYour Task: Load educational attainment data and join it with our existing data.\n\n# Get educational attainment data\neducation_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_25plus = \"B15003_001\",    # Total population 25 years and over\n    bachelor_plus = \"B15003_022\"    # Bachelor's degree or higher\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  mutate(\n    pct_college = (bachelor_plusE / total_25plusE) * 100,\n    county_name = str_remove(NAME, paste0(\", \", state_choice))\n  ) %&gt;%\n  select(GEOID, county_name, pct_college)\n\n# Check the data\nhead(education_data)\n\n# A tibble: 6 × 3\n  GEOID county_name                    pct_college\n  &lt;chr&gt; &lt;chr&gt;                                &lt;dbl&gt;\n1 42001 Adams County, Pennsylvania           13.9 \n2 42003 Allegheny County, Pennsylvania       25.4 \n3 42005 Armstrong County, Pennsylvania       12.7 \n4 42007 Beaver County, Pennsylvania          18.3 \n5 42009 Bedford County, Pennsylvania          9.73\n6 42011 Berks County, Pennsylvania           17.2 \n\n\n\n\n5.2 Join the Datasets\nYour Task: Join the education data with our main county dataset.\n\n# Perform the join\ncombined_data &lt;- county_data %&gt;%\n  left_join(education_data, by = \"GEOID\")\n\n# Check the join worked\ncat(\"Original data rows:\", nrow(county_data), \"\\n\")\n\nOriginal data rows: 67 \n\ncat(\"Combined data rows:\", nrow(combined_data), \"\\n\")\n\nCombined data rows: 67 \n\ncat(\"Missing education data:\", sum(is.na(combined_data$pct_college)), \"\\n\")\n\nMissing education data: 0 \n\n# View the combined data\nhead(combined_data)\n\n# A tibble: 6 × 11\n  GEOID NAME     total_popE total_popM median_incomeE median_incomeM median_ageE\n  &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt;\n1 42001 Adams C…     104604         NA          78975           3334        43.8\n2 42003 Alleghe…    1245310         NA          72537            869        40.6\n3 42005 Armstro…      65538         NA          61011           2202        47  \n4 42007 Beaver …     167629         NA          67194           1531        44.9\n5 42009 Bedford…      47613         NA          58337           2606        47.3\n6 42011 Berks C…     428483         NA          74617           1191        39.9\n# ℹ 4 more variables: median_ageM &lt;dbl&gt;, county_name.x &lt;chr&gt;,\n#   county_name.y &lt;chr&gt;, pct_college &lt;dbl&gt;\n\n\n\n\n5.3 Analyze the New Relationship\nYour Task: Explore the relationship between education and income.\n\n# Education vs Income scatter plot\nggplot(combined_data) +\n  aes(x = pct_college, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  labs(\n    title = \"Education vs Income Across Counties\",\n    x = \"Percent with Bachelor's Degree or Higher\",\n    y = \"Median Household Income ($)\"\n  ) +\n  theme_minimal() +\n  scale_y_continuous(labels = dollar)\n\n\n\n\n\n\n\n# Calculate correlation\nedu_income_cor &lt;- cor(combined_data$pct_college, combined_data$median_incomeE, use = \"complete.obs\")\nprint(paste(\"Education-Income Correlation:\", round(edu_income_cor, 3)))\n\n[1] \"Education-Income Correlation: 0.811\"\n\n\n\n\n5.4 Get Housing Data and Triple Join\nYour Task: Add housing cost data to create a three-way analysis.\n\n# Get housing cost data\nhousing_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_rent = \"B25058_001\",     # Median contract rent\n    median_home_value = \"B25077_001\" # Median value of owner-occupied units\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  select(GEOID, median_rent = median_rentE, median_home_value = median_home_valueE)\n\n# Join all three datasets\nfull_data &lt;- combined_data %&gt;%\n  left_join(housing_data, by = \"GEOID\")\n\n# Create a housing affordability measure\nfull_data &lt;- full_data %&gt;%\n  mutate(\n    rent_to_income = (median_rent * 12) / median_incomeE * 100,\n    income_category = case_when(\n      median_incomeE &lt; 50000 ~ \"Low Income\",\n      median_incomeE &lt; 80000 ~ \"Middle Income\",\n      TRUE ~ \"High Income\"\n    )\n  )\n\nhead(full_data)\n\n# A tibble: 6 × 15\n  GEOID NAME     total_popE total_popM median_incomeE median_incomeM median_ageE\n  &lt;chr&gt; &lt;chr&gt;         &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;          &lt;dbl&gt;       &lt;dbl&gt;\n1 42001 Adams C…     104604         NA          78975           3334        43.8\n2 42003 Alleghe…    1245310         NA          72537            869        40.6\n3 42005 Armstro…      65538         NA          61011           2202        47  \n4 42007 Beaver …     167629         NA          67194           1531        44.9\n5 42009 Bedford…      47613         NA          58337           2606        47.3\n6 42011 Berks C…     428483         NA          74617           1191        39.9\n# ℹ 8 more variables: median_ageM &lt;dbl&gt;, county_name.x &lt;chr&gt;,\n#   county_name.y &lt;chr&gt;, pct_college &lt;dbl&gt;, median_rent &lt;dbl&gt;,\n#   median_home_value &lt;dbl&gt;, rent_to_income &lt;dbl&gt;, income_category &lt;chr&gt;\n\n\n\n\n5.5 Advanced Multi-Variable Analysis\nYour Task: Create a comprehensive visualization showing multiple relationships.\n\n# Complex multi-variable plot\nggplot(full_data) +\n  aes(x = pct_college, y = rent_to_income, \n      color = income_category, size = total_popE) +\n  geom_point(alpha = 0.7) +\n  labs(\n    title = \"Education, Housing Affordability, and Income Patterns\",\n    subtitle = \"Larger points = larger population\",\n    x = \"Percent with Bachelor's Degree or Higher\",\n    y = \"Annual Rent as % of Median Income\",\n    color = \"Income Category\",\n    size = \"Population\"\n  ) +\n  theme_minimal() +\n  guides(size = guide_legend(override.aes = list(alpha = 1)))"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-6-publication-ready-visualization",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-6-publication-ready-visualization",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 6: Publication-Ready Visualization",
    "text": "Exercise 6: Publication-Ready Visualization\n\n6.1 Create a Policy-Focused Visualization\nYour Task: Combine multiple visualizations to tell a more complete story about county characteristics.\n\n# Create a multi-panel figure\nlibrary(patchwork)  # For combining plots\n\n# Plot 1: Income distribution\np1 &lt;- ggplot(full_data) +\n  aes(x = median_incomeE) +\n  geom_histogram(bins = 15, fill = \"steelblue\", alpha = 0.7) +\n  labs(title = \"A) Income Distribution\", \n       x = \"Median Income ($)\", y = \"Counties\") +\n  scale_x_continuous(labels = dollar) +\n  theme_minimal()\n\n# Plot 2: Education vs Income\np2 &lt;- ggplot(full_data) +\n  aes(x = pct_college, y = median_incomeE) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(title = \"B) Education vs Income\",\n       x = \"% College Educated\", y = \"Median Income ($)\") +\n  scale_y_continuous(labels = dollar) +\n  theme_minimal()\n\n# Plot 3: Housing affordability by income category\np3 &lt;- ggplot(full_data) +\n  aes(x = income_category, y = rent_to_income, fill = income_category) +\n  geom_boxplot() +\n  labs(title = \"C) Housing Affordability by Income\",\n       x = \"Income Category\", y = \"Rent as % of Income\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Plot 4: Data reliability by population\np4 &lt;- ggplot(county_reliability) +\n  aes(x = total_popE, y = income_moe_pct) +\n  geom_point(alpha = 0.7) +\n  geom_hline(yintercept = 10, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"D) Data Reliability\",\n       x = \"Population\", y = \"MOE (%)\") +\n  scale_x_continuous(labels = comma) +\n  theme_minimal()\n\n# Combine all plots\ncombined_plot &lt;- (p1 | p2) / (p3 | p4)\ncombined_plot + plot_annotation(\n  title = \"Pennsylvania County Analysis: Income, Education, and Housing Patterns\",\n  caption = \"Source: American Community Survey 2018-2022\"\n)"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#exercise-7-ethical-data-communication---implementing-research-recommendations",
    "href": "labs/lab_3/week3_lab_exercise.html#exercise-7-ethical-data-communication---implementing-research-recommendations",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Exercise 7: Ethical Data Communication - Implementing Research Recommendations",
    "text": "Exercise 7: Ethical Data Communication - Implementing Research Recommendations\nBackground: Research by Jurjevich et al. (2018) found that only 27% of planners warn users about unreliable ACS data, violating AICP ethical standards. In this exercise, you’ll practice the five research-based guidelines for ethical ACS data communication.\n\n7.1 Create Professional Data Tables with Uncertainty\nYour Task: Follow the Jurjevich et al. guidelines to create an ethical data presentation.\n\n# Get comprehensive data for ethical analysis\nethical_demo_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_income = \"B19013_001\",   # Median household income\n    total_25plus = \"B15003_001\",    # Total population 25 years and over\n    bachelor_plus = \"B15003_022\",   # Bachelor's degree or higher\n    total_pop = \"B01003_001\"        # Total population\n  ),\n  state = state_choice,\n  year = 2022,\n  output = \"wide\"\n) %&gt;%\n  mutate(\n    # Calculate derived statistics\n    pct_college = (bachelor_plusE / total_25plusE) * 100,\n    \n    # Calculate MOE for percentage using error propagation\n    pct_college_moe = pct_college * sqrt((bachelor_plusM/bachelor_plusE)^2 + (total_25plusM/total_25plusE)^2),\n    \n    # Calculate coefficient of variation for all key variables\n    income_cv = (median_incomeM / median_incomeE) * 100,\n    education_cv = (pct_college_moe / pct_college) * 100,\n    \n    # Create reliability categories based on CV\n    income_reliability = case_when(\n      income_cv &lt; 12 ~ \"High\",\n      income_cv &lt;= 40 ~ \"Moderate\", \n      TRUE ~ \"Low\"\n    ),\n    \n    education_reliability = case_when(\n      education_cv &lt; 12 ~ \"High\",\n      education_cv &lt;= 40 ~ \"Moderate\",\n      TRUE ~ \"Low\"\n    ),\n    \n    # Create color coding for reliability\n    income_color = case_when(\n      income_reliability == \"High\" ~ \"🟢\",\n      income_reliability == \"Moderate\" ~ \"🟡\",\n      TRUE ~ \"🔴\"\n    ),\n    \n    education_color = case_when(\n      education_reliability == \"High\" ~ \"🟢\",\n      education_reliability == \"Moderate\" ~ \"🟡\", \n      TRUE ~ \"🔴\"\n    ),\n    \n    # Clean county names\n    county_name = str_remove(NAME, paste0(\", \", state_choice))\n  )\n\n# Create ethical data table focusing on least reliable estimates\nethical_data_table &lt;- ethical_demo_data %&gt;%\n  select(county_name, median_incomeE, median_incomeM, income_cv, income_color,\n         pct_college, pct_college_moe, education_cv, education_color) %&gt;%\n  arrange(desc(income_cv)) %&gt;%  # Show least reliable first\n  slice_head(n = 10)\n\n# Create professional table following guidelines\nlibrary(knitr)\nlibrary(kableExtra)\n\nethical_data_table %&gt;%\n  select(county_name, median_incomeE, median_incomeM, income_cv, income_color) %&gt;%\n  kable(\n    col.names = c(\"County\", \"Median Income\", \"Margin of Error\", \n                  \"CV (%)\", \"Reliability\"),\n    caption = \"Pennsylvania Counties: Median Household Income with Statistical Uncertainty\",\n    format.args = list(big.mark = \",\")\n  ) %&gt;%\n  kable_styling(bootstrap_options = c(\"striped\", \"hover\")) %&gt;%\n  footnote(\n    general = c(\"Coefficient of Variation (CV) indicates reliability:\",\n                \"🟢 High reliability (CV &lt; 12%)\",\n                \"🟡 Moderate reliability (CV 12-40%)\", \n                \"🔴 Low reliability (CV &gt; 40%)\",\n                \"Following Jurjevich et al. (2018) research recommendations\",\n                \"Source: American Community Survey 2018-2022 5-Year Estimates\"),\n    general_title = \"Notes:\"\n  )\n\n\nPennsylvania Counties: Median Household Income with Statistical Uncertainty\n\n\nCounty\nMedian Income\nMargin of Error\nCV (%)\nReliability\n\n\n\n\nForest County, Pennsylvania\n46,188\n4,612\n9.985278\n🟢 |\n\n\nSullivan County, Pennsylvania\n62,910\n5,821\n9.252901\n🟢 |\n\n\nUnion County, Pennsylvania\n64,914\n4,753\n7.321995\n🟢 |\n\n\nMontour County, Pennsylvania\n72,626\n5,146\n7.085617\n🟢 |\n\n\nElk County, Pennsylvania\n61,672\n4,091\n6.633480\n🟢 |\n\n\nGreene County, Pennsylvania\n66,283\n4,247\n6.407374\n🟢 |\n\n\nCameron County, Pennsylvania\n46,186\n2,605\n5.640237\n🟢 |\n\n\nSnyder County, Pennsylvania\n65,914\n3,666\n5.561793\n🟢 |\n\n\nCarbon County, Pennsylvania\n64,538\n3,424\n5.305402\n🟢 |\n\n\nWarren County, Pennsylvania\n57,925\n3,005\n5.187743\n🟢 |\n\n\n\nNotes:\n\n\n\n\n\n\n Coefficient of Variation (CV) indicates reliability:\n\n\n\n\n\n\n 🟢 High reliability (CV &lt; 12%)\n\n\n\n\n\n\n 🟡 Moderate reliability (CV 12-40%)\n\n\n\n\n\n\n 🔴 Low reliability (CV &gt; 40%)\n\n\n\n\n\n\n Following Jurjevich et al. (2018) research recommendations\n\n\n\n\n\n\n Source: American Community Survey 2018-2022 5-Year Estimates\n\n\n\n\n\n\n\n\n\n\n\n\n7.3 Now try Census Tracts\n\n# Get census tract poverty data for Philadelphia\nphilly_poverty &lt;- get_acs(\n    geography = \"tract\",\n    variables = c(\n      poverty_pop = \"B17001_001\",     \n      poverty_below = \"B17001_002\"    \n    ),\n    state = \"PA\",\n    county = \"101\",\n    year = 2022,\n    output = \"wide\"\n  ) %&gt;%\n  filter(poverty_popE &gt; 0) %&gt;%  # Remove tracts with no poverty data\n  mutate(\n    # Calculate poverty rate and its MOE\n    poverty_rate = (poverty_belowE / poverty_popE) * 100,\n    \n    # MOE for derived percentage using error propagation\n    poverty_rate_moe = poverty_rate * sqrt((poverty_belowM/poverty_belowE)^2 + (poverty_popM/poverty_popE)^2),\n    \n    # Coefficient of variation\n    poverty_cv = (poverty_rate_moe / poverty_rate) * 100,\n    \n    # Reliability assessment\n    reliability = case_when(\n      poverty_cv &lt; 12 ~ \"High\",\n      poverty_cv &lt;= 40 ~ \"Moderate\",\n      poverty_cv &lt;= 75 ~ \"Low\",\n      TRUE ~ \"Very Low\"\n    ),\n    \n    # Color coding\n    reliability_color = case_when(\n      reliability == \"High\" ~ \"🟢\",\n      reliability == \"Moderate\" ~ \"🟡\",\n      reliability == \"Low\" ~ \"🟠\",\n      TRUE ~ \"🔴\"\n    ),\n    \n    # Population size categories\n    pop_category = case_when(\n      poverty_popE &lt; 500 ~ \"Very Small (&lt;500)\",\n      poverty_popE &lt; 1000 ~ \"Small (500-1000)\",\n      poverty_popE &lt; 1500 ~ \"Medium (1000-1500)\",\n      TRUE ~ \"Large (1500+)\"\n    )\n  )\n\n# Check the data quality crisis at tracts\nreliability_summary &lt;- philly_poverty %&gt;%\n  count(reliability) %&gt;%\n  mutate(\n    percentage = round(n / sum(n) * 100, 1),\n    total_bg = sum(n)\n  )\n\nprint(\"Philadelphia Census Tract Poverty Data Reliability:\")\n\n[1] \"Philadelphia Census Tract Poverty Data Reliability:\"\n\nreliability_summary %&gt;%\n  kable(\n    col.names = c(\"Data Quality\", \"Number of Tracts\", \"Percentage\", \"Total\"),\n    caption = \"The Data Quality Crisis: Philadelphia Census Tract Poverty Estimates\"\n  ) %&gt;%\n  kable_styling()\n\n\nThe Data Quality Crisis: Philadelphia Census Tract Poverty Estimates\n\n\nData Quality\nNumber of Tracts\nPercentage\nTotal\n\n\n\n\nLow\n295\n75.8\n389\n\n\nModerate\n53\n13.6\n389\n\n\nVery Low\n41\n10.5\n389\n\n\n\n\n\n\n# Show the most problematic estimates (following Guideline 3: provide context)\nworst_estimates &lt;- philly_poverty %&gt;%\n  filter(reliability %in% c(\"Low\", \"Very Low\")) %&gt;%\n  arrange(desc(poverty_cv)) %&gt;%\n  slice_head(n = 10)\n\nworst_estimates %&gt;%\n  select(GEOID, poverty_rate, poverty_rate_moe, poverty_cv, reliability_color, poverty_popE) %&gt;%\n  kable(\n    col.names = c(\"Tract\", \"Poverty Rate (%)\", \"MOE\", \"CV (%)\", \"Quality\", \"Pop Size\"),\n    caption = \"Guideline 3: Tracts with Least Reliable Poverty Estimates\",\n    digits = c(0, 1, 1, 1, 0, 0)\n  ) %&gt;%\n  kable_styling() %&gt;%\n  footnote(\n    general = c(\"These estimates should NOT be used for policy decisions\",\n                \"CV &gt; 75% indicates very low reliability\",\n                \"Recommend aggregation or alternative data sources\")\n  )\n\n\nGuideline 3: Tracts with Least Reliable Poverty Estimates\n\n\nTract\nPoverty Rate (%)\nMOE\nCV (%)\nQuality\nPop Size\n\n\n\n\n42101989100\n15.8\n45.2\n286.1\n🔴 |\n38|\n\n\n42101000101\n0.7\n1.1\n157.9\n🔴 |\n1947|\n\n\n42101980200\n37.9\n45.2\n119.4\n🔴 |\n66|\n\n\n42101023100\n3.8\n4.5\n119.4\n🔴 |\n1573|\n\n\n42101025600\n1.7\n2.0\n114.2\n🔴 |\n2642|\n\n\n42101014202\n1.7\n1.8\n107.0\n🔴 |\n2273|\n\n\n42101000403\n6.6\n6.7\n101.8\n🔴 |\n1047|\n\n\n42101026100\n4.7\n4.4\n95.0\n🔴 |\n2842|\n\n\n42101036502\n4.9\n4.7\n94.9\n🔴 |\n4284|\n\n\n42101032000\n21.8\n20.6\n94.8\n🔴 |\n7873|\n\n\n\nNote: \n\n\n\n\n\n\n\n These estimates should NOT be used for policy decisions\n\n\n\n\n\n\n\n CV &gt; 75% indicates very low reliability\n\n\n\n\n\n\n\n Recommend aggregation or alternative data sources"
  },
  {
    "objectID": "labs/lab_3/week3_lab_exercise.html#key-references-and-acknowledgments",
    "href": "labs/lab_3/week3_lab_exercise.html#key-references-and-acknowledgments",
    "title": "Week 3 In-Class Lab: Data Visualization and EDA",
    "section": "Key References and Acknowledgments",
    "text": "Key References and Acknowledgments\nJurjevich, J. R., Griffin, A. L., Spielman, S. E., Folch, D. C., Merrick, M., & Nagle, N. N. (2018). Navigating statistical uncertainty: How urban and regional planners understand and work with American community survey (ACS) data for guiding policy. Journal of the American Planning Association, 84(2), 112-126.\nWalker, K. (2023). Analyzing US Census Data: Methods, Maps, and Models in R. Available at: https://walker-data.com/census-r/\nAI Acknowledgments: This lab was developed with coding assistance from Claude AI. I have run, reviewed, and edited the final version. Any remaining errors are my own."
  },
  {
    "objectID": "instructions_week1.html",
    "href": "instructions_week1.html",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Welcome to MUSA 5080! This guide will help you set up your personal portfolio repository for the semester.\n\n\nBy the end of this setup, you’ll have: - Your own portfolio repository on GitHub - live website showcasing your work - A place to document your learning journey\n\n\n\n\nThis is what you are building: Dr. Delmelle’s sample portfolio\n\n\n\n\nBefore starting, make sure you have: - [ ] A GitHub account (create one here if needed) - [ ] Quarto installed on your computer (download here) - [ ] R and RStudio installed\n\n\n\n\n\nYou should already be in your personal repository (created when you accepted the GitHub Classroom assignment). Now let’s personalize it!\n\n\n\nClick on the _quarto.yml file\nClick the pencil icon (✏️) to edit\nChange \"Your Name - MUSA 5080 Portfolio\" to include your actual name\nExample: \"Jane Smith - MUSA 5080 Portfolio\"\nClick “Commit changes” at the bottom\n\n\n\n\n\nClick on the index.qmd file\nClick the pencil icon (✏️) to edit\nUpdate the “About Me” section with your information:\n\nYour name and background\nYour email address\nYour GitHub username\nWhy you’re taking this course\n\nClick “Commit changes”\n\n\n\n\n\nNavigate to the weekly-notes folder\nClick on week-01-notes.qmd\nClick the pencil icon (✏️) to edit\nFill in your notes from the first class\nClick “Commit changes”\n\n\n\n\n\nThis step makes your portfolio visible as a live website!\n\nGo to Settings: Click the “Settings” tab at the top of your repository\nFind Pages: Scroll down and click “Pages” in the left sidebar\nConfigure Source:\n\nSource: Select “Deploy from a branch”\nBranch: Select “main”\nFolder: Select “/ docs”\n\nSave: Click “Save”\nWait: GitHub will show a message that your site is being built (this takes 1-5 minutes)\n\n\n\n\n\nFind Your URL: After a few minutes, GitHub will show your website URL at the top of the Pages settings\n\nIt will look like: https://yourusername.github.io/repository-name\n\nVisit Your Site: Click the link to see your live portfolio!\nBookmark It: Save this URL - you’ll submit it to Canvas\n\n\n\n\n\nCopy your live website URL\nGo to the Canvas assignment\nSubmit your URL\n\n\n\n\n\nIf you want to work on your computer and see changes before publishing:\n\n\n# Replace [your-repo-url] with your actual repository URL\ngit clone [your-repo-url]\ncd [your-repository-name]\n\n\n\n# Edit your files using RStudio\n# Preview your changes:\nquarto render\nquarto preview\n\n# When ready, save your changes:\ngit add .\ngit commit -m \"Update portfolio\"\ngit push\nYour live website will automatically update when you push changes!\n\n\n\n\nEach week you’ll: 1. Create a new file: weekly-notes/week-XX-notes.qmd 2. Copy the template from week-01-notes.qmd 3. Fill in your reflections and key concepts 4. Commit and push your changes\n\n\n\n\n\n\nWait longer: GitHub Pages can take up to 10 minutes to build\nCheck Actions tab: Look for any red X marks indicating build failures\nVerify Pages settings: Make sure you selected “main” branch and “/docs” folder\n\n\n\n\n\nCheck permissions: Make sure you’re in YOUR repository, not the template\nSign in: Ensure you’re signed into GitHub\n\n\n\n\n\nCheck YAML syntax: Make sure your _quarto.yml file has proper formatting\nVerify file names: Files should end in .qmd not .md\nLook at error messages: The Actions tab will show specific error details\n\n\n\n\n\nDon’t panic! Every change is tracked in Git\nSee history: Click the “History” button on any file to see previous versions\nRevert changes: You can always go back to a previous version\n\n\n\n\n\n\nCommit often: Save your work frequently with descriptive commit messages\nUse branches: For major changes, create a new branch and merge when ready\nPreview locally: Use quarto preview to see changes before publishing\nKeep it professional: This portfolio can be shared with future employers!\nDocument everything: Good documentation is as important as good analysis\n\n\n\n\n\nQuarto Documentation\nGitHub Docs\nMarkdown Guide\nGit Tutorial\n\n\n\n\nDuring Class: - Raise your hand for immediate help - Work with classmates - collaboration is encouraged for setup!\nOutside Class: - Office Hours: Mondays 1:30-3:00 PM - Email: delmelle@design.upenn.edu - GitHub Issues: Create an issue in your repository for technical problems - Canvas Discussion: Post questions others might have too\n\n\n\nBefore submitting, make sure you’ve: - [ ] Customized _quarto.yml with your name - [ ] Updated index.qmd with your information - [ ] Completed Week 1 notes - [ ] Enabled GitHub Pages - [ ] Verified your website loads correctly - [ ] Submitted your URL to Canvas\n\nNeed help? Don’t struggle alone - reach out during office hours (mine + TAs) or in class!"
  },
  {
    "objectID": "instructions_week1.html#what-youre-building",
    "href": "instructions_week1.html#what-youre-building",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "By the end of this setup, you’ll have: - Your own portfolio repository on GitHub - live website showcasing your work - A place to document your learning journey"
  },
  {
    "objectID": "instructions_week1.html#example",
    "href": "instructions_week1.html#example",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "This is what you are building: Dr. Delmelle’s sample portfolio"
  },
  {
    "objectID": "instructions_week1.html#prerequisites",
    "href": "instructions_week1.html#prerequisites",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Before starting, make sure you have: - [ ] A GitHub account (create one here if needed) - [ ] Quarto installed on your computer (download here) - [ ] R and RStudio installed"
  },
  {
    "objectID": "instructions_week1.html#step-by-step-setup",
    "href": "instructions_week1.html#step-by-step-setup",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "You should already be in your personal repository (created when you accepted the GitHub Classroom assignment). Now let’s personalize it!\n\n\n\nClick on the _quarto.yml file\nClick the pencil icon (✏️) to edit\nChange \"Your Name - MUSA 5080 Portfolio\" to include your actual name\nExample: \"Jane Smith - MUSA 5080 Portfolio\"\nClick “Commit changes” at the bottom\n\n\n\n\n\nClick on the index.qmd file\nClick the pencil icon (✏️) to edit\nUpdate the “About Me” section with your information:\n\nYour name and background\nYour email address\nYour GitHub username\nWhy you’re taking this course\n\nClick “Commit changes”\n\n\n\n\n\nNavigate to the weekly-notes folder\nClick on week-01-notes.qmd\nClick the pencil icon (✏️) to edit\nFill in your notes from the first class\nClick “Commit changes”\n\n\n\n\n\nThis step makes your portfolio visible as a live website!\n\nGo to Settings: Click the “Settings” tab at the top of your repository\nFind Pages: Scroll down and click “Pages” in the left sidebar\nConfigure Source:\n\nSource: Select “Deploy from a branch”\nBranch: Select “main”\nFolder: Select “/ docs”\n\nSave: Click “Save”\nWait: GitHub will show a message that your site is being built (this takes 1-5 minutes)\n\n\n\n\n\nFind Your URL: After a few minutes, GitHub will show your website URL at the top of the Pages settings\n\nIt will look like: https://yourusername.github.io/repository-name\n\nVisit Your Site: Click the link to see your live portfolio!\nBookmark It: Save this URL - you’ll submit it to Canvas\n\n\n\n\n\nCopy your live website URL\nGo to the Canvas assignment\nSubmit your URL"
  },
  {
    "objectID": "instructions_week1.html#working-on-your-portfolio-locally-optional-but-recommended",
    "href": "instructions_week1.html#working-on-your-portfolio-locally-optional-but-recommended",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "If you want to work on your computer and see changes before publishing:\n\n\n# Replace [your-repo-url] with your actual repository URL\ngit clone [your-repo-url]\ncd [your-repository-name]\n\n\n\n# Edit your files using RStudio\n# Preview your changes:\nquarto render\nquarto preview\n\n# When ready, save your changes:\ngit add .\ngit commit -m \"Update portfolio\"\ngit push\nYour live website will automatically update when you push changes!"
  },
  {
    "objectID": "instructions_week1.html#weekly-workflow",
    "href": "instructions_week1.html#weekly-workflow",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Each week you’ll: 1. Create a new file: weekly-notes/week-XX-notes.qmd 2. Copy the template from week-01-notes.qmd 3. Fill in your reflections and key concepts 4. Commit and push your changes"
  },
  {
    "objectID": "instructions_week1.html#troubleshooting",
    "href": "instructions_week1.html#troubleshooting",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Wait longer: GitHub Pages can take up to 10 minutes to build\nCheck Actions tab: Look for any red X marks indicating build failures\nVerify Pages settings: Make sure you selected “main” branch and “/docs” folder\n\n\n\n\n\nCheck permissions: Make sure you’re in YOUR repository, not the template\nSign in: Ensure you’re signed into GitHub\n\n\n\n\n\nCheck YAML syntax: Make sure your _quarto.yml file has proper formatting\nVerify file names: Files should end in .qmd not .md\nLook at error messages: The Actions tab will show specific error details\n\n\n\n\n\nDon’t panic! Every change is tracked in Git\nSee history: Click the “History” button on any file to see previous versions\nRevert changes: You can always go back to a previous version"
  },
  {
    "objectID": "instructions_week1.html#pro-tips",
    "href": "instructions_week1.html#pro-tips",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Commit often: Save your work frequently with descriptive commit messages\nUse branches: For major changes, create a new branch and merge when ready\nPreview locally: Use quarto preview to see changes before publishing\nKeep it professional: This portfolio can be shared with future employers!\nDocument everything: Good documentation is as important as good analysis"
  },
  {
    "objectID": "instructions_week1.html#additional-resources",
    "href": "instructions_week1.html#additional-resources",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Quarto Documentation\nGitHub Docs\nMarkdown Guide\nGit Tutorial"
  },
  {
    "objectID": "instructions_week1.html#getting-help",
    "href": "instructions_week1.html#getting-help",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "During Class: - Raise your hand for immediate help - Work with classmates - collaboration is encouraged for setup!\nOutside Class: - Office Hours: Mondays 1:30-3:00 PM - Email: delmelle@design.upenn.edu - GitHub Issues: Create an issue in your repository for technical problems - Canvas Discussion: Post questions others might have too"
  },
  {
    "objectID": "instructions_week1.html#checklist",
    "href": "instructions_week1.html#checklist",
    "title": "Portfolio Setup Instructions",
    "section": "",
    "text": "Before submitting, make sure you’ve: - [ ] Customized _quarto.yml with your name - [ ] Updated index.qmd with your information - [ ] Completed Week 1 notes - [ ] Enabled GitHub Pages - [ ] Verified your website loads correctly - [ ] Submitted your URL to Canvas\n\nNeed help? Don’t struggle alone - reach out during office hours (mine + TAs) or in class!"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html",
    "href": "assignments/assignment_1/assignment_1.html",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "You are a data analyst for the Pennsylvania Department of Human Services. The department is considering implementing an algorithmic system to identify communities that should receive priority for social service funding and outreach programs. Your supervisor has asked you to evaluate the quality and reliability of available census data to inform this decision.\nDrawing on our Week 2 discussion of algorithmic bias, you need to assess not just what the data shows, but how reliable it is and what communities might be affected by data quality issues.\n\n\n\n\nApply dplyr functions to real census data for policy analysis\nEvaluate data quality using margins of error\nConnect technical analysis to algorithmic decision-making\nIdentify potential equity implications of data reliability issues\nCreate professional documentation for policy stakeholders\n\n\n\n\nSubmit by posting your updated portfolio link on Canvas. Your assignment should be accessible at your-portfolio-url/assignments/assignment_1/\nMake sure to update your _quarto.yml navigation to include this assignment under an “Assignments” menu."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#scenario",
    "href": "assignments/assignment_1/assignment_1.html#scenario",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "You are a data analyst for the Pennsylvania Department of Human Services. The department is considering implementing an algorithmic system to identify communities that should receive priority for social service funding and outreach programs. Your supervisor has asked you to evaluate the quality and reliability of available census data to inform this decision.\nDrawing on our Week 2 discussion of algorithmic bias, you need to assess not just what the data shows, but how reliable it is and what communities might be affected by data quality issues."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#learning-objectives",
    "href": "assignments/assignment_1/assignment_1.html#learning-objectives",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "Apply dplyr functions to real census data for policy analysis\nEvaluate data quality using margins of error\nConnect technical analysis to algorithmic decision-making\nIdentify potential equity implications of data reliability issues\nCreate professional documentation for policy stakeholders"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#submission-instructions",
    "href": "assignments/assignment_1/assignment_1.html#submission-instructions",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "",
    "text": "Submit by posting your updated portfolio link on Canvas. Your assignment should be accessible at your-portfolio-url/assignments/assignment_1/\nMake sure to update your _quarto.yml navigation to include this assignment under an “Assignments” menu."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#data-retrieval",
    "href": "assignments/assignment_1/assignment_1.html#data-retrieval",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.1 Data Retrieval",
    "text": "2.1 Data Retrieval\nYour Task: Use get_acs() to retrieve county-level data for your chosen state.\nRequirements: - Geography: county level - Variables: median household income (B19013_001) and total population (B01003_001)\n- Year: 2022 - Survey: acs5 - Output format: wide\nHint: Remember to give your variables descriptive names using the variables = c(name = \"code\") syntax.\n\n# Write your get_acs() code here\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    median_income = \"B19013_001\",\n    total_population = \"B01003_001\"\n  ),\n  state = my_state,\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n# Clean the county names to remove state name and \"County\" \n# Hint: use mutate() with str_remove()\ncounty_data &lt;- county_data %&gt;%\n  mutate(\n    county_name = str_remove(NAME, \", Pennsylvania\"),\n    county_name = str_remove(county_name, \" County\")\n  )\n\n# Display the first few rows\nhead(county_data)\n\n# A tibble: 6 × 7\n  GEOID NAME   median_incomeE median_incomeM total_populationE total_populationM\n  &lt;chr&gt; &lt;chr&gt;           &lt;dbl&gt;          &lt;dbl&gt;             &lt;dbl&gt;             &lt;dbl&gt;\n1 42001 Adams…          78975           3334            104604                NA\n2 42003 Alleg…          72537            869           1245310                NA\n3 42005 Armst…          61011           2202             65538                NA\n4 42007 Beave…          67194           1531            167629                NA\n5 42009 Bedfo…          58337           2606             47613                NA\n6 42011 Berks…          74617           1191            428483                NA\n# ℹ 1 more variable: county_name &lt;chr&gt;"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#data-quality-assessment",
    "href": "assignments/assignment_1/assignment_1.html#data-quality-assessment",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.2 Data Quality Assessment",
    "text": "2.2 Data Quality Assessment\nYour Task: Calculate margin of error percentages and create reliability categories.\nRequirements: - Calculate MOE percentage: (margin of error / estimate) * 100 - Create reliability categories: - High Confidence: MOE &lt; 5% - Moderate Confidence: MOE 5-10%\n- Low Confidence: MOE &gt; 10% - Create a flag for unreliable estimates (MOE &gt; 10%)\nHint: Use mutate() with case_when() for the categories.\n\n# Calculate MOE percentage and reliability categories using mutate()\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    # Calculate MOE percentage for median income\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    \n    # Create reliability categories\n    reliability_category = case_when(\n      moe_percentage &lt; 5 ~ \"High Confidence\",\n      moe_percentage &gt;= 5 & moe_percentage &lt;= 10 ~ \"Moderate Confidence\",\n      moe_percentage &gt; 10 ~ \"Low Confidence\"\n    ),\n    \n    # Create flag for unreliable estimates\n    unreliable_flag = ifelse(moe_percentage &gt; 10, \"Unreliable\", \"Reliable\")\n  )\n\n# Create a summary showing count of counties in each reliability category\n# Hint: use count() and mutate() to add percentages\nreliability_summary &lt;- county_reliability %&gt;%\n  count(reliability_category) %&gt;%\n  mutate(\n    percentage = round((n / sum(n)) * 100, 1),\n    summary = paste0(n, \" (\", percentage, \"%)\")\n  )\n\nprint(reliability_summary)\n\n# A tibble: 2 × 4\n  reliability_category     n percentage summary   \n  &lt;chr&gt;                &lt;int&gt;      &lt;dbl&gt; &lt;chr&gt;     \n1 High Confidence         57       85.1 57 (85.1%)\n2 Moderate Confidence     10       14.9 10 (14.9%)"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#high-uncertainty-counties",
    "href": "assignments/assignment_1/assignment_1.html#high-uncertainty-counties",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "2.3 High Uncertainty Counties",
    "text": "2.3 High Uncertainty Counties\nYour Task: Identify the 5 counties with the highest MOE percentages.\nRequirements: - Sort by MOE percentage (highest first) - Select the top 5 counties - Display: county name, median income, margin of error, MOE percentage, reliability category - Format as a professional table using kable()\nHint: Use arrange(), slice(), and select() functions.\n\n# Create table of top 5 counties by MOE percentage\ntop_uncertainty &lt;- county_reliability %&gt;%\n  arrange(desc(moe_percentage)) %&gt;%\n  slice(1:5) %&gt;%\n  select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability_category)\n\n# Format as table with kable() - include appropriate column names and caption\nkable(top_uncertainty,\n      col.names = c(\"County\", \"Median Income\", \"Margin of Error\", \"MOE %\", \"Reliability\"),\n      caption = \"Top 5 Counties with Highest Margin of Error Percentages\",\n      digits = 2)\n\n\nTop 5 Counties with Highest Margin of Error Percentages\n\n\nCounty\nMedian Income\nMargin of Error\nMOE %\nReliability\n\n\n\n\nForest\n46188\n4612\n9.99\nModerate Confidence\n\n\nSullivan\n62910\n5821\n9.25\nModerate Confidence\n\n\nUnion\n64914\n4753\n7.32\nModerate Confidence\n\n\nMontour\n72626\n5146\n7.09\nModerate Confidence\n\n\nElk\n61672\n4091\n6.63\nModerate Confidence\n\n\n\n\n\nData Quality Commentary:\nThe results show that Forest, Sullivan, Union, Montour, and Elk counties have the highest uncertainty in median income estimates, with MOE percentages ranging from 6.63% to 9.99%. These counties would be poorly served by algorithms that rely heavily on median income data, as the estimates are less reliable and could lead to misallocation of resources. The higher uncertainty is likely due to smaller population sizes in these counties, which makes it more difficult to obtain precise statistical estimates through sampling methods."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#focus-area-selection",
    "href": "assignments/assignment_1/assignment_1.html#focus-area-selection",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.1 Focus Area Selection",
    "text": "3.1 Focus Area Selection\nYour Task: Select 2-3 counties from your reliability analysis for detailed tract-level study.\nStrategy: Choose counties that represent different reliability levels (e.g., 1 high confidence, 1 moderate, 1 low confidence) to compare how data quality varies.\n\n# Use filter() to select 2-3 counties from your county_reliability data\n# Store the selected counties in a variable called selected_counties\n\n# Get one county from each reliability category for comparison\nselected_counties &lt;- county_reliability %&gt;%\n  group_by(reliability_category) %&gt;%\n  slice(1) %&gt;%\n  ungroup() %&gt;%\n  select(GEOID, county_name, median_incomeE, moe_percentage, reliability_category)\n\n# Display the selected counties with their key characteristics\n# Show: county name, median income, MOE percentage, reliability category\nkable(selected_counties,\n      col.names = c(\"GEOID\", \"County\", \"Median Income\", \"MOE %\", \"Reliability\"),\n      caption = \"Selected Counties for Detailed Analysis\",\n      digits = 2)\n\n\nSelected Counties for Detailed Analysis\n\n\nGEOID\nCounty\nMedian Income\nMOE %\nReliability\n\n\n\n\n42001\nAdams\n78975\n4.22\nHigh Confidence\n\n\n42023\nCameron\n46186\n5.64\nModerate Confidence\n\n\n\n\n\nComment on the output: The selected counties represent a good range of data reliability levels - Adams County with high confidence (4.22% MOE) and Cameron County with moderate confidence (5.64% MOE). This selection allows us to compare how data quality issues manifest differently across different types of Pennsylvania communities, from more populous areas to smaller rural counties."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#tract-level-demographics",
    "href": "assignments/assignment_1/assignment_1.html#tract-level-demographics",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.2 Tract-Level Demographics",
    "text": "3.2 Tract-Level Demographics\nYour Task: Get demographic data for census tracts in your selected counties.\nRequirements: - Geography: tract level - Variables: white alone (B03002_003), Black/African American (B03002_004), Hispanic/Latino (B03002_012), total population (B03002_001) - Use the same state and year as before - Output format: wide - Challenge: You’ll need county codes, not names. Look at the GEOID patterns in your county data for hints.\n\n# Define your race/ethnicity variables with descriptive names\nrace_vars &lt;- c(\n  total_pop = \"B03002_001\",\n  white_alone = \"B03002_003\",\n  black_alone = \"B03002_004\",\n  hispanic = \"B03002_012\"\n)\n\n# Extract county codes from selected counties for tract-level analysis\ncounty_codes &lt;- str_sub(selected_counties$GEOID, 3, 5)\n\n# Use get_acs() to retrieve tract-level data\n# Hint: You may need to specify county codes in the county parameter\ntract_data &lt;- get_acs(\n  geography = \"tract\",\n  variables = race_vars,\n  state = my_state,\n  county = county_codes,\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n# Calculate percentage of each group using mutate()\n# Create percentages for white, Black, and Hispanic populations\ntract_demographics &lt;- tract_data %&gt;%\n  mutate(\n    pct_white = (white_aloneE / total_popE) * 100,\n    pct_black = (black_aloneE / total_popE) * 100,\n    pct_hispanic = (hispanicE / total_popE) * 100,\n    \n    # Add readable tract and county name columns using str_extract() or similar\n    county_code = str_sub(GEOID, 3, 5),\n    tract_name = paste0(\"Tract \", str_sub(GEOID, 6, 11)),\n    county_name = case_when(\n      county_code %in% county_codes[1] ~ selected_counties$county_name[1],\n      county_code %in% county_codes[2] ~ selected_counties$county_name[2],\n      county_code %in% county_codes[3] ~ selected_counties$county_name[3],\n      TRUE ~ \"Other\"\n    )\n  )\n\nhead(tract_demographics)\n\n# A tibble: 6 × 16\n  GEOID       NAME  total_popE total_popM white_aloneE white_aloneM black_aloneE\n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;        &lt;dbl&gt;\n1 42001030101 Cens…       2658         14         2317          153            2\n2 42001030103 Cens…       2416        329         2384          341            0\n3 42001030104 Cens…       3395        332         3114          359            0\n4 42001030200 Cens…       5475        464         4294          423           16\n5 42001030300 Cens…       4412        215         3619          220          132\n6 42001030400 Cens…       5462        206         5006          287           23\n# ℹ 9 more variables: black_aloneM &lt;dbl&gt;, hispanicE &lt;dbl&gt;, hispanicM &lt;dbl&gt;,\n#   pct_white &lt;dbl&gt;, pct_black &lt;dbl&gt;, pct_hispanic &lt;dbl&gt;, county_code &lt;chr&gt;,\n#   tract_name &lt;chr&gt;, county_name &lt;chr&gt;"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#demographic-analysis",
    "href": "assignments/assignment_1/assignment_1.html#demographic-analysis",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "3.3 Demographic Analysis",
    "text": "3.3 Demographic Analysis\nYour Task: Analyze the demographic patterns in your selected areas.\n\n# Find the tract with the highest percentage of Hispanic/Latino residents\n# Hint: use arrange() and slice() to get the top tract\nhighest_hispanic &lt;- tract_demographics %&gt;%\n  arrange(desc(pct_hispanic)) %&gt;%\n  slice(1) %&gt;%\n  select(county_name, tract_name, pct_hispanic, total_popE)\n\nprint(\"Tract with highest Hispanic/Latino percentage:\")\n\n[1] \"Tract with highest Hispanic/Latino percentage:\"\n\nprint(highest_hispanic)\n\n# A tibble: 1 × 4\n  county_name tract_name   pct_hispanic total_popE\n  &lt;chr&gt;       &lt;chr&gt;               &lt;dbl&gt;      &lt;dbl&gt;\n1 Adams       Tract 031502         20.9       3908\n\n# Calculate average demographics by county using group_by() and summarize()\n# Show: number of tracts, average percentage for each racial/ethnic group\ncounty_summary &lt;- tract_demographics %&gt;%\n  group_by(county_name) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_total_pop = mean(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create a nicely formatted table of your results using kable()\nkable(county_summary,\n      col.names = c(\"County\", \"# Tracts\", \"Avg Population\", \"% White\", \"% Black\", \"% Hispanic\"),\n      caption = \"Average Demographics by County\",\n      digits = 1)\n\n\nAverage Demographics by County\n\n\nCounty\n# Tracts\nAvg Population\n% White\n% Black\n% Hispanic\n\n\n\n\nAdams\n27\n3874.2\n88.3\n1.3\n7.1\n\n\nCameron\n2\n2268.0\n93.2\n0.0\n2.1"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#moe-analysis-for-demographic-variables",
    "href": "assignments/assignment_1/assignment_1.html#moe-analysis-for-demographic-variables",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "4.1 MOE Analysis for Demographic Variables",
    "text": "4.1 MOE Analysis for Demographic Variables\nYour Task: Examine margins of error for demographic variables to see if some communities have less reliable data.\nRequirements: - Calculate MOE percentages for each demographic variable - Flag tracts where any demographic variable has MOE &gt; 15% - Create summary statistics\n\n# Calculate MOE percentages for white, Black, and Hispanic variables\n# Hint: use the same formula as before (margin/estimate * 100)\ntract_moe_analysis &lt;- tract_demographics %&gt;%\n  mutate(\n    white_moe_pct = (white_aloneM / white_aloneE) * 100,\n    black_moe_pct = (black_aloneM / black_aloneE) * 100,\n    hispanic_moe_pct = (hispanicM / hispanicE) * 100,\n    \n    # Create a flag for tracts with high MOE on any demographic variable\n    # Use logical operators (| for OR) in an ifelse() statement\n    high_moe_flag = ifelse(\n      white_moe_pct &gt; 15 | black_moe_pct &gt; 15 | hispanic_moe_pct &gt; 15,\n      \"High MOE Issues\",\n      \"Acceptable MOE\"\n    )\n  )\n\n# Create summary statistics showing how many tracts have data quality issues\nmoe_summary &lt;- tract_moe_analysis %&gt;%\n  count(high_moe_flag) %&gt;%\n  mutate(\n    percentage = round((n / sum(n)) * 100, 1)\n  )\n\nprint(\"Summary of tracts with data quality issues:\")\n\n[1] \"Summary of tracts with data quality issues:\"\n\nprint(moe_summary)\n\n# A tibble: 1 × 3\n  high_moe_flag       n percentage\n  &lt;chr&gt;           &lt;int&gt;      &lt;dbl&gt;\n1 High MOE Issues    29        100\n\n# Show some example tracts with high MOE\nhigh_moe_examples &lt;- tract_moe_analysis %&gt;%\n  filter(high_moe_flag == \"High MOE Issues\") %&gt;%\n  select(county_name, tract_name, white_moe_pct, black_moe_pct, hispanic_moe_pct) %&gt;%\n  head(3)\n\nkable(high_moe_examples,\n      col.names = c(\"County\", \"Tract\", \"White MOE %\", \"Black MOE %\", \"Hispanic MOE %\"),\n      caption = \"Example Tracts with High MOE Issues\",\n      digits = 1)\n\n\nExample Tracts with High MOE Issues\n\n\nCounty\nTract\nWhite MOE %\nBlack MOE %\nHispanic MOE %\n\n\n\n\nAdams\nTract 030101\n6.6\n200\n50.2\n\n\nAdams\nTract 030103\n14.3\nInf\nInf\n\n\nAdams\nTract 030104\n11.5\nInf\n100.6"
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#pattern-analysis",
    "href": "assignments/assignment_1/assignment_1.html#pattern-analysis",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "4.2 Pattern Analysis",
    "text": "4.2 Pattern Analysis\nYour Task: Investigate whether data quality problems are randomly distributed or concentrated in certain types of communities.\n\n# Group tracts by whether they have high MOE issues\n# Calculate average characteristics for each group:\n# - population size, demographic percentages\n\n# Use group_by() and summarize() to create this comparison\npattern_analysis &lt;- tract_moe_analysis %&gt;%\n  group_by(high_moe_flag) %&gt;%\n  summarize(\n    num_tracts = n(),\n    avg_population = mean(total_popE, na.rm = TRUE),\n    median_population = median(total_popE, na.rm = TRUE),\n    avg_pct_white = mean(pct_white, na.rm = TRUE),\n    avg_pct_black = mean(pct_black, na.rm = TRUE),\n    avg_pct_hispanic = mean(pct_hispanic, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create a professional table showing the patterns\nkable(pattern_analysis,\n      col.names = c(\"MOE Status\", \"# Tracts\", \"Avg Pop\", \"Median Pop\", \"% White\", \"% Black\", \"% Hispanic\"),\n      caption = \"Comparison of Tracts by Data Quality Issues\",\n      digits = 1)\n\n\nComparison of Tracts by Data Quality Issues\n\n\n\n\n\n\n\n\n\n\n\nMOE Status\n# Tracts\nAvg Pop\nMedian Pop\n% White\n% Black\n% Hispanic\n\n\n\n\nHigh MOE Issues\n29\n3763.4\n3718\n88.7\n1.2\n6.8\n\n\n\n\n\nPattern Analysis: The analysis reveals that all 29 census tracts in our selected counties show high MOE issues (&gt;15%) for at least one demographic variable. This is particularly concerning as it shows that even in counties with relatively good income data reliability, demographic estimates at the tract level can be highly uncertain. The pattern suggests that smaller geographic areas and potentially less diverse communities face greater challenges in data reliability, likely due to smaller sample sizes and the difficulty of obtaining precise estimates for minority populations in areas where they represent a small percentage of the total population."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#analysis-integration-and-professional-summary",
    "href": "assignments/assignment_1/assignment_1.html#analysis-integration-and-professional-summary",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "5.1 Analysis Integration and Professional Summary",
    "text": "5.1 Analysis Integration and Professional Summary\nYour Task: Write an executive summary that integrates findings from all four analyses.\nExecutive Summary Requirements: 1. Overall Pattern Identification: What are the systematic patterns across all your analyses? 2. Equity Assessment: Which communities face the greatest risk of algorithmic bias based on your findings? 3. Root Cause Analysis: What underlying factors drive both data quality issues and bias risk? 4. Strategic Recommendations: What should the Department implement to address these systematic issues?\nExecutive Summary:\nMy analysis of Pennsylvania’s census data reveals systematic patterns in data quality that pose significant challenges for algorithmic decision-making in social service allocation. At the county level, I found that 85.1% of Pennsylvania’s 67 counties have high confidence data (MOE &lt; 5%) for median income, while 14.9% fall into the moderate confidence category (MOE 5-10%). Notably, no counties reached the low confidence threshold (MOE &gt; 10%), indicating that county-level income data is generally reliable across Pennsylvania. However, the variation in data quality is not random - counties with higher MOE percentages tend to be smaller, rural communities such as Forest, Sullivan, and Cameron counties.\nThe tract-level demographic analysis reveals more concerning patterns for algorithmic equity. All 29 census tracts examined in my selected counties showed high MOE issues (&gt;15%) for at least one demographic variable, particularly for Black and Hispanic population estimates. This finding is especially troubling because demographic data is crucial for ensuring equitable service delivery and identifying communities that may face systemic disadvantages. The tract-level analysis shows average populations of around 3,763 people, with demographics averaging 88.7% white, 1.2% Black, and 6.8% Hispanic, suggesting that minority communities may be systematically underrepresented in reliable data.\nThe equity implications of these findings are profound and create multiple layers of algorithmic bias risk. Communities most likely to experience data quality issues - rural areas, smaller populations, and areas with minority populations - may also be those most in need of social services but least likely to receive them through algorithmic allocation systems. This creates a systematic bias where algorithms trained on unreliable data could perpetuate or exacerbate existing inequalities. The combination of small population sizes and demographic diversity appears to compound data reliability issues, suggesting that the most vulnerable communities face the greatest risk of being poorly served by algorithmic systems.\nGiven these systematic challenges, the Pennsylvania Department of Human Services must implement a tiered, equity-conscious approach to algorithmic decision-making. Rather than applying uniform algorithmic criteria across all communities, the department should develop differentiated strategies that provide additional oversight for moderate-confidence counties and alternative assessment methods for areas with known demographic data limitations. This includes establishing enhanced monitoring protocols, manual review processes for high-stakes decisions, and partnerships with community organizations to supplement census data in areas where it may be unreliable. Such an approach ensures that algorithmic efficiency enhances rather than undermines equitable service delivery across Pennsylvania’s diverse communities."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#specific-recommendations",
    "href": "assignments/assignment_1/assignment_1.html#specific-recommendations",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "6.3 Specific Recommendations",
    "text": "6.3 Specific Recommendations\nYour Task: Create a decision framework for algorithm implementation.\n\n# Create a summary table using your county reliability data\n# Include: county name, median income, MOE percentage, reliability category\n\nrecommendations_table &lt;- county_reliability %&gt;%\n  select(county_name, median_incomeE, moe_percentage, reliability_category) %&gt;%\n  # Add a new column with algorithm recommendations using case_when():\n  mutate(\n    algorithm_recommendation = case_when(\n      reliability_category == \"High Confidence\" ~ \"Safe for algorithmic decisions\",\n      reliability_category == \"Moderate Confidence\" ~ \"Use with caution - monitor outcomes\",\n      reliability_category == \"Low Confidence\" ~ \"Requires manual review or additional data\"\n    )\n  ) %&gt;%\n  arrange(moe_percentage)\n\n# Format as a professional table with kable()\nkable(recommendations_table,\n      col.names = c(\"County\", \"Median Income\", \"MOE %\", \"Reliability\", \"Algorithm Recommendation\"),\n      caption = \"Algorithm Implementation Recommendations by County\",\n      digits = 2)\n\n\nAlgorithm Implementation Recommendations by County\n\n\n\n\n\n\n\n\n\nCounty\nMedian Income\nMOE %\nReliability\nAlgorithm Recommendation\n\n\n\n\nAllegheny\n72537\n1.20\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMontgomery\n107441\n1.27\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPhiladelphia\n57537\n1.38\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBucks\n107826\n1.41\nHigh Confidence\nSafe for algorithmic decisions\n\n\nDelaware\n86390\n1.53\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBerks\n74617\n1.60\nHigh Confidence\nSafe for algorithmic decisions\n\n\nChester\n118574\n1.70\nHigh Confidence\nSafe for algorithmic decisions\n\n\nYork\n79183\n1.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLancaster\n81458\n1.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nNorthampton\n82201\n1.93\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWestmoreland\n69454\n1.99\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLehigh\n74973\n2.00\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCumberland\n82849\n2.20\nHigh Confidence\nSafe for algorithmic decisions\n\n\nDauphin\n71046\n2.27\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBeaver\n67194\n2.28\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLuzerne\n60836\n2.35\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWashington\n74403\n2.38\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSchuylkill\n63574\n2.40\nHigh Confidence\nSafe for algorithmic decisions\n\n\nErie\n59396\n2.55\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLackawanna\n63739\n2.58\nHigh Confidence\nSafe for algorithmic decisions\n\n\nButler\n82932\n2.61\nHigh Confidence\nSafe for algorithmic decisions\n\n\nNorthumberland\n55952\n2.67\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLebanon\n72532\n2.69\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCentre\n70087\n2.77\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSomerset\n57357\n2.78\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClearfield\n56982\n2.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFranklin\n71808\n3.00\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLawrence\n57585\n3.07\nHigh Confidence\nSafe for algorithmic decisions\n\n\nSusquehanna\n63968\n3.14\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPerry\n76103\n3.17\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMonroe\n80656\n3.17\nHigh Confidence\nSafe for algorithmic decisions\n\n\nTioga\n59707\n3.23\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCambria\n54221\n3.34\nHigh Confidence\nSafe for algorithmic decisions\n\n\nJefferson\n56607\n3.41\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMifflin\n58012\n3.43\nHigh Confidence\nSafe for algorithmic decisions\n\n\nVenango\n59278\n3.45\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBlair\n59386\n3.47\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBradford\n60650\n3.57\nHigh Confidence\nSafe for algorithmic decisions\n\n\nArmstrong\n61011\n3.61\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMercer\n57353\n3.63\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFulton\n63153\n3.65\nHigh Confidence\nSafe for algorithmic decisions\n\n\nColumbia\n59457\n3.76\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWyoming\n67968\n3.85\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClinton\n59011\n3.86\nHigh Confidence\nSafe for algorithmic decisions\n\n\nCrawford\n58734\n3.91\nHigh Confidence\nSafe for algorithmic decisions\n\n\nFayette\n55579\n4.16\nHigh Confidence\nSafe for algorithmic decisions\n\n\nAdams\n78975\n4.22\nHigh Confidence\nSafe for algorithmic decisions\n\n\nClarion\n58690\n4.37\nHigh Confidence\nSafe for algorithmic decisions\n\n\nLycoming\n63437\n4.39\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPotter\n56491\n4.42\nHigh Confidence\nSafe for algorithmic decisions\n\n\nBedford\n58337\n4.47\nHigh Confidence\nSafe for algorithmic decisions\n\n\nIndiana\n57170\n4.65\nHigh Confidence\nSafe for algorithmic decisions\n\n\nHuntingdon\n61300\n4.72\nHigh Confidence\nSafe for algorithmic decisions\n\n\nMcKean\n57861\n4.75\nHigh Confidence\nSafe for algorithmic decisions\n\n\nJuniata\n61915\n4.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWayne\n59240\n4.79\nHigh Confidence\nSafe for algorithmic decisions\n\n\nPike\n76416\n4.90\nHigh Confidence\nSafe for algorithmic decisions\n\n\nWarren\n57925\n5.19\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nCarbon\n64538\n5.31\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nSnyder\n65914\n5.56\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nCameron\n46186\n5.64\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nGreene\n66283\n6.41\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nElk\n61672\n6.63\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nMontour\n72626\n7.09\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nUnion\n64914\n7.32\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nSullivan\n62910\n9.25\nModerate Confidence\nUse with caution - monitor outcomes\n\n\nForest\n46188\n9.99\nModerate Confidence\nUse with caution - monitor outcomes\n\n\n\n\n\nKey Recommendations:\nYour Task: Use your analysis results to provide specific guidance to the department.\n\nCounties suitable for immediate algorithmic implementation: The 57 counties with high confidence data (MOE &lt; 5%) including major population centers like Allegheny, Philadelphia, Montgomery, Bucks, and Chester counties are appropriate for immediate algorithmic implementation. These counties have large populations, stable demographic patterns, and reliable census estimates that minimize the risk of algorithmic bias. Their robust data quality allows algorithms to make accurate assessments and resource allocations with minimal human oversight required.\nCounties requiring additional oversight: The 10 counties with moderate confidence data (MOE 5-10%) including Forest, Sullivan, Union, Montour, Elk, Warren, Carbon, Snyder, Cameron, and Greene require enhanced monitoring protocols. These counties should implement quarterly outcome reviews, establish appeal processes for algorithmic decisions, conduct periodic manual audits of allocation patterns, and maintain enhanced documentation of decision rationales. Additionally, these counties should have lower thresholds for triggering manual review of high-stakes decisions.\nCounties needing alternative approaches: While my analysis found no counties with low confidence data at the county level, the tract-level analysis reveals that demographic data quality issues require special attention across all counties. For areas with significant demographic uncertainty, alternative approaches should include: partnering with local community organizations for supplementary data collection, implementing mandatory manual review for decisions affecting minority communities, developing alternative indicators beyond census data (such as school enrollment data or local administrative records), and establishing community feedback mechanisms to validate algorithmic outcomes."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#questions-for-further-investigation",
    "href": "assignments/assignment_1/assignment_1.html#questions-for-further-investigation",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "Questions for Further Investigation",
    "text": "Questions for Further Investigation\n\nGeographic Clustering of Data Quality Issues: Are the counties with moderate confidence data (Forest, Sullivan, Cameron, etc.) geographically clustered in specific regions of Pennsylvania, and do they share common characteristics such as rural designation, distance from urban centers, or economic base? Understanding spatial patterns could help identify systematic factors affecting census data collection and inform targeted data quality improvement efforts.\nDemographic Data Reliability Across Different Community Types: How does the reliability of demographic data vary between urban, suburban, and rural census tracts, and are there specific thresholds of population size or demographic diversity below which data becomes systematically unreliable? This analysis could help establish evidence-based guidelines for when additional data collection or alternative assessment methods are needed.\nImpact of Data Quality on Service Delivery Outcomes: How do current social service allocation patterns correlate with data quality levels, and are communities with less reliable census data currently underserved relative to their documented needs? This longitudinal analysis could provide evidence of existing algorithmic bias and help quantify the potential impact of implementing data quality-aware decision systems."
  },
  {
    "objectID": "assignments/assignment_1/assignment_1.html#submission-checklist",
    "href": "assignments/assignment_1/assignment_1.html#submission-checklist",
    "title": "Assignment 1: Census Data Quality for Policy Decisions",
    "section": "Submission Checklist",
    "text": "Submission Checklist\nBefore submitting your portfolio link on Canvas:\n\nAll code chunks run without errors\nAll “[Fill this in]” prompts have been completed\nTables are properly formatted and readable\nExecutive summary addresses all four required components\nPortfolio navigation includes this assignment\nCensus API key is properly set\nDocument renders correctly to HTML\n\nRemember: Submit your portfolio URL on Canvas, not the file itself. Your assignment should be accessible at your-portfolio-url/assignments/assignment_1/your_file_name.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "This portfolio documents my learning journey in Public Policy Analytics (MUSA 5080).\n\n\nAdvanced spatial analysis and data science for urban planning and public policy.\n\n\n\n\nWeekly Notes: My learning reflections and key concepts\nLabs: Completed assignments and analyses\nFinal Project: Capstone modeling challenge\n\n\n\n\nHi I’m Fan Yang, a student in MUSA program. Welcome to my homepage! ๑&gt;ᴗO๑\nI am deeply interested in analysis and data science, and I aspire to pursue a career in data analytics.\nSo I will give my best effort to achieve this goal!\n\n\n\n\nEmail: [yangfann@upenn.edu]\nGitHub: [@FANYANG0304]"
  },
  {
    "objectID": "index.html#about-this-course",
    "href": "index.html#about-this-course",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Advanced spatial analysis and data science for urban planning and public policy."
  },
  {
    "objectID": "index.html#portfolio-structure",
    "href": "index.html#portfolio-structure",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Weekly Notes: My learning reflections and key concepts\nLabs: Completed assignments and analyses\nFinal Project: Capstone modeling challenge"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Hi I’m Fan Yang, a student in MUSA program. Welcome to my homepage! ๑&gt;ᴗO๑\nI am deeply interested in analysis and data science, and I aspire to pursue a career in data analytics.\nSo I will give my best effort to achieve this goal!"
  },
  {
    "objectID": "index.html#contact",
    "href": "index.html#contact",
    "title": "MUSA 5080 Portfolio",
    "section": "",
    "text": "Email: [yangfann@upenn.edu]\nGitHub: [@FANYANG0304]"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html",
    "href": "labs/lab_0/lab0_index.html",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "",
    "text": "Welcome to your first lab! In this (not graded) assignment, you’ll practice the fundamental dplyr operations I overviewed in class using car sales data. This lab will help you get comfortable with:\n\nBasic data exploration\nColumn selection and manipulation\n\nCreating new variables\nFiltering data\nGrouping and summarizing\n\nInstructions: Copy this template into your portfolio repository under a lab_0/ folder, then complete each section with your code and answers. You will write the code under the comment section in each chunk. Be sure to also copy the data folder into your lab_0 folder."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#data-structure-exploration",
    "href": "labs/lab_0/lab0_index.html#data-structure-exploration",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "1.1 Data Structure Exploration",
    "text": "1.1 Data Structure Exploration\nExplore the structure of your data and answer these questions:\n\n# data structure\nglimpse(car_data)\n\nRows: 50,000\nColumns: 7\n$ Manufacturer          &lt;chr&gt; \"Ford\", \"Porsche\", \"Ford\", \"Toyota\", \"VW\", \"Ford…\n$ Model                 &lt;chr&gt; \"Fiesta\", \"718 Cayman\", \"Mondeo\", \"RAV4\", \"Polo\"…\n$ `Engine size`         &lt;dbl&gt; 1.0, 4.0, 1.6, 1.8, 1.0, 1.4, 1.8, 1.4, 1.2, 2.0…\n$ `Fuel type`           &lt;chr&gt; \"Petrol\", \"Petrol\", \"Diesel\", \"Hybrid\", \"Petrol\"…\n$ `Year of manufacture` &lt;dbl&gt; 2002, 2016, 2014, 1988, 2006, 2018, 2010, 2015, …\n$ Mileage               &lt;dbl&gt; 127300, 57850, 39190, 210814, 127869, 33603, 866…\n$ Price                 &lt;dbl&gt; 3074, 49704, 24072, 1705, 4101, 29204, 14350, 30…\n\n# Variable types\nvar_types &lt;- sapply(car_data, class)\nvar_types\n\n       Manufacturer               Model         Engine size           Fuel type \n        \"character\"         \"character\"           \"numeric\"         \"character\" \nYear of manufacture             Mileage               Price \n          \"numeric\"           \"numeric\"           \"numeric\" \n\n# Problematic names\nproblematic_names &lt;- names(car_data)[!make.names(names(car_data)) == names(car_data)]\nproblematic_names\n\n[1] \"Engine size\"         \"Fuel type\"           \"Year of manufacture\"\n\n# Look at the first few rows\nhead(car_data)\n\n# A tibble: 6 × 7\n  Manufacturer Model     `Engine size` `Fuel type` `Year of manufacture` Mileage\n  &lt;chr&gt;        &lt;chr&gt;             &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt;\n1 Ford         Fiesta              1   Petrol                       2002  127300\n2 Porsche      718 Caym…           4   Petrol                       2016   57850\n3 Ford         Mondeo              1.6 Diesel                       2014   39190\n4 Toyota       RAV4                1.8 Hybrid                       1988  210814\n5 VW           Polo                1   Petrol                       2006  127869\n6 Ford         Focus               1.4 Petrol                       2018   33603\n# ℹ 1 more variable: Price &lt;dbl&gt;\n\n\nQuestions to answer: - How many rows and columns does the dataset have? - What types of variables do you see (numeric, character, etc.)? - Are there any column names that might cause problems? Why?\nYour answers:\n\nRows: 50,000 | Columns: 7\nVariable types:\n\n\n\n\nColumn name\nVariable type\n\n\n\n\nManufacturer\ncharacter\n\n\nModel\ncharacter\n\n\nEngine size\nnumeric\n\n\nFuel type\ncharacter\n\n\nYear of manufacture\nnumeric\n\n\nMileage\nnumeric\n\n\nPrice\nnumeric\n\n\n\n\nProblematic names: Engine size, Fuel type, Year of manufacture (contain spaces)"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#tibble-vs-data-frame",
    "href": "labs/lab_0/lab0_index.html#tibble-vs-data-frame",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "1.2 Tibble vs Data Frame",
    "text": "1.2 Tibble vs Data Frame\nCompare how tibbles and data frames display:\n\n# Look at the tibble version (what we have)\ncar_data\n\n# A tibble: 50,000 × 7\n   Manufacturer Model    `Engine size` `Fuel type` `Year of manufacture` Mileage\n   &lt;chr&gt;        &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt;\n 1 Ford         Fiesta             1   Petrol                       2002  127300\n 2 Porsche      718 Cay…           4   Petrol                       2016   57850\n 3 Ford         Mondeo             1.6 Diesel                       2014   39190\n 4 Toyota       RAV4               1.8 Hybrid                       1988  210814\n 5 VW           Polo               1   Petrol                       2006  127869\n 6 Ford         Focus              1.4 Petrol                       2018   33603\n 7 Ford         Mondeo             1.8 Diesel                       2010   86686\n 8 Toyota       Prius              1.4 Hybrid                       2015   30663\n 9 VW           Polo               1.2 Petrol                       2012   73470\n10 Ford         Focus              2   Diesel                       1992  262514\n# ℹ 49,990 more rows\n# ℹ 1 more variable: Price &lt;dbl&gt;\n\n# Convert to regular data frame and display\ncar_df &lt;- as.data.frame(car_data)\n\nQuestion: What differences do you notice in how they print?\nYour answer:\n\nTibble (car_data)\n\nPrints a clean preview: shows only the first 10 rows by default.\n\nDisplays column types.\n\nData frame (car_df)\n\nPrints the entire dataset (or up to the max.print limit).\n\nDoes not show column types alongside values."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#selecting-columns",
    "href": "labs/lab_0/lab0_index.html#selecting-columns",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "2.1 Selecting Columns",
    "text": "2.1 Selecting Columns\nPractice selecting different combinations of columns:\n\nlibrary(dplyr)\n\n# Select just Model and Mileage columns\ncar_data %&gt;%\n  select(Model, Mileage)\n\n# A tibble: 50,000 × 2\n   Model      Mileage\n   &lt;chr&gt;        &lt;dbl&gt;\n 1 Fiesta      127300\n 2 718 Cayman   57850\n 3 Mondeo       39190\n 4 RAV4        210814\n 5 Polo        127869\n 6 Focus        33603\n 7 Mondeo       86686\n 8 Prius        30663\n 9 Polo         73470\n10 Focus       262514\n# ℹ 49,990 more rows\n\n# Select Manufacturer, Price, and Fuel type\ncar_data %&gt;%\n  select(Manufacturer, Price, `Fuel type`)\n\n# A tibble: 50,000 × 3\n   Manufacturer Price `Fuel type`\n   &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;      \n 1 Ford          3074 Petrol     \n 2 Porsche      49704 Petrol     \n 3 Ford         24072 Diesel     \n 4 Toyota        1705 Hybrid     \n 5 VW            4101 Petrol     \n 6 Ford         29204 Petrol     \n 7 Ford         14350 Diesel     \n 8 Toyota       30297 Hybrid     \n 9 VW            9977 Petrol     \n10 Ford          1049 Diesel     \n# ℹ 49,990 more rows\n\n# Challenge: Select all columns EXCEPT Engine size\ncar_data %&gt;%\n  select(-`Engine size`)\n\n# A tibble: 50,000 × 6\n   Manufacturer Model      `Fuel type` `Year of manufacture` Mileage Price\n   &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt;                       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n 1 Ford         Fiesta     Petrol                       2002  127300  3074\n 2 Porsche      718 Cayman Petrol                       2016   57850 49704\n 3 Ford         Mondeo     Diesel                       2014   39190 24072\n 4 Toyota       RAV4       Hybrid                       1988  210814  1705\n 5 VW           Polo       Petrol                       2006  127869  4101\n 6 Ford         Focus      Petrol                       2018   33603 29204\n 7 Ford         Mondeo     Diesel                       2010   86686 14350\n 8 Toyota       Prius      Hybrid                       2015   30663 30297\n 9 VW           Polo       Petrol                       2012   73470  9977\n10 Ford         Focus      Diesel                       1992  262514  1049\n# ℹ 49,990 more rows"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#renaming-columns",
    "href": "labs/lab_0/lab0_index.html#renaming-columns",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "2.2 Renaming Columns",
    "text": "2.2 Renaming Columns\nLet’s fix a problematic column name:\n\n# Rename 'Year of manufacture' to year\ncar_data &lt;- car_data %&gt;%\n  rename(year = `Year of manufacture`)\n\n# Check that it worked\nnames(car_data)\n\n[1] \"Manufacturer\" \"Model\"        \"Engine size\"  \"Fuel type\"    \"year\"        \n[6] \"Mileage\"      \"Price\"       \n\n\nQuestion: Why did we need backticks around Year of manufacture but not around year?\nYour answer: Because the column name contains spaces, which makes it an invalid R identifier. And backticks tell R to treat it as a literal name. In contrast, year is a valid R variable name (no spaces or special characters), so it can be used directly without backticks."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#calculate-car-age",
    "href": "labs/lab_0/lab0_index.html#calculate-car-age",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "3.1 Calculate Car Age",
    "text": "3.1 Calculate Car Age\n\n# Create an 'age' column (2025 minus year of manufacture)\n# Create a mileage_per_year column\ncar_data &lt;- car_data %&gt;%\n  mutate(\n    age = 2025 - year,\n    mileage_per_year = Mileage / age\n  )\n\n# Look at your new columns\ncar_data %&gt;%\n  select(Model, year, age, Mileage, mileage_per_year) %&gt;%\n  head()\n\n# A tibble: 6 × 5\n  Model       year   age Mileage mileage_per_year\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;            &lt;dbl&gt;\n1 Fiesta      2002    23  127300            5535.\n2 718 Cayman  2016     9   57850            6428.\n3 Mondeo      2014    11   39190            3563.\n4 RAV4        1988    37  210814            5698.\n5 Polo        2006    19  127869            6730.\n6 Focus       2018     7   33603            4800."
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#categorize-cars",
    "href": "labs/lab_0/lab0_index.html#categorize-cars",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "3.2 Categorize Cars",
    "text": "3.2 Categorize Cars\n\n# Create a price_category column where if price is &lt; 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)\ncar_data &lt;- car_data %&gt;%\n  mutate(\n    price_category = case_when(\n      Price &lt; 15000 ~ \"budget\",\n      Price &gt;= 15000 & Price &lt;= 30000 ~ \"midrange\",\n      Price &gt; 30000 ~ \"mid-range\"\n    )\n  )\n\n# Check your categories select the new column and show it\ncar_data %&gt;%\n  select(price_category) %&gt;%\n  head()\n\n# A tibble: 6 × 1\n  price_category\n  &lt;chr&gt;         \n1 budget        \n2 mid-range     \n3 midrange      \n4 budget        \n5 budget        \n6 midrange"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#basic-filtering",
    "href": "labs/lab_0/lab0_index.html#basic-filtering",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "4.1 Basic Filtering",
    "text": "4.1 Basic Filtering\n\n# Find all Toyota cars\ntoyota_cars &lt;- car_data %&gt;%\n  filter(Manufacturer == \"Toyota\")\n\n# Find cars with mileage less than 30,000\nlow_mileage_cars &lt;- car_data %&gt;%\n  filter(Mileage &lt; 30000)\n\n# Find luxury cars (from price category) with low mileage\nluxury_low_mileage &lt;- car_data %&gt;%\n  filter(price_category == \"mid-range\", Mileage &lt; 30000)\n\nhead(toyota_cars)\n\n# A tibble: 6 × 10\n  Manufacturer Model `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;         &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4            1.8 Hybrid       1988  210814  1705    37\n2 Toyota       Prius           1.4 Hybrid       2015   30663 30297    10\n3 Toyota       RAV4            2.2 Petrol       2007   79393 16026    18\n4 Toyota       Yaris           1.4 Petrol       1998   97286  4046    27\n5 Toyota       RAV4            2.4 Hybrid       2003  117425 11667    22\n6 Toyota       Yaris           1.2 Petrol       1992  245990   720    33\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(low_mileage_cars)\n\n# A tibble: 6 × 10\n  Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n2 VW           Golf                 2   Petrol       2020   18985 36387     5\n3 BMW          M5                   4   Petrol       2017   22759 97758     8\n4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(luxury_low_mileage)\n\n# A tibble: 6 × 10\n  Manufacturer Model      `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Toyota       RAV4                 2   Hybrid       2018   28381 52671     7\n2 VW           Golf                 2   Petrol       2020   18985 36387     5\n3 BMW          M5                   4   Petrol       2017   22759 97758     8\n4 Toyota       RAV4                 2.4 Petrol       2018   24588 49125     7\n5 VW           Golf                 2   Hybrid       2018   25017 36957     7\n6 Porsche      718 Cayman           2.4 Petrol       2021   14070 69526     4\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#multiple-conditions",
    "href": "labs/lab_0/lab0_index.html#multiple-conditions",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "4.2 Multiple Conditions",
    "text": "4.2 Multiple Conditions\n\n# Find cars that are EITHER Honda OR Nissan\nhonda_nissan &lt;- car_data %&gt;%\n  filter(Manufacturer %in% c(\"Honda\", \"Nissan\"))\n\n# Find cars with price between $20,000 and $35,000\nmid_price &lt;- car_data %&gt;%\n  filter(between(Price, 20000, 35000))\n\n# Find diesel cars less than 10 years old\ndiesel_recent &lt;- car_data %&gt;%\n  filter(`Fuel type` == \"Diesel\", 2025 - year &lt; 10) %&gt;%\n  count()\n\nhead(honda_nissan)\n\n# A tibble: 0 × 10\n# ℹ 10 variables: Manufacturer &lt;chr&gt;, Model &lt;chr&gt;, Engine size &lt;dbl&gt;,\n#   Fuel type &lt;chr&gt;, year &lt;dbl&gt;, Mileage &lt;dbl&gt;, Price &lt;dbl&gt;, age &lt;dbl&gt;,\n#   mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(mid_price)\n\n# A tibble: 6 × 10\n  Manufacturer Model  `Engine size` `Fuel type`  year Mileage Price   age\n  &lt;chr&gt;        &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Ford         Mondeo           1.6 Diesel       2014   39190 24072    11\n2 Ford         Focus            1.4 Petrol       2018   33603 29204     7\n3 Toyota       Prius            1.4 Hybrid       2015   30663 30297    10\n4 Toyota       Prius            1.4 Hybrid       2016   43893 29946     9\n5 Toyota       Prius            1.4 Hybrid       2016   43130 30085     9\n6 VW           Passat           1.6 Petrol       2016   64344 23641     9\n# ℹ 2 more variables: mileage_per_year &lt;dbl&gt;, price_category &lt;chr&gt;\n\nhead(diesel_recent)\n\n# A tibble: 1 × 1\n      n\n  &lt;int&gt;\n1  2040\n\n\nQuestion: How many diesel cars are less than 10 years old?\nYour answer: 2,040"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#basic-summaries",
    "href": "labs/lab_0/lab0_index.html#basic-summaries",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "5.1 Basic Summaries",
    "text": "5.1 Basic Summaries\n\n# Calculate average price by manufacturer\navg_price_by_brand &lt;- car_data %&gt;%\n  group_by(Manufacturer) %&gt;%\n  summarize(avg_price = mean(Price, na.rm = TRUE))\n\navg_price_by_brand\n\n# A tibble: 5 × 2\n  Manufacturer avg_price\n  &lt;chr&gt;            &lt;dbl&gt;\n1 BMW             24429.\n2 Ford            10672.\n3 Porsche         29104.\n4 Toyota          14340.\n5 VW              10363.\n\n# Calculate average mileage by fuel type\navg_mileage_by_fuel &lt;- car_data %&gt;%\n  group_by(`Fuel type`) %&gt;%\n  summarize(avg_mileage = mean(Mileage, na.rm = TRUE))\n\n# Count cars by manufacturer\ncars_by_manufacturer &lt;- car_data %&gt;%\n  count(Manufacturer)\n\navg_mileage_by_fuel\n\n# A tibble: 3 × 2\n  `Fuel type` avg_mileage\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Diesel          112667.\n2 Hybrid          111622.\n3 Petrol          112795.\n\ncars_by_manufacturer\n\n# A tibble: 5 × 2\n  Manufacturer     n\n  &lt;chr&gt;        &lt;int&gt;\n1 BMW           4965\n2 Ford         14959\n3 Porsche       2609\n4 Toyota       12554\n5 VW           14913"
  },
  {
    "objectID": "labs/lab_0/lab0_index.html#categorical-summaries",
    "href": "labs/lab_0/lab0_index.html#categorical-summaries",
    "title": "Lab 0: Getting Started with dplyr",
    "section": "5.2 Categorical Summaries",
    "text": "5.2 Categorical Summaries\n\n# Frequency table for price categories\nprice_freq &lt;- car_data %&gt;%\n  count(price_category)\n\nprice_freq\n\n# A tibble: 3 × 2\n  price_category     n\n  &lt;chr&gt;          &lt;int&gt;\n1 budget         34040\n2 mid-range       6178\n3 midrange        9782"
  },
  {
    "objectID": "labs/lab_setup_instructions.html",
    "href": "labs/lab_setup_instructions.html",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Each week, you’ll complete lab assignments and add them to your portfolio website. This document explains the one-time setup process and the weekly workflow you’ll follow all semester.\n\n\n\n\n\nFirst, clone the course repository (you only need to do this once):\n\nOpen Terminal/Command Prompt\nNavigate to where you want to store course materials:\ncd ~/Desktop  # or wherever you keep school folders\nClone the course repository:\ngit clone https://github.com/MUSA-5080-Fall-2025/MUSA-5080-Fall-2025.git\n\nImportant: This creates a separate folder from your portfolio repository.\n\n\n\nIn your portfolio repository, create this folder structure:\nyour-portfolio/\n├── _quarto.yml           # You'll edit this\n├── index.qmd            # Your home page  \n├── weekly-notes/        # Already exists\n├── labs/                # CREATE THIS FOLDER\n│   └── lab_0/           # CREATE THIS FOLDER\n│       ├── lab_0_template.qmd    # You'll copy this file here\n│       └── data/        # CREATE THIS FOLDER (copy data folder)\n└── ... (other files)\nIn RStudio: 1. In the Files pane, click “New Folder” 2. Name it labs 3. Inside labs, create another folder called lab_0 4. Inside lab_0, create a folder called data\n\n\n\nOpen your _quarto.yml file and modify the navbar section to add a Labs menu:\nReplace this section:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\nWith this:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\nImportant: Make sure the indentation matches exactly! YAML is sensitive to spacing.\n\n\n\n\nSave your _quarto.yml file\nIn RStudio, go to Build → Render Website\nCheck that you now see a “Labs” dropdown in your navigation menu\n\n\n\n\n\n\n\n\nGo to the course repository\nNavigate to labs/lab_X/ (where X is the lab number)\nDownload or copy the lab template files\n\n\n\n\n\nIn your portfolio, create a new folder: labs/lab_X/\nCopy the template .qmd file into this folder\nCopy any data files into labs/lab_X/data/\n\n\n\n\n\nOpen the lab .qmd file\nUpdate the author field with your name\nComplete all the exercises\nFill in all the “[YOUR ANSWER]” sections\n\n\n\n\nAdd the new lab to your _quarto.yml file:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\n        - href: labs/lab_1/           # ADD NEW LABS HERE\n          text: Lab 1: [Lab Title]\n\n\n\n\nBuild your site: Build → Render Website\nCheck locally: Make sure everything looks good\nCommit your changes:\ngit add .\ngit commit -m \"Complete Lab X: [brief description]\"\nPush to GitHub:\ngit push origin main\nCheck your live site: Your portfolio should update automatically\n\n\n\n\n\n\n\n\nCheck your _quarto.yml indentation\nMake sure all file paths are correct\nLook for typos in file names\n\n\n\n\n\nVerify you added it to _quarto.yml\nCheck that the href: path matches your folder structure\nMake sure you rendered the website after making changes\n\n\n\n\n\nCheck that data files are in the right location\nVerify you’re using relative paths: \"data/filename.csv\"\nMake sure you’re working within your R project\n\n\n\n\n\nConfirm you committed and pushed all changes\nCheck that GitHub Actions completed successfully (green checkmark)\nWait a few minutes - updates can take time\n\n\n\n\n\n\nWork incrementally: Complete one exercise at a time, render frequently\nUse descriptive commit messages: “Complete filtering exercises for Lab 0”\nKeep files organized: Don’t put data files in wrong folders\nTest locally first: Always render and check before pushing\nAsk for help: Use office hours or discussion board if stuck\n\n\n\n\nyour-portfolio/\n├── _quarto.yml\n├── index.qmd\n├── weekly-notes/\n│   ├── index.qmd\n│   ├── week_01.qmd\n│   └── week_02.qmd\n├── labs/\n│   ├── lab_0/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── car_sales_data.csv\n│   ├── lab_1/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── census_data.csv\n│   └── lab_2/\n│       ├── index.qmd\n│       └── data/\n│           └── housing_data.csv\n└── docs/                    # Generated by Quarto\n    ├── index.html\n    ├── weekly-notes/\n    ├── labs/\n    └── ...\nBy the end of the semester, you’ll have a professional portfolio showcasing all your data analysis work!\n\n\n\n\nTechnical issues: Post on Canvas discussion board\nConceptual questions: Come to office hours\nGitHub problems: Include error messages in your questions"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#overview",
    "href": "labs/lab_setup_instructions.html#overview",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Each week, you’ll complete lab assignments and add them to your portfolio website. This document explains the one-time setup process and the weekly workflow you’ll follow all semester."
  },
  {
    "objectID": "labs/lab_setup_instructions.html#one-time-setup-week-1-only",
    "href": "labs/lab_setup_instructions.html#one-time-setup-week-1-only",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "First, clone the course repository (you only need to do this once):\n\nOpen Terminal/Command Prompt\nNavigate to where you want to store course materials:\ncd ~/Desktop  # or wherever you keep school folders\nClone the course repository:\ngit clone https://github.com/MUSA-5080-Fall-2025/MUSA-5080-Fall-2025.git\n\nImportant: This creates a separate folder from your portfolio repository.\n\n\n\nIn your portfolio repository, create this folder structure:\nyour-portfolio/\n├── _quarto.yml           # You'll edit this\n├── index.qmd            # Your home page  \n├── weekly-notes/        # Already exists\n├── labs/                # CREATE THIS FOLDER\n│   └── lab_0/           # CREATE THIS FOLDER\n│       ├── lab_0_template.qmd    # You'll copy this file here\n│       └── data/        # CREATE THIS FOLDER (copy data folder)\n└── ... (other files)\nIn RStudio: 1. In the Files pane, click “New Folder” 2. Name it labs 3. Inside labs, create another folder called lab_0 4. Inside lab_0, create a folder called data\n\n\n\nOpen your _quarto.yml file and modify the navbar section to add a Labs menu:\nReplace this section:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\nWith this:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\nImportant: Make sure the indentation matches exactly! YAML is sensitive to spacing.\n\n\n\n\nSave your _quarto.yml file\nIn RStudio, go to Build → Render Website\nCheck that you now see a “Labs” dropdown in your navigation menu"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#weekly-workflow-every-lab",
    "href": "labs/lab_setup_instructions.html#weekly-workflow-every-lab",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Go to the course repository\nNavigate to labs/lab_X/ (where X is the lab number)\nDownload or copy the lab template files\n\n\n\n\n\nIn your portfolio, create a new folder: labs/lab_X/\nCopy the template .qmd file into this folder\nCopy any data files into labs/lab_X/data/\n\n\n\n\n\nOpen the lab .qmd file\nUpdate the author field with your name\nComplete all the exercises\nFill in all the “[YOUR ANSWER]” sections\n\n\n\n\nAdd the new lab to your _quarto.yml file:\nnavbar:\n  left:\n    - href: index.qmd\n      text: Home\n    - href: weekly-notes/\n      text: Weekly Notes\n    - text: Labs\n      menu:\n        - href: labs/lab_0/\n          text: Lab 0: dplyr Basics\n        - href: labs/lab_1/           # ADD NEW LABS HERE\n          text: Lab 1: [Lab Title]\n\n\n\n\nBuild your site: Build → Render Website\nCheck locally: Make sure everything looks good\nCommit your changes:\ngit add .\ngit commit -m \"Complete Lab X: [brief description]\"\nPush to GitHub:\ngit push origin main\nCheck your live site: Your portfolio should update automatically"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#troubleshooting",
    "href": "labs/lab_setup_instructions.html#troubleshooting",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Check your _quarto.yml indentation\nMake sure all file paths are correct\nLook for typos in file names\n\n\n\n\n\nVerify you added it to _quarto.yml\nCheck that the href: path matches your folder structure\nMake sure you rendered the website after making changes\n\n\n\n\n\nCheck that data files are in the right location\nVerify you’re using relative paths: \"data/filename.csv\"\nMake sure you’re working within your R project\n\n\n\n\n\nConfirm you committed and pushed all changes\nCheck that GitHub Actions completed successfully (green checkmark)\nWait a few minutes - updates can take time"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#tips-for-success",
    "href": "labs/lab_setup_instructions.html#tips-for-success",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Work incrementally: Complete one exercise at a time, render frequently\nUse descriptive commit messages: “Complete filtering exercises for Lab 0”\nKeep files organized: Don’t put data files in wrong folders\nTest locally first: Always render and check before pushing\nAsk for help: Use office hours or discussion board if stuck"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#example-portfolio-structure-after-several-labs",
    "href": "labs/lab_setup_instructions.html#example-portfolio-structure-after-several-labs",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "your-portfolio/\n├── _quarto.yml\n├── index.qmd\n├── weekly-notes/\n│   ├── index.qmd\n│   ├── week_01.qmd\n│   └── week_02.qmd\n├── labs/\n│   ├── lab_0/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── car_sales_data.csv\n│   ├── lab_1/\n│   │   ├── index.qmd\n│   │   └── data/\n│   │       └── census_data.csv\n│   └── lab_2/\n│       ├── index.qmd\n│       └── data/\n│           └── housing_data.csv\n└── docs/                    # Generated by Quarto\n    ├── index.html\n    ├── weekly-notes/\n    ├── labs/\n    └── ...\nBy the end of the semester, you’ll have a professional portfolio showcasing all your data analysis work!"
  },
  {
    "objectID": "labs/lab_setup_instructions.html#questions",
    "href": "labs/lab_setup_instructions.html#questions",
    "title": "Lab Setup Instructions",
    "section": "",
    "text": "Technical issues: Post on Canvas discussion board\nConceptual questions: Come to office hours\nGitHub problems: Include error messages in your questions"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html",
    "href": "weekly-notes/week-02-notes.html",
    "title": "MUSA 5080 Notes #2",
    "section": "",
    "text": "Note\n\n\n\nWeek 2: Algorithmic Decision Making & Census Data\nDate: 09/15/2025"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-1-algorithmic-decision-making",
    "href": "weekly-notes/week-02-notes.html#part-1-algorithmic-decision-making",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 1: Algorithmic Decision Making",
    "text": "Part 1: Algorithmic Decision Making\n\nWhat Is An Algorithm?\n\n\nDefinition: A set of rules or instructions for solving a problem or completing a task\n\nExamples: - Recipe for cooking - Directions to get somewhere - Decision tree for hiring - Computer program that processes data to make predictions\n\n\n\n\nAlgorithmic Decision Making in Government\nSystems used to assist or replace human decision-makers\nBased on predictions from models that process historical data containing: - Inputs (“features”, “predictors”, “independent variables”, “x”) - Outputs (“labels”, “outcome”, “dependent variable”, “y”)\n\n\nReal-World Examples\n\n\nCriminal Justice Recidivism risk scores for bail and sentencing decisions\n\nHousing & Finance Mortgage lending and tenant screening algorithms\n\nHealthcare Patient care prioritization and resource allocation\n\n\n\n\nWhy Government Uses Algorithms\nGovernments have limited budgets and need to serve everyone\nAlgorithmic decision making promises: - Efficiency - process more cases faster - Consistency - same rules applied to everyone - Objectivity - removes human bias - Cost savings - fewer staff needed"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#when-algorithms-go-wrong",
    "href": "weekly-notes/week-02-notes.html#when-algorithms-go-wrong",
    "title": "MUSA 5080 Notes #2",
    "section": "When Algorithms Go Wrong",
    "text": "When Algorithms Go Wrong\n\nRemember: Data Analytics Is Subjective\nEvery step involves human choices: - Data cleaning decisions - Data coding or classification - Data collection - use of imperfect proxies - How I interpret results - What variables I put in the model\n\n\n\n\n\n\nImportant\n\n\n\nThese choices embed human values and biases\n\n\n\n\nCase Study 1: Healthcare Algorithm Bias\nThe Problem: Algorithm used to identify high-risk patients for additional care systematically discriminated against Black patients\nWhat Went Wrong: - Algorithm used healthcare costs as a proxy for need - Black patients typically incur lower costs due to systemic inequities in access - Result: Black patients under-prioritized despite equivalent levels of illness\nScale: Used by hospitals and insurers for over 200 million people annually\n\n\nCase Study 2: Criminal Justice Algorithm Bias\nCOMPAS Recidivism Prediction:\nThe Problem: - Algorithm 2x as likely to falsely flag Black defendants as high risk - White defendants often rated low risk even when they do reoffend\nWhy This Happens: - Historical arrest data reflects biased policing patterns - Socioeconomic proxies correlate with race - “Objective” data contains subjective human decisions\n\n\nCase Study 3: Dutch Welfare Fraud Detection\nThe Problem: - “Black box” system operated in secrecy - Impossible for individuals to understand or challenge decisions - Disproportionately targeted vulnerable populations\nCourt Ruling: - Breached privacy rights under European Convention on Human Rights - Highlighted unfair profiling and discrimination - System eventually shut down"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#key-lesson-designing-ethical-algorithms",
    "href": "weekly-notes/week-02-notes.html#key-lesson-designing-ethical-algorithms",
    "title": "MUSA 5080 Notes #2",
    "section": "Key Lesson: Designing Ethical Algorithms",
    "text": "Key Lesson: Designing Ethical Algorithms\n\nCritical Questions to Ask\nWhen designing algorithmic systems, consider:\n\nProxy: What would I use to stand in for what I want?\nBlind spot: What data gap or historical bias could skew results?\nHarm + Guardrail: Who could be harmed, and what’s one simple safeguard?\n\n\n\nExample: Emergency Response\n\nProxy: 911 call volume → stand-in for “need”\nBlind spot: Under-calling where trust/connectivity is low\nHarm + Guardrail: Wealthier areas over-prioritized → add a vulnerability boost (age/disability) and a minimum-service floor per zone\n\n\n\nPotential Guardrails\n\nPrioritize vulnerable groups\nCap disparities across areas (simple rule)\nHuman review + appeals for edge cases\nReplace a bad proxy (collect the right thing)\nPublish criteria & run a periodic bias check"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-2-census-data-foundations",
    "href": "weekly-notes/week-02-notes.html#part-2-census-data-foundations",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 2: Census Data Foundations",
    "text": "Part 2: Census Data Foundations\n\nWhy Census Data Matters\nCensus data is the foundation for: - Understanding community demographics - Allocating government resources - Tracking neighborhood change - Designing fair algorithms (like those we just discussed)\n\n\nCensus vs. American Community Survey\n\n\nDecennial Census (2020) - Everyone counted every 10 years - 9 basic questions: age, race, sex, housing - Constitutional requirement - Determines political representation\n\nAmerican Community Survey (ACS) - 3% of households surveyed annually - Detailed questions: income, education, employment, housing costs - Replaced the old “long form” in 2005 - A big source of data I’ll use this semester\n\n\n\n\nACS Estimates: What I Need to Know\n1-Year Estimates (areas &gt; 65,000 people) - Most current data, smallest sample\n5-Year Estimates (all areas including census tracts) - Most reliable data, largest sample - What I’ll use most often\n\n\n\n\n\n\nTip\n\n\n\nKey Point: All ACS data comes with margins of error - I need to learn to work with uncertainty\n\n\n\n\nCensus Geography Hierarchy\nNation\n├── Regions  \n├── States\n│   ├── Counties\n│   │   ├── Census Tracts (1,500-8,000 people)\n│   │   │   ├── Block Groups (600-3,000 people)  \n│   │   │   │   └── Blocks (≈85 people, Decennial only)\nMost policy analysis happens at: - County level - state and regional planning - Census tract level - neighborhood analysis - Block group level - very local analysis (tempting, but big MOEs)"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#part-3-working-with-census-data-in-r",
    "href": "weekly-notes/week-02-notes.html#part-3-working-with-census-data-in-r",
    "title": "MUSA 5080 Notes #2",
    "section": "Part 3: Working with Census Data in R",
    "text": "Part 3: Working with Census Data in R\n\nBasic get_acs() Function\nMost important function I’ll use:\nlibrary(tidycensus)\n\n# Get state population data\nget_acs(\n  geography = \"state\",\n  variables = \"B01003_001\",\n  year = 2022,\n  survey = \"acs5\"\n)\nKey parameters: geography, variables, year, survey\n\n\nUnderstanding the Output\nEvery ACS result includes: - GEOID - Geographic identifier - NAME - Human-readable location name - variable - Census variable code - estimate - The actual value - moe - Margin of error\n\n\nWorking with Multiple Variables\n# Get county data with multiple variables\ncounty_data &lt;- get_acs(\n  geography = \"county\",\n  variables = c(\n    total_pop = \"B01003_001\",\n    median_income = \"B19013_001\"\n  ),\n  state = \"PA\",\n  year = 2022,\n  survey = \"acs5\",\n  output = \"wide\"\n)\n\n\nData Cleaning Essentials\n# Clean up messy geographic names\ncounty_data &lt;- county_data %&gt;%\n  mutate(\n    county_name = str_remove(NAME, \", Pennsylvania\"),\n    county_name = str_remove(county_name, \" County\")\n  )\n\n\nCalculating Data Reliability\n# Calculate MOE percentage and reliability categories\ncounty_reliability &lt;- county_data %&gt;%\n  mutate(\n    moe_percentage = (median_incomeM / median_incomeE) * 100,\n    reliability = case_when(\n      moe_percentage &lt; 5 ~ \"High Confidence\",\n      moe_percentage &gt;= 5 & moe_percentage &lt;= 10 ~ \"Moderate\",\n      moe_percentage &gt; 10 ~ \"Low Confidence\"\n    )\n  )\n\n\nWorking with Margins of Error\nEvery ACS estimate comes with uncertainty\nRule of thumb: - Large MOE relative to estimate = less reliable - Small MOE relative to estimate = more reliable\nIn my analysis: - Always report MOE alongside estimates - Be cautious comparing estimates with overlapping error margins - Consider using 5-year estimates for greater reliability"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#connecting-the-dots",
    "href": "weekly-notes/week-02-notes.html#connecting-the-dots",
    "title": "MUSA 5080 Notes #2",
    "section": "Connecting the Dots",
    "text": "Connecting the Dots\n\nFrom Algorithms to Analysis\nToday’s key connections:\n\nAlgorithmic Decision Making → Understanding why my analysis matters for real policy decisions\nData Subjectivity → Why I need to emphasize transparent, reproducible methods in my work\nCensus Data → The foundation for most urban planning and policy analysis\nR Skills → The tools I need to do this work professionally and ethically\n\n\n\nQuestions for Reflection\nAs I work with data this semester, I should ask:\n\nWhat assumptions am I making in my data choices?\nWho might be excluded from my analysis?\nHow could my findings be misused if taken out of context?\nWhat would I want policymakers to understand about my methods?\n\n\n\n\n\n\n\nTip\n\n\n\nThese questions will make me a more thoughtful analyst and better future policymaker"
  },
  {
    "objectID": "weekly-notes/week-02-notes.html#summary",
    "href": "weekly-notes/week-02-notes.html#summary",
    "title": "MUSA 5080 Notes #2",
    "section": "Summary",
    "text": "Summary\nThis week I learned about the critical intersection between technical skills and ethical responsibility in data analysis. My key takeaways:\n\nAlgorithms are not neutral - they embed human choices and biases at every step\nReal-world consequences - algorithmic bias can systematically harm vulnerable populations\nCensus data is foundational but comes with inherent uncertainties that I must acknowledge\nTechnical competence must be paired with ethical awareness to create fair and effective policy tools\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember: Every data analysis decision I make has potential policy implications. I need to approach my work with both technical rigor and ethical consideration."
  }
]